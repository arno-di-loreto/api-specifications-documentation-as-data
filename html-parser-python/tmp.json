{
    "data": {
        "version": "3.1.0"
    },
    "source": {
        "type": "root",
        "subType": null,
        "level": 0,
        "text": "OpenAPI Specification\nVersion 3.1.0\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 RFC2119 RFC8174 when, and only when, they appear in all capitals, as shown here.\nThis document is licensed under The Apache License, Version 2.0.\nIntroduction\nThe OpenAPI Specification (OAS) defines a standard, language-agnostic interface to HTTP APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, a consumer can understand and interact with the remote service with a minimal amount of implementation logic.\nAn OpenAPI definition can then be used by documentation generation tools to display the API, code generation tools to generate servers and clients in various programming languages, testing tools, and many other use cases.\nTable of Contents\n\n\nDefinitions\nOpenAPI Document\nPath Templating\nMedia Types\nHTTP Status Codes\n\n\nSpecification\nVersions\nFormat\nDocument Structure\nData Types\nRich Text Formatting\nRelative References In URIs\nRelative References In URLs\nSchema\nOpenAPI Object\nInfo Object\nContact Object\nLicense Object\nServer Object\nServer Variable Object\nComponents Object\nPaths Object\nPath Item Object\nOperation Object\nExternal Documentation Object\nParameter Object\nRequest Body Object\nMedia Type Object\nEncoding Object\nResponses Object\nResponse Object\nCallback Object\nExample Object\nLink Object\nHeader Object\nTag Object\nReference Object\nSchema Object\nDiscriminator Object\nXML Object\nSecurity Scheme Object\nOAuth Flows Object\nOAuth Flow Object\nSecurity Requirement Object\n\n\nSpecification Extensions\nSecurity Filtering\n\n\nAppendix A: Revision History\n\n\nDefinitions\nOpenAPI Document\nA self-contained or composite resource which defines or describes an API or elements of an API. The OpenAPI document MUST contain at least one paths field, a components field or a webhooks field. An OpenAPI document uses and conforms to the OpenAPI Specification.\nPath Templating\nPath templating refers to the usage of template expressions, delimited by curly braces ({}), to mark a section of a URL path as replaceable using path parameters.\nEach template expression in the path MUST correspond to a path parameter that is included in the Path Item itself and/or in each of the Path Item's Operations. An exception is if the path item is empty, for example due to ACL constraints, matching path parameters are not required.\nThe value for these path parameters MUST NOT contain any unescaped \"generic syntax\" characters described by RFC3986: forward slashes (/), question marks (?), or hashes (#).\nMedia Types\nMedia type definitions are spread across several resources.\nThe media type definitions SHOULD be in compliance with RFC6838.\nSome examples of possible media type definitions:\n  text/plain; charset=utf-8\n  application/json\n  application/vnd.github+json\n  application/vnd.github.v3+json\n  application/vnd.github.v3.raw+json\n  application/vnd.github.v3.text+json\n  application/vnd.github.v3.html+json\n  application/vnd.github.v3.full+json\n  application/vnd.github.v3.diff\n  application/vnd.github.v3.patch\n\nHTTP Status Codes\nThe HTTP Status Codes are used to indicate the status of the executed operation. \nThe available status codes are defined by RFC7231 and registered status codes are listed in the IANA Status Code Registry.\nSpecification\nVersions\nThe OpenAPI Specification is versioned using a major.minor.patch versioning scheme. The major.minor portion of the version string (for example 3.1) SHALL designate the OAS feature set. .patch versions address errors in, or provide clarifications to, this document, not the feature set. Tooling which supports OAS 3.1 SHOULD be compatible with all OAS 3.1.* versions. The patch version SHOULD NOT be considered by tooling, making no distinction between 3.1.0 and 3.1.1 for example.\nOccasionally, non-backwards compatible changes may be made in minor versions of the OAS where impact is believed to be low relative to the benefit provided.\nAn OpenAPI document compatible with OAS 3.*.* contains a required openapi field which designates the version of the OAS that it uses.\nFormat\nAn OpenAPI document that conforms to the OpenAPI Specification is itself a JSON object, which may be represented either in JSON or YAML format.\nFor example, if a field has an array value, the JSON array representation will be used:\n{\n   \"field\": [ 1, 2, 3 ]\n}\n\nAll field names in the specification are case sensitive.\nThis includes all fields that are used as keys in a map, except where explicitly noted that keys are case insensitive.\nThe schema exposes two types of fields: Fixed fields, which have a declared name, and Patterned fields, which declare a regex pattern for the field name.\nPatterned fields MUST have unique names within the containing object. \nIn order to preserve the ability to round-trip between YAML and JSON formats, YAML version 1.2 is RECOMMENDED along with some additional constraints:\n\nTags MUST be limited to those allowed by the JSON Schema ruleset.\nKeys used in YAML maps MUST be limited to a scalar string, as defined by the YAML Failsafe schema ruleset.\n\nNote: While APIs may be defined by OpenAPI documents in either YAML or JSON format, the API request and response bodies and other content are not required to be JSON or YAML.\nDocument Structure\nAn OpenAPI document MAY be made up of a single document or be divided into multiple, connected parts at the discretion of the author. In the latter case, Reference Objects and Schema Object $ref keywords are used.\nIt is RECOMMENDED that the root OpenAPI document be named: openapi.json or openapi.yaml.\nData Types\nData types in the OAS are based on the types supported by the JSON Schema Specification Draft 2020-12.\nNote that integer as a type is also supported and is defined as a JSON number without a fraction or exponent part. \nModels are defined using the Schema Object, which is a superset of JSON Schema Specification Draft 2020-12.\nAs defined by the JSON Schema Validation vocabulary, data types can have an optional modifier property: format.\nOAS defines additional formats to provide fine detail for primitive data types.\nThe formats defined by the OAS are:\n\n\n\ntype\nformat\nComments\n\n\n\n\ninteger\nint32\nsigned 32 bits\n\n\ninteger\nint64\nsigned 64 bits (a.k.a long)\n\n\nnumber\nfloat\n\n\n\nnumber\ndouble\n\n\n\nstring\npassword\nA hint to UIs to obscure input.\n\n\n\nRich Text Formatting\nThroughout the specification description fields are noted as supporting CommonMark markdown formatting.\nWhere OpenAPI tooling renders rich text it MUST support, at a minimum, markdown syntax as described by CommonMark 0.27. Tooling MAY choose to ignore some CommonMark features to address security concerns. \nRelative References in URIs\nUnless specified otherwise, all properties that are URIs MAY be relative references as defined by RFC3986.\nRelative references, including those in Reference Objects, PathItem Object $ref fields, Link Object operationRef fields and Example Object externalValue fields, are resolved using the referring document as the Base URI according to RFC3986.\nIf a URI contains a fragment identifier, then the fragment should be resolved per the fragment resolution mechanism of the referenced document.  If the representation of the referenced document is JSON or YAML, then the fragment identifier SHOULD be interpreted as a JSON-Pointer as per RFC6901.\nRelative references in Schema Objects, including any that appear as $id values, use the nearest parent $id as a Base URI, as described by JSON Schema Specification Draft 2020-12.  If no parent schema contains an $id, then the Base URI MUST be determined according to RFC3986.\nRelative References in URLs\nUnless specified otherwise, all properties that are URLs MAY be relative references as defined by RFC3986.\nUnless specified otherwise, relative references are resolved using the URLs defined in the Server Object as a Base URL. Note that these themselves MAY be relative to the referring document.\nSchema\nIn the following description, if a field is not explicitly REQUIRED or described with a MUST or SHALL, it can be considered OPTIONAL.\nOpenAPI Object\nThis is the root object of the OpenAPI document.\nFixed Fields\n\n\n\nField Name\nType\nDescription\n\n\n\n\nopenapi\nstring\nREQUIRED. This string MUST be the version number of the OpenAPI Specification that the OpenAPI document uses. The openapi field SHOULD be used by tooling to interpret the OpenAPI document. This is not related to the API info.version string.\n\n\ninfo\nInfo Object\nREQUIRED. Provides metadata about the API. The metadata MAY be used by tooling as required.\n\n\n jsonSchemaDialect\nstring\nThe default value for the $schema keyword within Schema Objects contained within this OAS document. This MUST be in the form of a URI.\n\n\nservers\n[Server Object]\nAn array of Server Objects, which provide connectivity information to a target server. If the servers property is not provided, or is an empty array, the default value would be a Server Object with a url value of /.\n\n\npaths\nPaths Object\nThe available paths and operations for the API.\n\n\nwebhooks\nMap[string, Path Item Object | Reference Object] ]\nThe incoming webhooks that MAY be received as part of this API and that the API consumer MAY choose to implement. Closely related to the callbacks feature, this section describes requests initiated other than by an API call, for example by an out of band registration. The key name is a unique string to refer to each webhook, while the (optionally referenced) Path Item Object describes a request that may be initiated by the API provider and the expected responses. An example is available.\n\n\ncomponents\nComponents Object\nAn element to hold various schemas for the document.\n\n\nsecurity\n[Security Requirement Object]\nA declaration of which security mechanisms can be used across the API. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. Individual operations can override this definition. To make security optional, an empty security requirement ({}) can be included in the array.\n\n\ntags\n[Tag Object]\nA list of tags used by the document with additional metadata. The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by the Operation Object must be declared. The tags that are not declared MAY be organized randomly or based on the tools' logic. Each tag name in the list MUST be unique.\n\n\nexternalDocs\nExternal Documentation Object\nAdditional external documentation.\n\n\n\nThis object MAY be extended with Specification Extensions.\nInfo Object\nThe object provides metadata about the API.\nThe metadata MAY be used by the clients if needed, and MAY be presented in editing or documentation generation tools for convenience.\nFixed Fields\n\n\n\nField Name\nType\nDescription\n\n\n\n\ntitle\nstring\nREQUIRED. The title of the API.\n\n\nsummary\nstring\nA short summary of the API.\n\n\ndescription\nstring\nA description of the API. CommonMark syntax MAY be used for rich text representation.\n\n\ntermsOfService\nstring\nA URL to the Terms of Service for the API. This MUST be in the form of a URL.\n\n\ncontact\nContact Object\nThe contact information for the exposed API.\n\n\nlicense\nLicense Object\nThe license information for the exposed API.\n\n\nversion\nstring\nREQUIRED. The version of the OpenAPI document (which is distinct from the OpenAPI Specification version or the API implementation version).\n\n\n\nThis object MAY be extended with Specification Extensions.\nInfo Object Example\n{\n  \"title\": \"Sample Pet Store App\",\n  \"summary\": \"A pet store manager.\",\n  \"description\": \"This is a sample server for a pet store.\",\n  \"termsOfService\": \"https://example.com/terms/\",\n  \"contact\": {\n    \"name\": \"API Support\",\n    \"url\": \"https://www.example.com/support\",\n    \"email\": \"support@example.com\"\n  },\n  \"license\": {\n    \"name\": \"Apache 2.0\",\n    \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n  },\n  \"version\": \"1.0.1\"\n}\n\ntitle: Sample Pet Store App\nsummary: A pet store manager.\ndescription: This is a sample server for a pet store.\ntermsOfService: https://example.com/terms/\ncontact:\n  name: API Support\n  url: https://www.example.com/support\n  email: support@example.com\nlicense:\n  name: Apache 2.0\n  url: https://www.apache.org/licenses/LICENSE-2.0.html\nversion: 1.0.1\n\nContact Object\nContact information for the exposed API.\nFixed Fields\n\n\n\nField Name\nType\nDescription\n\n\n\n\nname\nstring\nThe identifying name of the contact person/organization.\n\n\nurl\nstring\nThe URL pointing to the contact information. This MUST be in the form of a URL.\n\n\nemail\nstring\nThe email address of the contact person/organization. This MUST be in the form of an email address.\n\n\n\nThis object MAY be extended with Specification Extensions.\nContact Object Example\n{\n  \"name\": \"API Support\",\n  \"url\": \"https://www.example.com/support\",\n  \"email\": \"support@example.com\"\n}\n\nname: API Support\nurl: https://www.example.com/support\nemail: support@example.com\n\nLicense Object\nLicense information for the exposed API.\nFixed Fields\n\n\n\nField Name\nType\nDescription\n\n\n\n\nname\nstring\nREQUIRED. The license name used for the API.\n\n\nidentifier\nstring\nAn SPDX license expression for the API. The identifier field is mutually exclusive of the url field.\n\n\nurl\nstring\nA URL to the license used for the API. This MUST be in the form of a URL. The url field is mutually exclusive of the identifier field.\n\n\n\nThis object MAY be extended with Specification Extensions.\nLicense Object Example\n{\n  \"name\": \"Apache 2.0\",\n  \"identifier\": \"Apache-2.0\"\n}\n\nname: Apache 2.0\nidentifier: Apache-2.0\n\nServer Object\nAn object representing a Server.\nFixed Fields\n\n\n\nField Name\nType\nDescription\n\n\n\n\nurl\nstring\nREQUIRED. A URL to the target host.  This URL supports Server Variables and MAY be relative, to indicate that the host location is relative to the location where the OpenAPI document is being served. Variable substitutions will be made when a variable is named in {brackets}.\n\n\ndescription\nstring\nAn optional string describing the host designated by the URL. CommonMark syntax MAY be used for rich text representation.\n\n\nvariables\nMap[string, Server Variable Object]\nA map between a variable name and its value.  The value is used for substitution in the server's URL template.\n\n\n\nThis object MAY be extended with Specification Extensions.\nServer Object Example\nA single server would be described as:\n{\n  \"url\": \"https://development.gigantic-server.com/v1\",\n  \"description\": \"Development server\"\n}\n\nurl: https://development.gigantic-server.com/v1\ndescription: Development server\n\nThe following shows how multiple servers can be described, for example, at the OpenAPI Object's servers:\n{\n  \"servers\": [\n    {\n      \"url\": \"https://development.gigantic-server.com/v1\",\n      \"description\": \"Development server\"\n    },\n    {\n      \"url\": \"https://staging.gigantic-server.com/v1\",\n      \"description\": \"Staging server\"\n    },\n    {\n      \"url\": \"https://api.gigantic-server.com/v1\",\n      \"description\": \"Production server\"\n    }\n  ]\n}\n\nservers:\n- url: https://development.gigantic-server.com/v1\n  description: Development server\n- url: https://staging.gigantic-server.com/v1\n  description: Staging server\n- url: https://api.gigantic-server.com/v1\n  description: Production server\n\nThe following shows how variables can be used for a server configuration:\n{\n  \"servers\": [\n    {\n      \"url\": \"https://{username}.gigantic-server.com:{port}/{basePath}\",\n      \"description\": \"The production API server\",\n      \"variables\": {\n        \"username\": {\n          \"default\": \"demo\",\n          \"description\": \"this value is assigned by the service provider, in this example `gigantic-server.com`\"\n        },\n        \"port\": {\n          \"enum\": [\n            \"8443\",\n            \"443\"\n          ],\n          \"default\": \"8443\"\n        },\n        \"basePath\": {\n          \"default\": \"v2\"\n        }\n      }\n    }\n  ]\n}\n\nservers:\n- url: https://{username}.gigantic-server.com:{port}/{basePath}\n  description: The production API server\n  variables:\n    username:\n      # note! no enum here means it is an open value\n      default: demo\n      description: this value is assigned by the service provider, in this example `gigantic-server.com`\n    port:\n      enum:\n        - '8443'\n        - '443'\n      default: '8443'\n    basePath:\n      # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`\n      default: v2\n\nServer Variable Object\nAn object representing a Server Variable for server URL template substitution.\nFixed Fields\n\n\n\nField Name\nType\nDescription\n\n\n\n\nenum\n[string]\nAn enumeration of string values to be used if the substitution options are from a limited set. The array MUST NOT be empty.\n\n\ndefault\nstring\nREQUIRED. The default value to use for substitution, which SHALL be sent if an alternate value is not supplied. Note this behavior is different than the Schema Object's treatment of default values, because in those cases parameter values are optional. If the enum is defined, the value MUST exist in the enum's values.\n\n\ndescription\nstring\nAn optional description for the server variable. CommonMark syntax MAY be used for rich text representation.\n\n\n\nThis object MAY be extended with Specification Extensions.\nComponents Object\nHolds a set of reusable objects for different aspects of the OAS.\nAll objects defined within the components object will have no effect on the API unless they are explicitly referenced from properties outside the components object.\nFixed Fields\n\n\n\nField Name\nType\nDescription\n\n\n\n\n schemas\nMap[string, Schema Object]\nAn object to hold reusable Schema Objects.\n\n\n responses\nMap[string, Response Object | Reference Object]\nAn object to hold reusable Response Objects.\n\n\n parameters\nMap[string, Parameter Object | Reference Object]\nAn object to hold reusable Parameter Objects.\n\n\n examples\nMap[string, Example Object | Reference Object]\nAn object to hold reusable Example Objects.\n\n\n requestBodies\nMap[string, Request Body Object | Reference Object]\nAn object to hold reusable Request Body Objects.\n\n\n headers\nMap[string, Header Object | Reference Object]\nAn object to hold reusable Header Objects.\n\n\n securitySchemes\nMap[string, Security Scheme Object | Reference Object]\nAn object to hold reusable Security Scheme Objects.\n\n\n links\nMap[string, Link Object | Reference Object]\nAn object to hold reusable Link Objects.\n\n\n callbacks\nMap[string, Callback Object | Reference Object]\nAn object to hold reusable Callback Objects.\n\n\n pathItems\nMap[string, Path Item Object | Reference Object]\nAn object to hold reusable Path Item Object.\n\n\n\nThis object MAY be extended with Specification Extensions.\nAll the fixed fields declared above are objects that MUST use keys that match the regular expression: ^[a-zA-Z0-9\\.\\-_]+$.\nField Name Examples:\nUser\nUser_1\nUser_Name\nuser-name\nmy.org.User\n\nComponents Object Example\n\"components\": {\n  \"schemas\": {\n    \"GeneralError\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"code\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        },\n        \"message\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Category\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Tag\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  },\n  \"parameters\": {\n    \"skipParam\": {\n      \"name\": \"skip\",\n      \"in\": \"query\",\n      \"description\": \"number of items to skip\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    },\n    \"limitParam\": {\n      \"name\": \"limit\",\n      \"in\": \"query\",\n      \"description\": \"max records to return\",\n      \"required\": true,\n      \"schema\" : {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    }\n  },\n  \"responses\": {\n    \"NotFound\": {\n      \"description\": \"Entity not found.\"\n    },\n    \"IllegalInput\": {\n      \"description\": \"Illegal input for operation.\"\n    },\n    \"GeneralError\": {\n      \"description\": \"General Error\",\n      \"content\": {\n        \"application/json\": {\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/GeneralError\"\n          }\n        }\n      }\n    }\n  },\n  \"securitySchemes\": {\n    \"api_key\": {\n      \"type\": \"apiKey\",\n      \"name\": \"api_key\",\n      \"in\": \"header\"\n    },\n    \"petstore_auth\": {\n      \"type\": \"oauth2\",\n      \"flows\": {\n        \"implicit\": {\n          \"authorizationUrl\": \"https://example.org/api/oauth/dialog\",\n          \"scopes\": {\n            \"write:pets\": \"modify pets in your account\",\n            \"read:pets\": \"read your pets\"\n          }\n        }\n      }\n    }\n  }\n}\n\ncomponents:\n  schemas:\n    GeneralError:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n  parameters:\n    skipParam:\n      name: skip\n      in: query\n      description: number of items to skip\n      required: true\n      schema:\n        type: integer\n        format: int32\n    limitParam:\n      name: limit\n      in: query\n      description: max records to return\n      required: true\n      schema:\n        type: integer\n        format: int32\n  responses:\n    NotFound:\n      description: Entity not found.\n    IllegalInput:\n      description: Illegal input for operation.\n    GeneralError:\n      description: General Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GeneralError'\n  securitySchemes:\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n    petstore_auth:\n      type: oauth2\n      flows: \n        implicit:\n          authorizationUrl: https://example.org/api/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n\nPaths Object\nHolds the relative paths to the individual endpoints and their operations.\nThe path is appended to the URL from the Server Object in order to construct the full URL.  The Paths MAY be empty, due to Access Control List (ACL) constraints.\nPatterned Fields\n\n\n\nField Pattern\nType\nDescription\n\n\n\n\n/{path}\nPath Item Object\nA relative path to an individual endpoint. The field name MUST begin with a forward slash (/). The path is appended (no relative URL resolution) to the expanded URL from the Server Object's url field in order to construct the full URL. Path templating is allowed. When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts. Templated paths with the same hierarchy but different templated names MUST NOT exist as they are identical. In case of ambiguous matching, it's up to the tooling to decide which one to use.\n\n\n\nThis object MAY be extended with Specification Extensions.\nPath Templating Matching\nAssuming the following paths, the concrete definition, /pets/mine, will be matched first if used:\n  /pets/{petId}\n  /pets/mine\n\nThe following paths are considered identical and invalid:\n  /pets/{petId}\n  /pets/{name}\n\nThe following may lead to ambiguous resolution:\n  /{entity}/me\n  /books/{id}\n\nPaths Object Example\n{\n  \"/pets\": {\n    \"get\": {\n      \"description\": \"Returns all pets from the system that the user has access to\",\n      \"responses\": {\n        \"200\": {          \n          \"description\": \"A list of pets.\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/pet\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n/pets:\n  get:\n    description: Returns all pets from the system that the user has access to\n    responses:\n      '200':\n        description: A list of pets.\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/pet'\n\nPath Item Object\nDescribes the operations available on a single path.\nA Path Item MAY be empty, due to ACL constraints.\nThe path itself is still exposed to the documentation viewer but they will not know which operations and parameters are available.\nFixed Fields\n\n\n\nField Name\nType\nDescription\n\n\n\n\n$ref\nstring\nAllows for a referenced definition of this path item. The referenced structure MUST be in the form of a Path Item Object.  In case a Path Item Object field appears both in the defined object and the referenced object, the behavior is undefined. See the rules for resolving Relative References.\n\n\nsummary\nstring\nAn optional, string summary, intended to apply to all operations in this path.\n\n\ndescription\nstring\nAn optional, string description, intended to apply to all operations in this path. CommonMark syntax MAY be used for rich text representation.\n\n\nget\nOperation Object\nA definition of a GET operation on this path.\n\n\nput\nOperation Object\nA definition of a PUT operation on this path.\n\n\npost\nOperation Object\nA definition of a POST operation on this path.\n\n\ndelete\nOperation Object\nA definition of a DELETE operation on this path.\n\n\noptions\nOperation Object\nA definition of a OPTIONS operation on this path.\n\n\nhead\nOperation Object\nA definition of a HEAD operation on this path.\n\n\npatch\nOperation Object\nA definition of a PATCH operation on this path.\n\n\ntrace\nOperation Object\nA definition of a TRACE operation on this path.\n\n\nservers\n[Server Object]\nAn alternative server array to service all operations in this path.\n\n\nparameters\n[Parameter Object | Reference Object]\nA list of parameters that are applicable for all the operations described under this path. These parameters can be overridden at the operation level, but cannot be removed there. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a name and location. The list can use the Reference Object to link to parameters that are defined at the OpenAPI Object's components/parameters.\n\n\n\nThis object MAY be extended with Specification Extensions.\nPath Item Object Example\n{\n  \"get\": {\n    \"description\": \"Returns pets based on ID\",\n    \"summary\": \"Find pets by ID\",\n    \"operationId\": \"getPetsById\",\n    \"responses\": {\n      \"200\": {\n        \"description\": \"pet response\",\n        \"content\": {\n          \"*/*\": {\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"$ref\": \"#/components/schemas/Pet\"\n              }\n            }\n          }\n        }\n      },\n      \"default\": {\n        \"description\": \"error payload\",\n        \"content\": {\n          \"text/html\": {\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/ErrorModel\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \"parameters\": [\n    {\n      \"name\": \"id\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet to use\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"style\": \"simple\"\n    }\n  ]\n}\n\nget:\n  description: Returns pets based on ID\n  summary: Find pets by ID\n  operationId: getPetsById\n  responses:\n    '200':\n      description: pet response\n      content:\n        '*/*' :\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/Pet'\n    default:\n      description: error payload\n      content:\n        'text/html':\n          schema:\n            $ref: '#/components/schemas/ErrorModel'\nparameters:\n- name: id\n  in: path\n  description: ID of pet to use\n  required: true\n  schema:\n    type: array\n    items:\n      type: string  \n  style: simple\n\nOperation Object\nDescribes a single API operation on a path.\nFixed Fields\n\n\n\nField Name\nType\nDescription\n\n\n\n\ntags\n[string]\nA list of tags for API documentation control. Tags can be used for logical grouping of operations by resources or any other qualifier.\n\n\nsummary\nstring\nA short summary of what the operation does.\n\n\ndescription\nstring\nA verbose explanation of the operation behavior. CommonMark syntax MAY be used for rich text representation.\n\n\nexternalDocs\nExternal Documentation Object\nAdditional external documentation for this operation.\n\n\noperationId\nstring\nUnique string used to identify the operation. The id MUST be unique among all operations described in the API. The operationId value is case-sensitive. Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is RECOMMENDED to follow common programming naming conventions.\n\n\nparameters\n[Parameter Object | Reference Object]\nA list of parameters that are applicable for this operation. If a parameter is already defined at the Path Item, the new definition will override it but can never remove it. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a name and location. The list can use the Reference Object to link to parameters that are defined at the OpenAPI Object's components/parameters.\n\n\nrequestBody\nRequest Body Object | Reference Object\nThe request body applicable for this operation.  The requestBody is fully supported in HTTP methods where the HTTP 1.1 specification RFC7231 has explicitly defined semantics for request bodies.  In other cases where the HTTP spec is vague (such as GET, HEAD and DELETE), requestBody is permitted but does not have well-defined semantics and SHOULD be avoided if possible.\n\n\nresponses\nResponses Object\nThe list of possible responses as they are returned from executing this operation.\n\n\ncallbacks\nMap[string, Callback Object | Reference Object]\nA map of possible out-of band callbacks related to the parent operation. The key is a unique identifier for the Callback Object. Each value in the map is a Callback Object that describes a request that may be initiated by the API provider and the expected responses.\n\n\ndeprecated\nboolean\nDeclares this operation to be deprecated. Consumers SHOULD refrain from usage of the declared operation. Default value is false.\n\n\nsecurity\n[Security Requirement Object]\nA declaration of which security mechanisms can be used for this operation. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. To make security optional, an empty security requirement ({}) can be included in the array. This definition overrides any declared top-level security. To remove a top-level security declaration, an empty array can be used.\n\n\nservers\n[Server Object]\nAn alternative server array to service this operation. If an alternative server object is specified at the Path Item Object or Root level, it will be overridden by this value.\n\n\n\nThis object MAY be extended with Specification Extensions.\nOperation Object Example\n{\n  \"tags\": [\n    \"pet\"\n  ],\n  \"summary\": \"Updates a pet in the store with form data\",\n  \"operationId\": \"updatePetWithForm\",\n  \"parameters\": [\n    {\n      \"name\": \"petId\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet that needs to be updated\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  ],\n  \"requestBody\": {\n    \"content\": {\n      \"application/x-www-form-urlencoded\": {\n        \"schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"name\": { \n              \"description\": \"Updated name of the pet\",\n              \"type\": \"string\"\n            },\n            \"status\": {\n              \"description\": \"Updated status of the pet\",\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\"status\"] \n        }\n      }\n    }\n  },\n  \"responses\": {\n    \"200\": {\n      \"description\": \"Pet updated.\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    },\n    \"405\": {\n      \"description\": \"Method Not Allowed\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    }\n  },\n  \"security\": [\n    {\n      \"petstore_auth\": [\n        \"write:pets\",\n        \"read:pets\"\n      ]\n    }\n  ]\n}\n\ntags:\n- pet\nsummary: Updates a pet in the store with form data\noperationId: updatePetWithForm\nparameters:\n- name: petId\n  in: path\n  description: ID of pet that needs to be updated\n  required: true\n  schema:\n    type: string\nrequestBody:\n  content:\n    'application/x-www-form-urlencoded':\n      schema:\n       type: object\n       properties:\n          name: \n            description: Updated name of the pet\n            type: string\n          status:\n            description: Updated status of the pet\n            type: string\n       required:\n         - status\nresponses:\n  '200':\n    description: Pet updated.\n    content: \n      'application/json': {}\n      'application/xml': {}\n  '405':\n    description: Method Not Allowed\n    content: \n      'application/json': {}\n      'application/xml': {}\nsecurity:\n- petstore_auth:\n  - write:pets\n  - read:pets\n\nExternal Documentation Object\nAllows referencing an external resource for extended documentation.\nFixed Fields\n\n\n\nField Name\nType\nDescription\n\n\n\n\ndescription\nstring\nA description of the target documentation. CommonMark syntax MAY be used for rich text representation.\n\n\nurl\nstring\nREQUIRED. The URL for the target documentation. This MUST be in the form of a URL.\n\n\n\nThis object MAY be extended with Specification Extensions.\nExternal Documentation Object Example\n{\n  \"description\": \"Find more info here\",\n  \"url\": \"https://example.com\"\n}\n\ndescription: Find more info here\nurl: https://example.com\n\nParameter Object\nDescribes a single operation parameter.\nA unique parameter is defined by a combination of a name and location.\nParameter Locations\nThere are four possible parameter locations specified by the in field:\n* path - Used together with Path Templating, where the parameter value is actually part of the operation's URL. This does not include the host or base path of the API. For example, in /items/{itemId}, the path parameter is itemId.\n* query - Parameters that are appended to the URL. For example, in /items?id=###, the query parameter is id.\n* header - Custom headers that are expected as part of the request. Note that RFC7230 states header names are case insensitive.\n* cookie - Used to pass a specific cookie value to the API.\nFixed Fields\n\n\n\nField Name\nType\nDescription\n\n\n\n\nname\nstring\nREQUIRED. The name of the parameter. Parameter names are case sensitive. If in is \"path\", the name field MUST correspond to a template expression occurring within the path field in the Paths Object. See Path Templating for further information.If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.For all other cases, the name corresponds to the parameter name used by the in property.\n\n\nin\nstring\nREQUIRED. The location of the parameter. Possible values are \"query\", \"header\", \"path\" or \"cookie\".\n\n\ndescription\nstring\nA brief description of the parameter. This could contain examples of use. CommonMark syntax MAY be used for rich text representation.\n\n\nrequired\nboolean\nDetermines whether this parameter is mandatory. If the parameter location is \"path\", this property is REQUIRED and its value MUST be true. Otherwise, the property MAY be included and its default value is false.\n\n\n deprecated\nboolean\nSpecifies that a parameter is deprecated and SHOULD be transitioned out of usage. Default value is false.\n\n\n allowEmptyValue\nboolean\nSets the ability to pass empty-valued parameters. This is valid only for query parameters and allows sending a parameter with an empty value. Default value is false. If style is used, and if behavior is n/a (cannot be serialized), the value of allowEmptyValue SHALL be ignored. Use of this property is NOT RECOMMENDED, as it is likely to be removed in a later revision.\n\n\n\nThe rules for serialization of the parameter are specified in one of two ways.\nFor simpler scenarios, a schema and style can describe the structure and syntax of the parameter.\n\n\n\nField Name\nType\nDescription\n\n\n\n\nstyle\nstring\nDescribes how the parameter value will be serialized depending on the type of the parameter value. Default values (based on value of in): for query - form; for path - simple; for header - simple; for cookie - form.\n\n\nexplode\nboolean\nWhen this is true, parameter values of type array or object generate separate parameters for each value of the array or key-value pair of the map. For other types of parameters this property has no effect. When style is form, the default value is true. For all other styles, the default value is false.\n\n\nallowReserved\nboolean\nDetermines whether the parameter value SHOULD allow reserved characters, as defined by RFC3986 :/?#[]@!$&'()*+,;= to be included without percent-encoding. This property only applies to parameters with an in value of query. The default value is false.\n\n\nschema\nSchema Object\nThe schema defining the type used for the parameter.\n\n\nexample\nAny\nExample of the parameter's potential value. The example SHOULD match the specified schema and encoding properties if present. The example field is mutually exclusive of the examples field. Furthermore, if referencing a schema that contains an example, the example value SHALL override the example provided by the schema. To represent examples of media types that cannot naturally be represented in JSON or YAML, a string value can contain the example with escaping where necessary.\n\n\nexamples\nMap[ string, Example Object | Reference Object]\nExamples of the parameter's potential value. Each example SHOULD contain a value in the correct format as specified in the parameter encoding. The examples field is mutually exclusive of the example field. Furthermore, if referencing a schema that contains an example, the examples value SHALL override the example provided by the schema.\n\n\n\nFor more complex scenarios, the content property can define the media type and schema of the parameter.\nA parameter MUST contain either a schema property, or a content property, but not both.\nWhen example or examples are provided in conjunction with the schema object, the example MUST follow the prescribed serialization strategy for the parameter.\n\n\n\nField Name\nType\nDescription\n\n\n\n\ncontent\nMap[string, Media Type Object]\nA map containing the representations for the parameter. The key is the media type and the value describes it. The map MUST only contain one entry.\n\n\n\nStyle Values\nIn order to support common ways of serializing simple parameters, a set of style values are defined.\n\n\n\nstyle\ntype\nin\nComments\n\n\n\n\nmatrix\nprimitive, array, object\npath\nPath-style parameters defined by RFC6570\n\n\nlabel\nprimitive, array, object\npath\nLabel style parameters defined by RFC6570\n\n\nform\nprimitive, array, object\nquery, cookie\nForm style parameters defined by RFC6570. This option replaces collectionFormat with a csv (when explode is false) or multi (when explode is true) value from OpenAPI 2.0.\n\n\nsimple\narray\npath, header\nSimple style parameters defined by RFC6570.  This option replaces collectionFormat with a csv value from OpenAPI 2.0.\n\n\nspaceDelimited\narray, object\nquery\nSpace separated array or object values. This option replaces collectionFormat equal to ssv from OpenAPI 2.0.\n\n\npipeDelimited\narray, object\nquery\nPipe separated array or object values. This option replaces collectionFormat equal to pipes from OpenAPI 2.0.\n\n\ndeepObject\nobject\nquery\nProvides a simple way of rendering nested objects using form parameters.\n\n\n\nStyle Examples\nAssume a parameter named color has one of the following values:\n   string -> \"blue\"\n   array -> [\"blue\",\"black\",\"brown\"]\n   object -> { \"R\": 100, \"G\": 200, \"B\": 150 }\n\nThe following table shows examples of rendering differences for each value.\n\n\n\nstyle\nexplode\nempty\nstring\narray\nobject\n\n\n\n\nmatrix\nfalse\n;color\n;color=blue\n;color=blue,black,brown\n;color=R,100,G,200,B,150\n\n\nmatrix\ntrue\n;color\n;color=blue\n;color=blue;color=black;color=brown\n;R=100;G=200;B=150\n\n\nlabel\nfalse\n.\n.blue\n.blue.black.brown\n.R.100.G.200.B.150\n\n\nlabel\ntrue\n.\n.blue\n.blue.black.brown\n.R=100.G=200.B=150\n\n\nform\nfalse\ncolor=\ncolor=blue\ncolor=blue,black,brown\ncolor=R,100,G,200,B,150\n\n\nform\ntrue\ncolor=\ncolor=blue\ncolor=blue&color=black&color=brown\nR=100&G=200&B=150\n\n\nsimple\nfalse\nn/a\nblue\nblue,black,brown\nR,100,G,200,B,150\n\n\nsimple\ntrue\nn/a\nblue\nblue,black,brown\nR=100,G=200,B=150\n\n\nspaceDelimited\nfalse\nn/a\nn/a\nblue%20black%20brown\nR%20100%20G%20200%20B%20150\n\n\npipeDelimited\nfalse\nn/a\nn/a\nblue|black|brown\nR|100|G|200|B|150\n\n\ndeepObject\ntrue\nn/a\nn/a\nn/a\ncolor[R]=100&color[G]=200&color[B]=150\n\n\n\nThis object MAY be extended with Specification Extensions.\nParameter Object Examples\nA header parameter with an array of 64 bit integer numbers:\n{\n  \"name\": \"token\",\n  \"in\": \"header\",\n  \"description\": \"token to be passed as a header\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    }\n  },\n  \"style\": \"simple\"\n}\n\nname: token\nin: header\ndescription: token to be passed as a header\nrequired: true\nschema:\n  type: array\n  items:\n    type: integer\n    format: int64\nstyle: simple\n\nA path parameter of a string value:\n{\n  \"name\": \"username\",\n  \"in\": \"path\",\n  \"description\": \"username to fetch\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"string\"\n  }\n}\n\nname: username\nin: path\ndescription: username to fetch\nrequired: true\nschema:\n  type: string\n\nAn optional query parameter of a string value, allowing multiple values by repeating the query parameter:\n{\n  \"name\": \"id\",\n  \"in\": \"query\",\n  \"description\": \"ID of the object to fetch\",\n  \"required\": false,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    }\n  },\n  \"style\": \"form\",\n  \"explode\": true\n}\n\nname: id\nin: query\ndescription: ID of the object to fetch\nrequired: false\nschema:\n  type: array\n  items:\n    type: string\nstyle: form\nexplode: true\n\nA free-form query parameter, allowing undefined parameters of a specific type:\n{\n  \"in\": \"query\",\n  \"name\": \"freeForm\",\n  \"schema\": {\n    \"type\": \"object\",\n    \"additionalProperties\": {\n      \"type\": \"integer\"\n    },\n  },\n  \"style\": \"form\"\n}\n\nin: query\nname: freeForm\nschema:\n  type: object\n  additionalProperties:\n    type: integer\nstyle: form\n\nA complex parameter using content to define serialization:\n{\n  \"in\": \"query\",\n  \"name\": \"coordinates\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"lat\",\n          \"long\"\n        ],\n        \"properties\": {\n          \"lat\": {\n            \"type\": \"number\"\n          },\n          \"long\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n    }\n  }\n}\n\nin: query\nname: coordinates\ncontent:\n  application/json:\n    schema:\n      type: object\n      required:\n        - lat\n        - long\n      properties:\n        lat:\n          type: number\n        long:\n          type: number\n\nRequest Body Object\nDescribes a single request body.\nFixed Fields\n\n\n\nField Name\nType\nDescription\n\n\n\n\ndescription\nstring\nA brief description of the request body. This could contain examples of use.  CommonMark syntax MAY be used for rich text representation.\n\n\ncontent\nMap[string, Media Type Object]\nREQUIRED. The content of the request body. The key is a media type or media type range and the value describes it.  For requests that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*\n\n\nrequired\nboolean\nDetermines if the request body is required in the request. Defaults to false.\n\n\n\nThis object MAY be extended with Specification Extensions.\nRequest Body Examples\nA request body with a referenced model definition.\n{\n  \"description\": \"user to add to the system\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/User\"\n      },\n      \"examples\": {\n          \"user\" : {\n            \"summary\": \"User Example\", \n            \"externalValue\": \"https://foo.bar/examples/user-example.json\"\n          } \n        }\n    },\n    \"application/xml\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/User\"\n      },\n      \"examples\": {\n          \"user\" : {\n            \"summary\": \"User example in XML\",\n            \"externalValue\": \"https://foo.bar/examples/user-example.xml\"\n          }\n        }\n    },\n    \"text/plain\": {\n      \"examples\": {\n        \"user\" : {\n            \"summary\": \"User example in Plain text\",\n            \"externalValue\": \"https://foo.bar/examples/user-example.txt\" \n        }\n      } \n    },\n    \"*/*\": {\n      \"examples\": {\n        \"user\" : {\n            \"summary\": \"User example in other format\",\n            \"externalValue\": \"https://foo.bar/examples/user-example.whatever\"\n        }\n      }\n    }\n  }\n}\n\ndescription: user to add to the system\ncontent: \n  'application/json':\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: User Example\n        externalValue: 'https://foo.bar/examples/user-example.json'\n  'application/xml':\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: User example in XML\n        externalValue: 'https://foo.bar/examples/user-example.xml'\n  'text/plain':\n    examples:\n      user:\n        summary: User example in Plain text\n        externalValue: 'https://foo.bar/examples/user-example.txt'\n  '*/*':\n    examples:\n      user: \n        summary: User example in other format\n        externalValue: 'https://foo.bar/examples/user-example.whatever'\n\nA body parameter that is an array of string values:\n{\n  \"description\": \"user to add to the system\",\n  \"required\": true,\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}\n\ndescription: user to add to the system\nrequired: true\ncontent:\n  text/plain:\n    schema:\n      type: array\n      items:\n        type: string\n\nMedia Type Object\nEach Media Type Object provides schema and examples for the media type identified by its key.\nFixed Fields\n\n\n\nField Name\nType\nDescription\n\n\n\n\nschema\nSchema Object\nThe schema defining the content of the request, response, or parameter.\n\n\nexample\nAny\nExample of the media type.  The example object SHOULD be in the correct format as specified by the media type.  The example field is mutually exclusive of the examples field.  Furthermore, if referencing a schema which contains an example, the example value SHALL override the example provided by the schema.\n\n\nexamples\nMap[ string, Example Object | Reference Object]\nExamples of the media type.  Each example object SHOULD  match the media type and specified schema if present.  The examples field is mutually exclusive of the example field.  Furthermore, if referencing a schema which contains an example, the examples value SHALL override the example provided by the schema.\n\n\nencoding\nMap[string, Encoding Object]\nA map between a property name and its encoding information. The key, being the property name, MUST exist in the schema as a property. The encoding object SHALL only apply to requestBody objects when the media type is multipart or application/x-www-form-urlencoded.\n\n\n\nThis object MAY be extended with Specification Extensions.\nMedia Type Examples\n{\n  \"application/json\": {\n    \"schema\": {\n         \"$ref\": \"#/components/schemas/Pet\"\n    },\n    \"examples\": {\n      \"cat\" : {\n        \"summary\": \"An example of a cat\",\n        \"value\": \n          {\n            \"name\": \"Fluffy\",\n            \"petType\": \"Cat\",\n            \"color\": \"White\",\n            \"gender\": \"male\",\n            \"breed\": \"Persian\"\n          }\n      },\n      \"dog\": {\n        \"summary\": \"An example of a dog with a cat's name\",\n        \"value\" :  { \n          \"name\": \"Puma\",\n          \"petType\": \"Dog\",\n          \"color\": \"Black\",\n          \"gender\": \"Female\",\n          \"breed\": \"Mixed\"\n        },\n      \"frog\": {\n          \"$ref\": \"#/components/examples/frog-example\"\n        }\n      }\n    }\n  }\n}\n\napplication/json: \n  schema:\n    $ref: \"#/components/schemas/Pet\"\n  examples:\n    cat:\n      summary: An example of a cat\n      value:\n        name: Fluffy\n        petType: Cat\n        color: White\n        gender: male\n        breed: Persian\n    dog:\n      summary: An example of a dog with a cat's name\n      value:\n        name: Puma\n        petType: Dog\n        color: Black\n        gender: Female\n        breed: Mixed\n    frog:\n      $ref: \"#/components/examples/frog-example\"\n\nConsiderations for File Uploads\nIn contrast with the 2.0 specification, file input/output content in OpenAPI is described with the same semantics as any other schema type.\nIn contrast with the 3.0 specification, the format keyword has no effect on the content-encoding of the schema. JSON Schema offers a contentEncoding keyword, which may be used to specify the Content-Encoding for the schema. The contentEncoding keyword supports all encodings defined in RFC4648, including \"base64\" and \"base64url\", as well as \"quoted-printable\" from RFC2045. The encoding specified by the contentEncoding keyword is independent of an encoding specified by the Content-Type header in the request or response or metadata of a multipart body -- when both are present, the encoding specified in the contentEncoding is applied first and then the encoding specified in the Content-Type header.\nJSON Schema also offers a contentMediaType keyword.  However, when the media type is already specified by the Media Type Object's key, or by the contentType field of an Encoding Object, the contentMediaType keyword SHALL be ignored if present.\nExamples:\nContent transferred in binary (octet-stream) MAY omit schema:\n# a PNG image as a binary file:\ncontent:\n    image/png: {}\n\n# an arbitrary binary file:\ncontent:\n    application/octet-stream: {}\n\nBinary content transferred with base64 encoding:\ncontent:\n    image/png:\n        schema:\n            type: string\n            contentMediaType: image/png\n            contentEncoding: base64\n\nNote that the Content-Type remains image/png, describing the semantics of the payload.  The JSON Schema type and contentEncoding fields explain that the payload is transferred as text.  The JSON Schema contentMediaType is technically redundant, but can be used by JSON Schema tools that may not be aware of the OpenAPI context.\nThese examples apply to either input payloads of file uploads or response payloads.\nA requestBody for submitting a file in a POST operation may look like the following example:\nrequestBody:\n  content:\n    application/octet-stream: {}\n\nIn addition, specific media types MAY be specified:\n# multiple, specific media types may be specified:\nrequestBody:\n  content:\n    # a binary file of type png or jpeg\n    image/jpeg: {}\n    image/png: {}\n\nTo upload multiple files, a multipart media type MUST be used:\nrequestBody:\n  content:\n    multipart/form-data:\n      schema:\n        properties:\n          # The property name 'file' will be used for all files.\n          file:\n            type: array\n            items: {}\n\nAs seen in the section on multipart/form-data below, the empty schema for items indicates a media type of application/octet-stream.\nSupport for x-www-form-urlencoded Request Bodies\nTo submit content using form url encoding via RFC1866, the following\ndefinition may be used:\nrequestBody:\n  content:\n    application/x-www-form-urlencoded:\n      schema:\n        type: object\n        properties:\n          id:\n            type: string\n            format: uuid\n          address:\n            # complex types are stringified to support RFC 1866\n            type: object\n            properties: {}\n\nIn this example, the contents in the requestBody MUST be stringified per RFC1866 when passed to the server.  In addition, the address field complex object will be stringified.\nWhen passing complex objects in the application/x-www-form-urlencoded content type, the default serialization strategy of such properties is described in the Encoding Object's style property as form.\nSpecial Considerations for multipart Content\nIt is common to use multipart/form-data as a Content-Type when transferring request bodies to operations.  In contrast to 2.0, a schema is REQUIRED to define the input parameters to the operation when using multipart content.  This supports complex structures as well as supporting mechanisms for multiple file uploads.\nIn a multipart/form-data request body, each schema property, or each element of a schema array property, takes a section in the payload with an internal header as defined by RFC7578. The serialization strategy for each property of a multipart/form-data request body can be specified in an associated Encoding Object.\nWhen passing in multipart types, boundaries MAY be used to separate sections of the content being transferred \u2013 thus, the following default Content-Types are defined for multipart:\n\nIf the property is a primitive, or an array of primitive values, the default Content-Type is text/plain\nIf the property is complex, or an array of complex values, the default Content-Type is application/json\nIf the property is a type: string with a contentEncoding, the default Content-Type is application/octet-stream\n\nPer the JSON Schema specification, contentMediaType without contentEncoding present is treated as if contentEncoding: identity were present.  While useful for embedding text documents such as text/html into JSON strings, it is not useful for a multipart/form-data part, as it just causes the document to be treated as text/plain instead of its actual media type.  Use the Encoding Object without contentMediaType if no contentEncoding is required.\nExamples:\nrequestBody:\n  content:\n    multipart/form-data:\n      schema:\n        type: object\n        properties:\n          id:\n            type: string\n            format: uuid\n          address:\n            # default Content-Type for objects is `application/json`\n            type: object\n            properties: {}\n          profileImage:\n            # Content-Type for application-level encoded resource is `text/plain`\n            type: string\n            contentMediaType: image/png\n            contentEncoding: base64\n          children:\n            # default Content-Type for arrays is based on the _inner_ type (`text/plain` here)\n            type: array\n            items:\n              type: string\n          addresses:\n            # default Content-Type for arrays is based on the _inner_ type (object shown, so `application/json` in this example)\n            type: array\n            items:\n              type: object\n              $ref: '#/components/schemas/Address'\n\nAn encoding attribute is introduced to give you control over the serialization of parts of multipart request bodies.  This attribute is only applicable to multipart and application/x-www-form-urlencoded request bodies.\nEncoding Object\nA single encoding definition applied to a single schema property.\nFixed Fields\n\n\n\nField Name\nType\nDescription\n\n\n\n\ncontentType\nstring\nThe Content-Type for encoding a specific property. Default value depends on the property type: for object - application/json;  for array \u2013 the default is defined based on the inner type; for all other cases the default is application/octet-stream. The value can be a specific media type (e.g. application/json), a wildcard media type (e.g. image/*), or a comma-separated list of the two types.\n\n\nheaders\nMap[string, Header Object | Reference Object]\nA map allowing additional information to be provided as headers, for example Content-Disposition.  Content-Type is described separately and SHALL be ignored in this section. This property SHALL be ignored if the request body media type is not a multipart.\n\n\nstyle\nstring\nDescribes how a specific property value will be serialized depending on its type.  See Parameter Object for details on the style property. The behavior follows the same values as query parameters, including default values. This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data. If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored.\n\n\nexplode\nboolean\nWhen this is true, property values of type array or object generate separate parameters for each value of the array, or key-value-pair of the map.  For other types of properties this property has no effect. When style is form, the default value is true. For all other styles, the default value is false. This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data. If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored.\n\n\nallowReserved\nboolean\nDetermines whether the parameter value SHOULD allow reserved characters, as defined by RFC3986 :/?#[]@!$&'()*+,;= to be included without percent-encoding. The default value is false. This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data. If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored.\n\n\n\nThis object MAY be extended with Specification Extensions.\nEncoding Object Example\nrequestBody:\n  content:\n    multipart/form-data:\n      schema:\n        type: object\n        properties:\n          id:\n            # default is text/plain\n            type: string\n            format: uuid\n          address:\n            # default is application/json\n            type: object\n            properties: {}\n          historyMetadata:\n            # need to declare XML format!\n            description: metadata in XML format\n            type: object\n            properties: {}\n          profileImage: {}\n      encoding:\n        historyMetadata:\n          # require XML Content-Type in utf-8 encoding\n          contentType: application/xml; charset=utf-8\n        profileImage:\n          # only accept png/jpeg\n          contentType: image/png, image/jpeg\n          headers:\n            X-Rate-Limit-Limit:\n              description: The number of allowed requests in the current period\n              schema:\n                type: integer\n\nResponses Object\nA container for the expected responses of an operation.\nThe container maps a HTTP response code to the expected response.\nThe documentation is not necessarily expected to cover all possible HTTP response codes because they may not be known in advance.\nHowever, documentation is expected to cover a successful operation response and any known errors.\nThe default MAY be used as a default response object for all HTTP codes \nthat are not covered individually by the Responses Object.\nThe Responses Object MUST contain at least one response code, and if only one\nresponse code is provided it SHOULD be the response for a successful operation\ncall.\nFixed Fields\n\n\n\nField Name\nType\nDescription\n\n\n\n\ndefault\nResponse Object | Reference Object\nThe documentation of responses other than the ones declared for specific HTTP response codes. Use this field to cover undeclared responses.\n\n\n\nPatterned Fields\n\n\n\nField Pattern\nType\nDescription\n\n\n\n\nHTTP Status Code\nResponse Object | Reference Object\nAny HTTP status code can be used as the property name, but only one property per code, to describe the expected response for that HTTP status code. This field MUST be enclosed in quotation marks (for example, \"200\") for compatibility between JSON and YAML. To define a range of response codes, this field MAY contain the uppercase wildcard character X. For example, 2XX represents all response codes between [200-299]. Only the following range definitions are allowed: 1XX, 2XX, 3XX, 4XX, and 5XX. If a response is defined using an explicit code, the explicit code definition takes precedence over the range definition for that code.\n\n\n\nThis object MAY be extended with Specification Extensions.\nResponses Object Example\nA 200 response for a successful operation and a default response for others (implying an error):\n{\n  \"200\": {\n    \"description\": \"a pet to be returned\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Pet\"\n        }\n      }\n    }\n  },\n  \"default\": {\n    \"description\": \"Unexpected error\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/ErrorModel\"\n        }\n      }\n    }\n  }\n}\n\n'200':\n  description: a pet to be returned\n  content: \n    application/json:\n      schema:\n        $ref: '#/components/schemas/Pet'\ndefault:\n  description: Unexpected error\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/ErrorModel'\n\nResponse Object\nDescribes a single response from an API Operation, including design-time, static \nlinks to operations based on the response.\nFixed Fields\n\n\n\nField Name\nType\nDescription\n\n\n\n\ndescription\nstring\nREQUIRED. A description of the response. CommonMark syntax MAY be used for rich text representation.\n\n\nheaders\nMap[string, Header Object  | Reference Object]\nMaps a header name to its definition. RFC7230 states header names are case insensitive. If a response header is defined with the name \"Content-Type\", it SHALL be ignored.\n\n\ncontent\nMap[string, Media Type Object]\nA map containing descriptions of potential response payloads. The key is a media type or media type range and the value describes it.  For responses that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*\n\n\nlinks\nMap[string, Link Object | Reference Object]\nA map of operations links that can be followed from the response. The key of the map is a short name for the link, following the naming constraints of the names for Component Objects.\n\n\n\nThis object MAY be extended with Specification Extensions.\nResponse Object Examples\nResponse of an array of a complex type:\n{\n  \"description\": \"A complex object array response\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/VeryComplexType\"\n        }\n      }\n    }\n  }\n}\n\ndescription: A complex object array response\ncontent: \n  application/json:\n    schema: \n      type: array\n      items:\n        $ref: '#/components/schemas/VeryComplexType'\n\nResponse with a string type:\n{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n\n}\n\ndescription: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n\nPlain text response with headers:\n{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\",\n        \"example\": \"whoa!\"\n      }\n    }\n  },\n  \"headers\": {\n    \"X-Rate-Limit-Limit\": {\n      \"description\": \"The number of allowed requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Remaining\": {\n      \"description\": \"The number of remaining requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Reset\": {\n      \"description\": \"The number of seconds left in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    }\n  }\n}\n\ndescription: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n    example: 'whoa!'\nheaders:\n  X-Rate-Limit-Limit:\n    description: The number of allowed requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Remaining:\n    description: The number of remaining requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Reset:\n    description: The number of seconds left in the current period\n    schema:\n      type: integer\n\nResponse with no return value:\n{\n  \"description\": \"object created\"\n}\n\ndescription: object created\n\nCallback Object\nA map of possible out-of band callbacks related to the parent operation.\nEach value in the map is a Path Item Object that describes a set of requests that may be initiated by the API provider and the expected responses.\nThe key value used to identify the path item object is an expression, evaluated at runtime, that identifies a URL to use for the callback operation.\nTo describe incoming requests from the API provider independent from another API call, use the webhooks field.\nPatterned Fields\n\n\n\nField Pattern\nType\nDescription\n\n\n\n\n{expression}\nPath Item Object | Reference Object\nA Path Item Object, or a reference to one, used to define a callback request and expected responses.  A complete example is available.\n\n\n\nThis object MAY be extended with Specification Extensions.\nKey Expression\nThe key that identifies the Path Item Object is a runtime expression that can be evaluated in the context of a runtime HTTP request/response to identify the URL to be used for the callback request.\nA simple example might be $request.body#/url.\nHowever, using a runtime expression the complete HTTP message can be accessed.\nThis includes accessing any part of a body that a JSON Pointer RFC6901 can reference. \nFor example, given the following HTTP request:\nPOST /subscribe/myevent?queryUrl=https://clientdomain.com/stillrunning HTTP/1.1\nHost: example.org\nContent-Type: application/json\nContent-Length: 187\n\n{\n  \"failedUrl\" : \"https://clientdomain.com/failed\",\n  \"successUrls\" : [\n    \"https://clientdomain.com/fast\",\n    \"https://clientdomain.com/medium\",\n    \"https://clientdomain.com/slow\"\n  ] \n}\n\n201 Created\nLocation: https://example.org/subscription/1\n\nThe following examples show how the various expressions evaluate, assuming the callback operation has a path parameter named eventType and a query parameter named queryUrl.\n\n\n\nExpression\nValue\n\n\n\n\n$url\nhttps://example.org/subscribe/myevent?queryUrl=https://clientdomain.com/stillrunning\n\n\n$method\nPOST\n\n\n$request.path.eventType\nmyevent\n\n\n$request.query.queryUrl\nhttps://clientdomain.com/stillrunning\n\n\n$request.header.content-Type\napplication/json\n\n\n$request.body#/failedUrl\nhttps://clientdomain.com/failed\n\n\n$request.body#/successUrls/2\nhttps://clientdomain.com/medium\n\n\n$response.header.Location\nhttps://example.org/subscription/1\n\n\n\nCallback Object Examples\nThe following example uses the user provided queryUrl query string parameter to define the callback URL.  This is an example of how to use a callback object to describe a WebHook callback that goes with the subscription operation to enable registering for the WebHook.\nmyCallback:\n  '{$request.query.queryUrl}':\n    post:\n      requestBody:\n        description: Callback payload\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/SomePayload'\n      responses:\n        '200':\n          description: callback successfully processed\n\nThe following example shows a callback where the server is hard-coded, but the query string parameters are populated from the id and email property in the request body.\ntransactionCallback:\n  'http://notificationServer.com?transactionId={$request.body#/id}&email={$request.body#/email}':\n    post:\n      requestBody:\n        description: Callback payload\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/SomePayload'\n      responses:\n        '200':\n          description: callback successfully processed\n\nExample Object\nFixed Fields\n\n\n\nField Name\nType\nDescription\n\n\n\n\nsummary\nstring\nShort description for the example.\n\n\ndescription\nstring\nLong description for the example. CommonMark syntax MAY be used for rich text representation.\n\n\nvalue\nAny\nEmbedded literal example. The value field and externalValue field are mutually exclusive. To represent examples of media types that cannot naturally represented in JSON or YAML, use a string value to contain the example, escaping where necessary.\n\n\nexternalValue\nstring\nA URI that points to the literal example. This provides the capability to reference examples that cannot easily be included in JSON or YAML documents.  The value field and externalValue field are mutually exclusive. See the rules for resolving Relative References.\n\n\n\nThis object MAY be extended with Specification Extensions.\nIn all cases, the example value is expected to be compatible with the type schema \nof its associated value.  Tooling implementations MAY choose to \nvalidate compatibility automatically, and reject the example value(s) if incompatible.\nExample Object Examples\nIn a request body:\nrequestBody:\n  content:\n    'application/json':\n      schema:\n        $ref: '#/components/schemas/Address'\n      examples: \n        foo:\n          summary: A foo example\n          value: {\"foo\": \"bar\"}\n        bar:\n          summary: A bar example\n          value: {\"bar\": \"baz\"}\n    'application/xml':\n      examples: \n        xmlExample:\n          summary: This is an example in XML\n          externalValue: 'https://example.org/examples/address-example.xml'\n    'text/plain':\n      examples:\n        textExample: \n          summary: This is a text example\n          externalValue: 'https://foo.bar/examples/address-example.txt'\n\nIn a parameter:\nparameters:\n  - name: 'zipCode'\n    in: 'query'\n    schema:\n      type: 'string'\n      format: 'zip-code'\n    examples:\n      zip-example: \n        $ref: '#/components/examples/zip-example'\n\nIn a response:\nresponses:\n  '200':\n    description: your car appointment has been booked\n    content: \n      application/json:\n        schema:\n          $ref: '#/components/schemas/SuccessResponse'\n        examples:\n          confirmation-success:\n            $ref: '#/components/examples/confirmation-success'\n\nLink Object\nThe Link object represents a possible design-time link for a response.\nThe presence of a link does not guarantee the caller's ability to successfully invoke it, rather it provides a known relationship and traversal mechanism between responses and other operations.\nUnlike dynamic links (i.e. links provided in the response payload), the OAS linking mechanism does not require link information in the runtime response.\nFor computing links, and providing instructions to execute them, a runtime expression is used for accessing values in an operation and using them as parameters while invoking the linked operation.  \nFixed Fields\n\n\n\nField Name\nType\nDescription\n\n\n\n\noperationRef\nstring\nA relative or absolute URI reference to an OAS operation. This field is mutually exclusive of the operationId field, and MUST point to an Operation Object. Relative operationRef values MAY be used to locate an existing Operation Object in the OpenAPI definition. See the rules for resolving Relative References.\n\n\noperationId\nstring\nThe name of an existing, resolvable OAS operation, as defined with a unique operationId.  This field is mutually exclusive of the operationRef field.\n\n\nparameters\nMap[string, Any | {expression}]\nA map representing parameters to pass to an operation as specified with operationId or identified via operationRef. The key is the parameter name to be used, whereas the value can be a constant or an expression to be evaluated and passed to the linked operation.  The parameter name can be qualified using the parameter location [{in}.]{name} for operations that use the same parameter name in different locations (e.g. path.id).\n\n\nrequestBody\nAny | {expression}\nA literal value or {expression} to use as a request body when calling the target operation.\n\n\ndescription\nstring\nA description of the link. CommonMark syntax MAY be used for rich text representation.\n\n\nserver\nServer Object\nA server object to be used by the target operation.\n\n\n\nThis object MAY be extended with Specification Extensions.\nA linked operation MUST be identified using either an operationRef or operationId.\nIn the case of an operationId, it MUST be unique and resolved in the scope of the OAS document.\nBecause of the potential for name clashes, the operationRef syntax is preferred \nfor OpenAPI documents with external references.\nExamples\nComputing a link from a request operation where the $request.path.id is used to pass a request parameter to the linked operation.\npaths:\n  /users/{id}:\n    parameters:\n    - name: id\n      in: path\n      required: true\n      description: the user identifier, as userId \n      schema:\n        type: string\n    get:\n      responses:\n        '200':\n          description: the user being returned\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  uuid: # the unique user id\n                    type: string\n                    format: uuid\n          links:\n            address:\n              # the target link operationId\n              operationId: getUserAddress\n              parameters:\n                # get the `id` field from the request path parameter named `id`\n                userId: $request.path.id\n  # the path item of the linked operation\n  /users/{userid}/address:\n    parameters:\n    - name: userid\n      in: path\n      required: true\n      description: the user identifier, as userId \n      schema:\n        type: string\n    # linked operation\n    get:\n      operationId: getUserAddress\n      responses:\n        '200':\n          description: the user's address\n\nWhen a runtime expression fails to evaluate, no parameter value is passed to the target operation.\nValues from the response body can be used to drive a linked operation.\nlinks:\n  address:\n    operationId: getUserAddressByUUID\n    parameters:\n      # get the `uuid` field from the `uuid` field in the response body\n      userUuid: $response.body#/uuid\n\nClients follow all links at their discretion. \nNeither permissions, nor the capability to make a successful call to that link, is guaranteed \nsolely by the existence of a relationship.\nOperationRef Examples\nAs references to operationId MAY NOT be possible (the operationId is an optional \nfield in an Operation Object), references MAY also be made through a relative operationRef:\nlinks:\n  UserRepositories:\n    # returns array of '#/components/schemas/repository'\n    operationRef: '#/paths/~12.0~1repositories~1{username}/get'\n    parameters:\n      username: $response.body#/username\n\nor an absolute operationRef:\nlinks:\n  UserRepositories:\n    # returns array of '#/components/schemas/repository'\n    operationRef: 'https://na2.gigantic-server.com/#/paths/~12.0~1repositories~1{username}/get'\n    parameters:\n      username: $response.body#/username\n\nNote that in the use of operationRef, the escaped forward-slash is necessary when \nusing JSON references.\nRuntime Expressions\nRuntime expressions allow defining values based on information that will only be available within the HTTP message in an actual API call.\nThis mechanism is used by Link Objects and Callback Objects.\nThe runtime expression is defined by the following ABNF syntax\n      expression = ( \"$url\" / \"$method\" / \"$statusCode\" / \"$request.\" source / \"$response.\" source )\n      source = ( header-reference / query-reference / path-reference / body-reference )\n      header-reference = \"header.\" token\n      query-reference = \"query.\" name  \n      path-reference = \"path.\" name\n      body-reference = \"body\" [\"#\" json-pointer ]\n      json-pointer    = *( \"/\" reference-token )\n      reference-token = *( unescaped / escaped )\n      unescaped       = %x00-2E / %x30-7D / %x7F-10FFFF\n         ; %x2F ('/') and %x7E ('~') are excluded from 'unescaped'\n      escaped         = \"~\" ( \"0\" / \"1\" )\n        ; representing '~' and '/', respectively\n      name = *( CHAR )\n      token = 1*tchar\n      tchar = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\" / \"+\" / \"-\" / \".\" /\n        \"^\" / \"_\" / \"`\" / \"|\" / \"~\" / DIGIT / ALPHA\n\nHere, json-pointer is taken from RFC6901, char from RFC7159 and token from RFC7230.\nThe name identifier is case-sensitive, whereas token is not. \nThe table below provides examples of runtime expressions and examples of their use in a value:\nExamples\nSource Location | example expression  | notes\n---|:---|:---|\nHTTP Method            | $method         | The allowable values for the $method will be those for the HTTP operation.\nRequested media type | $request.header.accept        |\nRequest parameter      | $request.path.id        | Request parameters MUST be declared in the parameters section of the parent operation or they cannot be evaluated. This includes request headers.\nRequest body property   | $request.body#/user/uuid   | In operations which accept payloads, references may be made to portions of the requestBody or the entire body.\nRequest URL            | $url            |\nResponse value         | $response.body#/status       |  In operations which return payloads, references may be made to portions of the response body or the entire body.\nResponse header        | $response.header.Server |  Single header values only are available\nRuntime expressions preserve the type of the referenced value.\nExpressions can be embedded into string values by surrounding the expression with {} curly braces.\nHeader Object\nThe Header Object follows the structure of the Parameter Object with the following changes:\n\nname MUST NOT be specified, it is given in the corresponding headers map.\nin MUST NOT be specified, it is implicitly in header.\nAll traits that are affected by the location MUST be applicable to a location of header (for example, style).\n\nHeader Object Example\nA simple header of type integer:\n{\n  \"description\": \"The number of allowed requests in the current period\",\n  \"schema\": {\n    \"type\": \"integer\"\n  }\n}\n\ndescription: The number of allowed requests in the current period\nschema:\n  type: integer\n\nTag Object\nAdds metadata to a single tag that is used by the Operation Object.\nIt is not mandatory to have a Tag Object per tag defined in the Operation Object instances.\nFixed Fields\n\n\n\nField Name\nType\nDescription\n\n\n\n\nname\nstring\nREQUIRED. The name of the tag.\n\n\ndescription\nstring\nA description for the tag. CommonMark syntax MAY be used for rich text representation.\n\n\nexternalDocs\nExternal Documentation Object\nAdditional external documentation for this tag.\n\n\n\nThis object MAY be extended with Specification Extensions.\nTag Object Example\n{\n    \"name\": \"pet\",\n    \"description\": \"Pets operations\"\n}\n\nname: pet\ndescription: Pets operations\n\nReference Object\nA simple object to allow referencing other components in the OpenAPI document, internally and externally.\nThe $ref string value contains a URI RFC3986, which identifies the location of the value being referenced.\nSee the rules for resolving Relative References.\nFixed Fields\n\n\n\nField Name\nType\nDescription\n\n\n\n\n$ref\nstring\nREQUIRED. The reference identifier. This MUST be in the form of a URI.\n\n\nsummary\nstring\nA short summary which by default SHOULD override that of the referenced component. If the referenced object-type does not allow a summary field, then this field has no effect.\n\n\ndescription\nstring\nA description which by default SHOULD override that of the referenced component. CommonMark syntax MAY be used for rich text representation. If the referenced object-type does not allow a description field, then this field has no effect.\n\n\n\nThis object cannot be extended with additional properties and any properties added SHALL be ignored.\nNote that this restriction on additional properties is a difference between Reference Objects and Schema Objects that contain a $ref keyword.\nReference Object Example\n{\n    \"$ref\": \"#/components/schemas/Pet\"\n}\n\n$ref: '#/components/schemas/Pet'\n\nRelative Schema Document Example\n{\n  \"$ref\": \"Pet.json\"\n}\n\n$ref: Pet.yaml\n\nRelative Documents With Embedded Schema Example\n{\n  \"$ref\": \"definitions.json#/Pet\"\n}\n\n$ref: definitions.yaml#/Pet\n\nSchema Object\nThe Schema Object allows the definition of input and output data types.\nThese types can be objects, but also primitives and arrays. This object is a superset of the JSON Schema Specification Draft 2020-12.\nFor more information about the properties, see JSON Schema Core and JSON Schema Validation.\nUnless stated otherwise, the property definitions follow those of JSON Schema and do not add any additional semantics.\nWhere JSON Schema indicates that behavior is defined by the application (e.g. for annotations), OAS also defers the definition of semantics to the application consuming the OpenAPI document.\nProperties\nThe OpenAPI Schema Object dialect is defined as requiring the OAS base vocabulary, in addition to the vocabularies as specified in the JSON Schema draft 2020-12 general purpose meta-schema.\nThe OpenAPI Schema Object dialect for this version of the specification is identified by the URI https://spec.openapis.org/oas/3.1/dialect/base (the \"OAS dialect schema id\").\nThe following properties are taken from the JSON Schema specification but their definitions have been extended by the OAS:\n\ndescription - CommonMark syntax MAY be used for rich text representation.\nformat - See Data Type Formats for further details. While relying on JSON Schema's defined formats, the OAS offers a few additional predefined formats.\n\nIn addition to the JSON Schema properties comprising the OAS dialect, the Schema Object supports keywords from any other vocabularies, or entirely arbitrary properties.\nThe OpenAPI Specification's base vocabulary is comprised of the following keywords:\nFixed Fields\n\n\n\nField Name\nType\nDescription\n\n\n\n\ndiscriminator\nDiscriminator Object\nAdds support for polymorphism. The discriminator is an object name that is used to differentiate between other schemas which may satisfy the payload description. See Composition and Inheritance for more details.\n\n\nxml\nXML Object\nThis MAY be used only on properties schemas. It has no effect on root schemas. Adds additional metadata to describe the XML representation of this property.\n\n\nexternalDocs\nExternal Documentation Object\nAdditional external documentation for this schema.\n\n\nexample\nAny\nA free-form property to include an example of an instance for this schema. To represent examples that cannot be naturally represented in JSON or YAML, a string value can be used to contain the example with escaping where necessary.Deprecated: The example property has been deprecated in favor of the JSON Schema examples keyword. Use of example is discouraged, and later versions of this specification may remove it.\n\n\n\nThis object MAY be extended with Specification Extensions, though as noted, additional properties MAY omit the x- prefix within this object.\nComposition and Inheritance (Polymorphism)\nThe OpenAPI Specification allows combining and extending model definitions using the allOf property of JSON Schema, in effect offering model composition.\nallOf takes an array of object definitions that are validated independently but together compose a single object.\nWhile composition offers model extensibility, it does not imply a hierarchy between the models.\nTo support polymorphism, the OpenAPI Specification adds the discriminator field.\nWhen used, the discriminator will be the name of the property that decides which schema definition validates the structure of the model.\nAs such, the discriminator field MUST be a required field.\nThere are two ways to define the value of a discriminator for an inheriting instance.\n- Use the schema name.\n- Override the schema name by overriding the property with a new value. If a new value exists, this takes precedence over the schema name.\nAs such, inline schema definitions, which do not have a given id, cannot be used in polymorphism.\nXML Modeling\nThe xml property allows extra definitions when translating the JSON definition to XML.\nThe XML Object contains additional information about the available options.\nSpecifying Schema Dialects\nIt is important for tooling to be able to determine which dialect or meta-schema any given resource wishes to be processed with: JSON Schema Core, JSON Schema Validation, OpenAPI Schema dialect, or some custom meta-schema.\nThe $schema keyword MAY be present in any root Schema Object, and if present MUST be used to determine which dialect should be used when processing the schema. This allows use of Schema Objects which comply with other drafts of JSON Schema than the default Draft 2020-12 support. Tooling MUST support the OAS dialect schema id, and MAY support additional values of $schema.\nTo allow use of a different default $schema value for all Schema Objects contained within an OAS document, a jsonSchemaDialect value may be set within the OpenAPI Object. If this default is not set, then the OAS dialect schema id MUST be used for these Schema Objects. The value of $schema within a Schema Object always overrides any default.\nWhen a Schema Object is referenced from an external resource which is not an OAS document (e.g. a bare JSON Schema resource), then the value of the $schema keyword for schemas within that resource MUST follow JSON Schema rules.\nSchema Object Examples\nPrimitive Sample\n{\n  \"type\": \"string\",\n  \"format\": \"email\"\n}\n\ntype: string\nformat: email\n\nSimple Model\n{\n  \"type\": \"object\",\n  \"required\": [\n    \"name\"\n  ],\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"address\": {\n      \"$ref\": \"#/components/schemas/Address\"\n    },\n    \"age\": {\n      \"type\": \"integer\",\n      \"format\": \"int32\",\n      \"minimum\": 0\n    }\n  }\n}\n\ntype: object\nrequired:\n- name\nproperties:\n  name:\n    type: string\n  address:\n    $ref: '#/components/schemas/Address'\n  age:\n    type: integer\n    format: int32\n    minimum: 0\n\nModel with Map/Dictionary Properties\nFor a simple string to string mapping:\n{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"type\": \"string\"\n  }\n}\n\ntype: object\nadditionalProperties:\n  type: string\n\nFor a string to model mapping:\n{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"$ref\": \"#/components/schemas/ComplexModel\"\n  }\n}\n\ntype: object\nadditionalProperties:\n  $ref: '#/components/schemas/ComplexModel'\n\nModel with Example\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"name\"\n  ],\n  \"example\": {\n    \"name\": \"Puma\",\n    \"id\": 1\n  }\n}\n\ntype: object\nproperties:\n  id:\n    type: integer\n    format: int64\n  name:\n    type: string\nrequired:\n- name\nexample:\n  name: Puma\n  id: 1\n\nModels with Composition\n{\n  \"components\": {\n    \"schemas\": {\n      \"ErrorModel\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"message\",\n          \"code\"\n        ],\n        \"properties\": {\n          \"message\": {\n            \"type\": \"string\"\n          },\n          \"code\": {\n            \"type\": \"integer\",\n            \"minimum\": 100,\n            \"maximum\": 600\n          }\n        }\n      },\n      \"ExtendedErrorModel\": {\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/ErrorModel\"\n          },\n          {\n            \"type\": \"object\",\n            \"required\": [\n              \"rootCause\"\n            ],\n            \"properties\": {\n              \"rootCause\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n\ncomponents:\n  schemas:\n    ErrorModel:\n      type: object\n      required:\n      - message\n      - code\n      properties:\n        message:\n          type: string\n        code:\n          type: integer\n          minimum: 100\n          maximum: 600\n    ExtendedErrorModel:\n      allOf:\n      - $ref: '#/components/schemas/ErrorModel'\n      - type: object\n        required:\n        - rootCause\n        properties:\n          rootCause:\n            type: string\n\nModels with Polymorphism Support\n{\n  \"components\": {\n    \"schemas\": {\n      \"Pet\": {\n        \"type\": \"object\",\n        \"discriminator\": {\n          \"propertyName\": \"petType\"\n        },\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"petType\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"name\",\n          \"petType\"\n        ]\n      },\n      \"Cat\": {\n        \"description\": \"A representation of a cat. Note that `Cat` will be used as the discriminator value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"huntingSkill\": {\n                \"type\": \"string\",\n                \"description\": \"The measured skill for hunting\",\n                \"default\": \"lazy\",\n                \"enum\": [\n                  \"clueless\",\n                  \"lazy\",\n                  \"adventurous\",\n                  \"aggressive\"\n                ]\n              }\n            },\n            \"required\": [\n              \"huntingSkill\"\n            ]\n          }\n        ]\n      },\n      \"Dog\": {\n        \"description\": \"A representation of a dog. Note that `Dog` will be used as the discriminator value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"packSize\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\",\n                \"description\": \"the size of the pack the dog is from\",\n                \"default\": 0,\n                \"minimum\": 0\n              }\n            },\n            \"required\": [\n              \"packSize\"\n            ]\n          }\n        ]\n      }\n    }\n  }\n}\n\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      discriminator:\n        propertyName: petType\n      properties:\n        name:\n          type: string\n        petType:\n          type: string\n      required:\n      - name\n      - petType\n    Cat:  ## \"Cat\" will be used as the discriminator value\n      description: A representation of a cat\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          huntingSkill:\n            type: string\n            description: The measured skill for hunting\n            enum:\n            - clueless\n            - lazy\n            - adventurous\n            - aggressive\n        required:\n        - huntingSkill\n    Dog:  ## \"Dog\" will be used as the discriminator value\n      description: A representation of a dog\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          packSize:\n            type: integer\n            format: int32\n            description: the size of the pack the dog is from\n            default: 0\n            minimum: 0\n        required:\n        - packSize\n\nDiscriminator Object\nWhen request bodies or response payloads may be one of a number of different schemas, a discriminator object can be used to aid in serialization, deserialization, and validation.  The discriminator is a specific object in a schema which is used to inform the consumer of the document of an alternative schema based on the value associated with it.\nWhen using the discriminator, inline schemas will not be considered.\nFixed Fields\n\n\n\nField Name\nType\nDescription\n\n\n\n\npropertyName\nstring\nREQUIRED. The name of the property in the payload that will hold the discriminator value.\n\n\n mapping\nMap[string, string]\nAn object to hold mappings between payload values and schema names or references.\n\n\n\nThis object MAY be extended with Specification Extensions.\nThe discriminator object is legal only when using one of the composite keywords oneOf, anyOf, allOf.\nIn OAS 3.0, a response payload MAY be described to be exactly one of any number of types:\nMyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n\nwhich means the payload MUST, by validation, match exactly one of the schemas described by Cat, Dog, or Lizard.  In this case, a discriminator MAY act as a \"hint\" to shortcut validation and selection of the matching schema which may be a costly operation, depending on the complexity of the schema. We can then describe exactly which field tells us which schema to use:\nMyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n  discriminator:\n    propertyName: petType\n\nThe expectation now is that a property with name petType MUST be present in the response payload, and the value will correspond to the name of a schema defined in the OAS document.  Thus the response payload:\n{\n  \"id\": 12345,\n  \"petType\": \"Cat\"\n}\n\nWill indicate that the Cat schema be used in conjunction with this payload.\nIn scenarios where the value of the discriminator field does not match the schema name or implicit mapping is not possible, an optional mapping definition MAY be used:\nMyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n  - $ref: 'https://gigantic-server.com/schemas/Monster/schema.json'\n  discriminator:\n    propertyName: petType\n    mapping:\n      dog: '#/components/schemas/Dog'\n      monster: 'https://gigantic-server.com/schemas/Monster/schema.json'\n\nHere the discriminator value of dog will map to the schema #/components/schemas/Dog, rather than the default (implicit) value of Dog.  If the discriminator value does not match an implicit or explicit mapping, no schema can be determined and validation SHOULD fail. Mapping keys MUST be string values, but tooling MAY convert response values to strings for comparison.\nWhen used in conjunction with the anyOf construct, the use of the discriminator can avoid ambiguity where multiple schemas may satisfy a single payload.\nIn both the oneOf and anyOf use cases, all possible schemas MUST be listed explicitly.  To avoid redundancy, the discriminator MAY be added to a parent schema definition, and all schemas comprising the parent schema in an allOf construct may be used as an alternate schema.\nFor example:\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      required:\n      - petType\n      properties:\n        petType:\n          type: string\n      discriminator:\n        propertyName: petType\n        mapping:\n          dog: Dog\n    Cat:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        # all other properties specific to a `Cat`\n        properties:\n          name:\n            type: string\n    Dog:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        # all other properties specific to a `Dog`\n        properties:\n          bark:\n            type: string\n    Lizard:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        # all other properties specific to a `Lizard`\n        properties:\n          lovesRocks:\n            type: boolean\n\na payload like this:\n{\n  \"petType\": \"Cat\",\n  \"name\": \"misty\"\n}\n\nwill indicate that the Cat schema be used.  Likewise this schema:\n{\n  \"petType\": \"dog\",\n  \"bark\": \"soft\"\n}\n\nwill map to Dog because of the definition in the mapping element.\nXML Object\nA metadata object that allows for more fine-tuned XML model definitions.\nWhen using arrays, XML element names are not inferred (for singular/plural forms) and the name property SHOULD be used to add that information.\nSee examples for expected behavior.\nFixed Fields\n\n\n\nField Name\nType\nDescription\n\n\n\n\nname\nstring\nReplaces the name of the element/attribute used for the described schema property. When defined within items, it will affect the name of the individual XML elements within the list. When defined alongside type being array (outside the items), it will affect the wrapping element and only if wrapped is true. If wrapped is false, it will be ignored.\n\n\nnamespace\nstring\nThe URI of the namespace definition. This MUST be in the form of an absolute URI.\n\n\nprefix\nstring\nThe prefix to be used for the name.\n\n\nattribute\nboolean\nDeclares whether the property definition translates to an attribute instead of an element. Default value is false.\n\n\nwrapped\nboolean\nMAY be used only for an array definition. Signifies whether the array is wrapped (for example, <books><book/><book/></books>) or unwrapped (<book/><book/>). Default value is false. The definition takes effect only when defined alongside type being array (outside the items).\n\n\n\nThis object MAY be extended with Specification Extensions.\nXML Object Examples\nThe examples of the XML object definitions are included inside a property definition of a Schema Object with a sample of the XML representation of it.\nNo XML Element\nBasic string property:\n{\n    \"animals\": {\n        \"type\": \"string\"\n    }\n}\n\nanimals:\n  type: string\n\n<animals>...</animals>\n\nBasic string array property (wrapped is false by default):\n{\n    \"animals\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\nanimals:\n  type: array\n  items:\n    type: string\n\n<animals>...</animals>\n<animals>...</animals>\n<animals>...</animals>\n\nXML Name Replacement\n{\n  \"animals\": {\n    \"type\": \"string\",\n    \"xml\": {\n      \"name\": \"animal\"\n    }\n  }\n}\n\nanimals:\n  type: string\n  xml:\n    name: animal\n\n<animal>...</animal>\n\nXML Attribute, Prefix and Namespace\nIn this example, a full model definition is shown.\n{\n  \"Person\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\",\n        \"xml\": {\n          \"attribute\": true\n        }\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"xml\": {\n          \"namespace\": \"https://example.com/schema/sample\",\n          \"prefix\": \"sample\"\n        }\n      }\n    }\n  }\n}\n\nPerson:\n  type: object\n  properties:\n    id:\n      type: integer\n      format: int32\n      xml:\n        attribute: true\n    name:\n      type: string\n      xml:\n        namespace: https://example.com/schema/sample\n        prefix: sample\n\n<Person id=\"123\">\n    <sample:name xmlns:sample=\"https://example.com/schema/sample\">example</sample:name>\n</Person>\n\nXML Arrays\nChanging the element names:\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    }\n  }\n}\n\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n\n<animal>value</animal>\n<animal>value</animal>\n\nThe external name property has no effect on the XML:\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"aliens\"\n    }\n  }\n}\n\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    name: aliens\n\n<animal>value</animal>\n<animal>value</animal>\n\nEven when the array is wrapped, if a name is not explicitly defined, the same name will be used both internally and externally:\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"xml\": {\n      \"wrapped\": true\n    }\n  }\n}\n\nanimals:\n  type: array\n  items:\n    type: string\n  xml:\n    wrapped: true\n\n<animals>\n  <animals>value</animals>\n  <animals>value</animals>\n</animals>\n\nTo overcome the naming problem in the example above, the following definition can be used:\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"wrapped\": true\n    }\n  }\n}\n\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    wrapped: true\n\n<animals>\n  <animal>value</animal>\n  <animal>value</animal>\n</animals>\n\nAffecting both internal and external names:\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"aliens\",\n      \"wrapped\": true\n    }\n  }\n}\n\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    name: aliens\n    wrapped: true\n\n<aliens>\n  <animal>value</animal>\n  <animal>value</animal>\n</aliens>\n\nIf we change the external element but not the internal ones:\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"xml\": {\n      \"name\": \"aliens\",\n      \"wrapped\": true\n    }\n  }\n}\n\nanimals:\n  type: array\n  items:\n    type: string\n  xml:\n    name: aliens\n    wrapped: true\n\n<aliens>\n  <aliens>value</aliens>\n  <aliens>value</aliens>\n</aliens>\n\nSecurity Scheme Object\nDefines a security scheme that can be used by the operations.\nSupported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter), mutual TLS (use of a client certificate), OAuth2's common flows (implicit, password, client credentials and authorization code) as defined in RFC6749, and OpenID Connect Discovery.\nPlease note that as of 2020, the implicit flow is about to be deprecated by OAuth 2.0 Security Best Current Practice. Recommended for most use case is Authorization Code Grant flow with PKCE.\nFixed Fields\n\n\n\nField Name\nType\nApplies To\nDescription\n\n\n\n\ntype\nstring\nAny\nREQUIRED. The type of the security scheme. Valid values are \"apiKey\", \"http\", \"mutualTLS\", \"oauth2\", \"openIdConnect\".\n\n\ndescription\nstring\nAny\nA description for security scheme. CommonMark syntax MAY be used for rich text representation.\n\n\nname\nstring\napiKey\nREQUIRED. The name of the header, query or cookie parameter to be used.\n\n\nin\nstring\napiKey\nREQUIRED. The location of the API key. Valid values are \"query\", \"header\" or \"cookie\".\n\n\nscheme\nstring\nhttp\nREQUIRED. The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235.  The values used SHOULD be registered in the IANA Authentication Scheme registry.\n\n\nbearerFormat\nstring\nhttp (\"bearer\")\nA hint to the client to identify how the bearer token is formatted.  Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.\n\n\nflows\nOAuth Flows Object\noauth2\nREQUIRED. An object containing configuration information for the flow types supported.\n\n\nopenIdConnectUrl\nstring\nopenIdConnect\nREQUIRED. OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL. The OpenID Connect standard requires the use of TLS.\n\n\n\nThis object MAY be extended with Specification Extensions.\nSecurity Scheme Object Example\nBasic Authentication Sample\n{\n  \"type\": \"http\",\n  \"scheme\": \"basic\"\n}\n\ntype: http\nscheme: basic\n\nAPI Key Sample\n{\n  \"type\": \"apiKey\",\n  \"name\": \"api_key\",\n  \"in\": \"header\"\n}\n\ntype: apiKey\nname: api_key\nin: header\n\nJWT Bearer Sample\n{\n  \"type\": \"http\",\n  \"scheme\": \"bearer\",\n  \"bearerFormat\": \"JWT\",\n}\n\ntype: http\nscheme: bearer\nbearerFormat: JWT\n\nImplicit OAuth2 Sample\n{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\n\ntype: oauth2\nflows: \n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n\nOAuth Flows Object\nAllows configuration of the supported OAuth Flows.\nFixed Fields\n\n\n\nField Name\nType\nDescription\n\n\n\n\nimplicit\nOAuth Flow Object\nConfiguration for the OAuth Implicit flow\n\n\npassword\nOAuth Flow Object\nConfiguration for the OAuth Resource Owner Password flow\n\n\nclientCredentials\nOAuth Flow Object\nConfiguration for the OAuth Client Credentials flow.  Previously called application in OpenAPI 2.0.\n\n\nauthorizationCode\nOAuth Flow Object\nConfiguration for the OAuth Authorization Code flow.  Previously called accessCode in OpenAPI 2.0.\n\n\n\nThis object MAY be extended with Specification Extensions.\nOAuth Flow Object\nConfiguration details for a supported OAuth Flow\nFixed Fields\n\n\n\nField Name\nType\nApplies To\nDescription\n\n\n\n\nauthorizationUrl\nstring\noauth2 (\"implicit\", \"authorizationCode\")\nREQUIRED. The authorization URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.\n\n\ntokenUrl\nstring\noauth2 (\"password\", \"clientCredentials\", \"authorizationCode\")\nREQUIRED. The token URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.\n\n\nrefreshUrl\nstring\noauth2\nThe URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.\n\n\nscopes\nMap[string, string]\noauth2\nREQUIRED. The available scopes for the OAuth2 security scheme. A map between the scope name and a short description for it. The map MAY be empty.\n\n\n\nThis object MAY be extended with Specification Extensions.\nOAuth Flow Object Examples\n{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    },\n    \"authorizationCode\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"tokenUrl\": \"https://example.com/api/oauth/token\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\n\ntype: oauth2\nflows: \n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n  authorizationCode:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    tokenUrl: https://example.com/api/oauth/token\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets \n\nSecurity Requirement Object\nLists the required security schemes to execute this operation.\nThe name used for each property MUST correspond to a security scheme declared in the Security Schemes under the Components Object.\nSecurity Requirement Objects that contain multiple schemes require that all schemes MUST be satisfied for a request to be authorized.\nThis enables support for scenarios where multiple query parameters or HTTP headers are required to convey security information.\nWhen a list of Security Requirement Objects is defined on the OpenAPI Object or Operation Object, only one of the Security Requirement Objects in the list needs to be satisfied to authorize the request.\nPatterned Fields\n\n\n\nField Pattern\nType\nDescription\n\n\n\n\n{name}\n[string]\nEach name MUST correspond to a security scheme which is declared in the Security Schemes under the Components Object. If the security scheme is of type \"oauth2\" or \"openIdConnect\", then the value is a list of scope names required for the execution, and the list MAY be empty if authorization does not require a specified scope. For other security scheme types, the array MAY contain a list of role names which are required for the execution, but are not otherwise defined or exchanged in-band.\n\n\n\nSecurity Requirement Object Examples\nNon-OAuth2 Security Requirement\n{\n  \"api_key\": []\n}\n\napi_key: []\n\nOAuth2 Security Requirement\n{\n  \"petstore_auth\": [\n    \"write:pets\",\n    \"read:pets\"\n  ]\n}\n\npetstore_auth:\n- write:pets\n- read:pets\n\nOptional OAuth2 Security\nOptional OAuth2 security as would be defined in an OpenAPI Object or an Operation Object:\n{\n  \"security\": [\n    {},\n    {\n      \"petstore_auth\": [\n        \"write:pets\",\n        \"read:pets\"\n      ]\n    }\n  ]\n}\n\nsecurity:\n  - {}\n  - petstore_auth:\n    - write:pets\n    - read:pets\n\nSpecification Extensions\nWhile the OpenAPI Specification tries to accommodate most use cases, additional data can be added to extend the specification at certain points.\nThe extensions properties are implemented as patterned fields that are always prefixed by \"x-\".\n\n\n\nField Pattern\nType\nDescription\n\n\n\n\n^x-\nAny\nAllows extensions to the OpenAPI Schema. The field name MUST begin with x-, for example, x-internal-id. Field names beginning x-oai- and x-oas- are reserved for uses defined by the OpenAPI Initiative. The value can be null, a primitive, an array or an object.\n\n\n\nThe extensions may or may not be supported by the available tooling, but those may be extended as well to add requested support (if tools are internal or open-sourced).\nSecurity Filtering\nSome objects in the OpenAPI Specification MAY be declared and remain empty, or be completely removed, even though they are inherently the core of the API documentation. \nThe reasoning is to allow an additional layer of access control over the documentation.\nWhile not part of the specification itself, certain libraries MAY choose to allow access to parts of the documentation based on some form of authentication/authorization.\nTwo examples of this:\n\nThe Paths Object MAY be present but empty. It may be counterintuitive, but this may tell the viewer that they got to the right place, but can't access any documentation. They would still have access to at least the Info Object which may contain additional information regarding authentication.\nThe Path Item Object MAY be empty. In this case, the viewer will be aware that the path exists, but will not be able to see any of its operations or parameters. This is different from hiding the path itself from the Paths Object, because the user will be aware of its existence. This allows the documentation provider to finely control what the viewer can see.\n\nAppendix A: Revision History\n\n\n\nVersion\nDate\nNotes\n\n\n\n\n3.1.0\n2021-02-15\nRelease of the OpenAPI Specification 3.1.0\n\n\n3.1.0-rc1\n2020-10-08\nrc1 of the 3.1 specification\n\n\n3.1.0-rc0\n2020-06-18\nrc0 of the 3.1 specification\n\n\n3.0.3\n2020-02-20\nPatch release of the OpenAPI Specification 3.0.3\n\n\n3.0.2\n2018-10-08\nPatch release of the OpenAPI Specification 3.0.2\n\n\n3.0.1\n2017-12-06\nPatch release of the OpenAPI Specification 3.0.1\n\n\n3.0.0\n2017-07-26\nRelease of the OpenAPI Specification 3.0.0\n\n\n3.0.0-rc2\n2017-06-16\nrc2 of the 3.0 specification\n\n\n3.0.0-rc1\n2017-04-27\nrc1 of the 3.0 specification\n\n\n3.0.0-rc0\n2017-02-28\nImplementer's Draft of the 3.0 specification\n\n\n2.0\n2015-12-31\nDonation of Swagger 2.0 to the OpenAPI Initiative\n\n\n2.0\n2014-09-08\nRelease of Swagger 2.0\n\n\n1.2\n2014-03-14\nInitial release of the formal document.\n\n\n1.1\n2012-08-22\nRelease of Swagger 1.1\n\n\n1.0\n2011-08-10\nFirst release of the Swagger Specification\n\n\n",
        "html": "<h1 id=\"openapi-specification\">OpenAPI Specification</h1>\n<h4 id=\"version-310\">Version 3.1.0</h4>\n<p>The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in <a href=\"https://tools.ietf.org/html/bcp14\">BCP 14</a> <a href=\"https://tools.ietf.org/html/rfc2119\">RFC2119</a> <a href=\"https://tools.ietf.org/html/rfc8174\">RFC8174</a> when, and only when, they appear in all capitals, as shown here.</p>\n<p>This document is licensed under <a href=\"https://www.apache.org/licenses/LICENSE-2.0.html\">The Apache License, Version 2.0</a>.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<p>The OpenAPI Specification (OAS) defines a standard, language-agnostic interface to HTTP APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, a consumer can understand and interact with the remote service with a minimal amount of implementation logic.</p>\n<p>An OpenAPI definition can then be used by documentation generation tools to display the API, code generation tools to generate servers and clients in various programming languages, testing tools, and many other use cases.</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<!-- TOC depthFrom:1 depthTo:3 withLinks:1 updateOnSave:1 orderedList:0 -->\n<ul>\n<li><a href=\"#definitions\">Definitions</a><ul>\n<li><a href=\"#oasDocument\">OpenAPI Document</a></li>\n<li><a href=\"#pathTemplating\">Path Templating</a></li>\n<li><a href=\"#mediaTypes\">Media Types</a></li>\n<li><a href=\"#httpCodes\">HTTP Status Codes</a></li>\n</ul>\n</li>\n<li><a href=\"#specification\">Specification</a><ul>\n<li><a href=\"#versions\">Versions</a></li>\n<li><a href=\"#format\">Format</a></li>\n<li><a href=\"#documentStructure\">Document Structure</a></li>\n<li><a href=\"#dataTypes\">Data Types</a></li>\n<li><a href=\"#richText\">Rich Text Formatting</a></li>\n<li><a href=\"#relativeReferencesURI\">Relative References In URIs</a></li>\n<li><a href=\"#relativeReferencesURL\">Relative References In URLs</a></li>\n<li><a href=\"#schema\">Schema</a><ul>\n<li><a href=\"#oasObject\">OpenAPI Object</a></li>\n<li><a href=\"#infoObject\">Info Object</a></li>\n<li><a href=\"#contactObject\">Contact Object</a></li>\n<li><a href=\"#licenseObject\">License Object</a></li>\n<li><a href=\"#serverObject\">Server Object</a></li>\n<li><a href=\"#serverVariableObject\">Server Variable Object</a></li>\n<li><a href=\"#componentsObject\">Components Object</a></li>\n<li><a href=\"#pathsObject\">Paths Object</a></li>\n<li><a href=\"#pathItemObject\">Path Item Object</a></li>\n<li><a href=\"#operationObject\">Operation Object</a></li>\n<li><a href=\"#externalDocumentationObject\">External Documentation Object</a></li>\n<li><a href=\"#parameterObject\">Parameter Object</a></li>\n<li><a href=\"#requestBodyObject\">Request Body Object</a></li>\n<li><a href=\"#mediaTypeObject\">Media Type Object</a></li>\n<li><a href=\"#encodingObject\">Encoding Object</a></li>\n<li><a href=\"#responsesObject\">Responses Object</a></li>\n<li><a href=\"#responseObject\">Response Object</a></li>\n<li><a href=\"#callbackObject\">Callback Object</a></li>\n<li><a href=\"#exampleObject\">Example Object</a></li>\n<li><a href=\"#linkObject\">Link Object</a></li>\n<li><a href=\"#headerObject\">Header Object</a></li>\n<li><a href=\"#tagObject\">Tag Object</a></li>\n<li><a href=\"#referenceObject\">Reference Object</a></li>\n<li><a href=\"#schemaObject\">Schema Object</a></li>\n<li><a href=\"#discriminatorObject\">Discriminator Object</a></li>\n<li><a href=\"#xmlObject\">XML Object</a></li>\n<li><a href=\"#securitySchemeObject\">Security Scheme Object</a></li>\n<li><a href=\"#oauthFlowsObject\">OAuth Flows Object</a></li>\n<li><a href=\"#oauthFlowObject\">OAuth Flow Object</a></li>\n<li><a href=\"#securityRequirementObject\">Security Requirement Object</a></li>\n</ul>\n</li>\n<li><a href=\"#specificationExtensions\">Specification Extensions</a></li>\n<li><a href=\"#securityFiltering\">Security Filtering</a></li>\n</ul>\n</li>\n<li><a href=\"#revisionHistory\">Appendix A: Revision History</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"definitions\">Definitions</h2>\n<h5 id=\"openapi-document\"><a name=\"oasDocument\"></a>OpenAPI Document</h5>\n<p>A self-contained or composite resource which defines or describes an API or elements of an API. The OpenAPI document MUST contain at least one <a href=\"#pathsObject\">paths</a> field, a <a href=\"#oasComponents\">components</a> field or a <a href=\"#oasWebhooks\">webhooks</a> field. An OpenAPI document uses and conforms to the OpenAPI Specification.</p>\n<h5 id=\"path-templating\"><a name=\"pathTemplating\"></a>Path Templating</h5>\n<p>Path templating refers to the usage of template expressions, delimited by curly braces ({}), to mark a section of a URL path as replaceable using path parameters.</p>\n<p>Each template expression in the path MUST correspond to a path parameter that is included in the <a href=\"#path-item-object\">Path Item</a> itself and/or in each of the Path Item's <a href=\"#operation-object\">Operations</a>. An exception is if the path item is empty, for example due to ACL constraints, matching path parameters are not required.</p>\n<p>The value for these path parameters MUST NOT contain any unescaped \"generic syntax\" characters described by <a href=\"https://tools.ietf.org/html/rfc3986#section-3\">RFC3986</a>: forward slashes (<code>/</code>), question marks (<code>?</code>), or hashes (<code>#</code>).</p>\n<h5 id=\"media-types\"><a name=\"mediaTypes\"></a>Media Types</h5>\n<p>Media type definitions are spread across several resources.\nThe media type definitions SHOULD be in compliance with <a href=\"https://tools.ietf.org/html/rfc6838\">RFC6838</a>.</p>\n<p>Some examples of possible media type definitions:</p>\n<pre><code>  text/plain; charset=utf-8\n  application/json\n  application/vnd.github+json\n  application/vnd.github.v3+json\n  application/vnd.github.v3.raw+json\n  application/vnd.github.v3.text+json\n  application/vnd.github.v3.html+json\n  application/vnd.github.v3.full+json\n  application/vnd.github.v3.diff\n  application/vnd.github.v3.patch\n</code></pre>\n<h5 id=\"http-status-codes\"><a name=\"httpCodes\"></a>HTTP Status Codes</h5>\n<p>The HTTP Status Codes are used to indicate the status of the executed operation. \nThe available status codes are defined by <a href=\"https://tools.ietf.org/html/rfc7231#section-6\">RFC7231</a> and registered status codes are listed in the <a href=\"https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\">IANA Status Code Registry</a>.</p>\n<h2 id=\"specification\">Specification</h2>\n<h3 id=\"versions\">Versions</h3>\n<p>The OpenAPI Specification is versioned using a <code>major</code>.<code>minor</code>.<code>patch</code> versioning scheme. The <code>major</code>.<code>minor</code> portion of the version string (for example <code>3.1</code>) SHALL designate the OAS feature set. <em><code>.patch</code></em> versions address errors in, or provide clarifications to, this document, not the feature set. Tooling which supports OAS 3.1 SHOULD be compatible with all OAS 3.1.* versions. The patch version SHOULD NOT be considered by tooling, making no distinction between <code>3.1.0</code> and <code>3.1.1</code> for example.</p>\n<p>Occasionally, non-backwards compatible changes may be made in <code>minor</code> versions of the OAS where impact is believed to be low relative to the benefit provided.</p>\n<p>An OpenAPI document compatible with OAS 3.*.* contains a required <a href=\"#oasVersion\"><code>openapi</code></a> field which designates the version of the OAS that it uses.</p>\n<h3 id=\"format\">Format</h3>\n<p>An OpenAPI document that conforms to the OpenAPI Specification is itself a JSON object, which may be represented either in JSON or YAML format.</p>\n<p>For example, if a field has an array value, the JSON array representation will be used:</p>\n<pre><code class=\"language-json\">{\n   \"field\": [ 1, 2, 3 ]\n}\n</code></pre>\n<p>All field names in the specification are <strong>case sensitive</strong>.\nThis includes all fields that are used as keys in a map, except where explicitly noted that keys are <strong>case insensitive</strong>.</p>\n<p>The schema exposes two types of fields: Fixed fields, which have a declared name, and Patterned fields, which declare a regex pattern for the field name.</p>\n<p>Patterned fields MUST have unique names within the containing object. </p>\n<p>In order to preserve the ability to round-trip between YAML and JSON formats, YAML version <a href=\"https://yaml.org/spec/1.2/spec.html\">1.2</a> is RECOMMENDED along with some additional constraints:</p>\n<ul>\n<li>Tags MUST be limited to those allowed by the <a href=\"https://yaml.org/spec/1.2/spec.html#id2803231\">JSON Schema ruleset</a>.</li>\n<li>Keys used in YAML maps MUST be limited to a scalar string, as defined by the <a href=\"https://yaml.org/spec/1.2/spec.html#id2802346\">YAML Failsafe schema ruleset</a>.</li>\n</ul>\n<p><strong>Note:</strong> While APIs may be defined by OpenAPI documents in either YAML or JSON format, the API request and response bodies and other content are not required to be JSON or YAML.</p>\n<h3 id=\"document-structure\"><a name=\"documentStructure\"></a>Document Structure</h3>\n<p>An OpenAPI document MAY be made up of a single document or be divided into multiple, connected parts at the discretion of the author. In the latter case, <a href=\"#referenceObject\"><code>Reference Objects</code></a> and <a href=\"#schemaObject\"><code>Schema Object</code></a> <code>$ref</code> keywords are used.</p>\n<p>It is RECOMMENDED that the root OpenAPI document be named: <code>openapi.json</code> or <code>openapi.yaml</code>.</p>\n<h3 id=\"data-types\"><a name=\"dataTypes\"></a>Data Types</h3>\n<p>Data types in the OAS are based on the types supported by the <a href=\"https://tools.ietf.org/html/draft-bhutton-json-schema-00#section-4.2.1\">JSON Schema Specification Draft 2020-12</a>.\nNote that <code>integer</code> as a type is also supported and is defined as a JSON number without a fraction or exponent part. \nModels are defined using the <a href=\"#schemaObject\">Schema Object</a>, which is a superset of JSON Schema Specification Draft 2020-12.</p>\n<p><a name=\"dataTypeFormat\"></a>As defined by the <a href=\"https://tools.ietf.org/html/draft-bhutton-json-schema-validation-00#section-7.3\">JSON Schema Validation vocabulary</a>, data types can have an optional modifier property: <code>format</code>.\nOAS defines additional formats to provide fine detail for primitive data types.</p>\n<p>The formats defined by the OAS are:</p>\n<table>\n<thead>\n<tr>\n<th><a href=\"#dataTypes\"><code>type</code></a></th>\n<th><a href=\"#dataTypeFormat\"><code>format</code></a></th>\n<th>Comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>integer</code></td>\n<td><code>int32</code></td>\n<td>signed 32 bits</td>\n</tr>\n<tr>\n<td><code>integer</code></td>\n<td><code>int64</code></td>\n<td>signed 64 bits (a.k.a long)</td>\n</tr>\n<tr>\n<td><code>number</code></td>\n<td><code>float</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>number</code></td>\n<td><code>double</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>string</code></td>\n<td><code>password</code></td>\n<td>A hint to UIs to obscure input.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"rich-text-formatting\"><a name=\"richText\"></a>Rich Text Formatting</h3>\n<p>Throughout the specification <code>description</code> fields are noted as supporting CommonMark markdown formatting.\nWhere OpenAPI tooling renders rich text it MUST support, at a minimum, markdown syntax as described by <a href=\"https://spec.commonmark.org/0.27/\">CommonMark 0.27</a>. Tooling MAY choose to ignore some CommonMark features to address security concerns. </p>\n<h3 id=\"relative-references-in-uris\"><a name=\"relativeReferencesURI\"></a>Relative References in URIs</h3>\n<p>Unless specified otherwise, all properties that are URIs MAY be relative references as defined by <a href=\"https://tools.ietf.org/html/rfc3986#section-4.2\">RFC3986</a>.</p>\n<p>Relative references, including those in <a href=\"#referenceObject\"><code>Reference Objects</code></a>, <a href=\"#pathItemObject\"><code>PathItem Object</code></a> <code>$ref</code> fields, <a href=\"#linkObject\"><code>Link Object</code></a> <code>operationRef</code> fields and <a href=\"#exampleObject\"><code>Example Object</code></a> <code>externalValue</code> fields, are resolved using the referring document as the Base URI according to <a href=\"https://tools.ietf.org/html/rfc3986#section-5.2\">RFC3986</a>.</p>\n<p>If a URI contains a fragment identifier, then the fragment should be resolved per the fragment resolution mechanism of the referenced document.  If the representation of the referenced document is JSON or YAML, then the fragment identifier SHOULD be interpreted as a JSON-Pointer as per <a href=\"https://tools.ietf.org/html/rfc6901\">RFC6901</a>.</p>\n<p>Relative references in <a href=\"#schemaObject\"><code>Schema Objects</code></a>, including any that appear as <code>$id</code> values, use the nearest parent <code>$id</code> as a Base URI, as described by <a href=\"https://tools.ietf.org/html/draft-bhutton-json-schema-00#section-8.2\">JSON Schema Specification Draft 2020-12</a>.  If no parent schema contains an <code>$id</code>, then the Base URI MUST be determined according to <a href=\"https://tools.ietf.org/html/rfc3986#section-5.1\">RFC3986</a>.</p>\n<h3 id=\"relative-references-in-urls\"><a name=\"relativeReferencesURL\"></a>Relative References in URLs</h3>\n<p>Unless specified otherwise, all properties that are URLs MAY be relative references as defined by <a href=\"https://tools.ietf.org/html/rfc3986#section-4.2\">RFC3986</a>.\nUnless specified otherwise, relative references are resolved using the URLs defined in the <a href=\"#serverObject\"><code>Server Object</code></a> as a Base URL. Note that these themselves MAY be relative to the referring document.</p>\n<h3 id=\"schema\">Schema</h3>\n<p>In the following description, if a field is not explicitly <strong>REQUIRED</strong> or described with a MUST or SHALL, it can be considered OPTIONAL.</p>\n<h4 id=\"openapi-object\"><a name=\"oasObject\"></a>OpenAPI Object</h4>\n<p>This is the root object of the <a href=\"#oasDocument\">OpenAPI document</a>.</p>\n<h5 id=\"fixed-fields\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"oasVersion\"></a>openapi</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. This string MUST be the <a href=\"#versions\">version number</a> of the OpenAPI Specification that the OpenAPI document uses. The <code>openapi</code> field SHOULD be used by tooling to interpret the OpenAPI document. This is <em>not</em> related to the API <a href=\"#infoVersion\"><code>info.version</code></a> string.</td>\n</tr>\n<tr>\n<td><a name=\"oasInfo\"></a>info</td>\n<td style=\"text-align: center;\"><a href=\"#infoObject\">Info Object</a></td>\n<td><strong>REQUIRED</strong>. Provides metadata about the API. The metadata MAY be used by tooling as required.</td>\n</tr>\n<tr>\n<td><a name=\"oasJsonSchemaDialect\"></a> jsonSchemaDialect</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>The default value for the <code>$schema</code> keyword within <a href=\"#schemaObject\">Schema Objects</a> contained within this OAS document. This MUST be in the form of a URI.</td>\n</tr>\n<tr>\n<td><a name=\"oasServers\"></a>servers</td>\n<td style=\"text-align: center;\">[<a href=\"#serverObject\">Server Object</a>]</td>\n<td>An array of Server Objects, which provide connectivity information to a target server. If the <code>servers</code> property is not provided, or is an empty array, the default value would be a <a href=\"#serverObject\">Server Object</a> with a <a href=\"#serverUrl\">url</a> value of <code>/</code>.</td>\n</tr>\n<tr>\n<td><a name=\"oasPaths\"></a>paths</td>\n<td style=\"text-align: center;\"><a href=\"#pathsObject\">Paths Object</a></td>\n<td>The available paths and operations for the API.</td>\n</tr>\n<tr>\n<td><a name=\"oasWebhooks\"></a>webhooks</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, <a href=\"#pathItemObject\">Path Item Object</a> | <a href=\"#referenceObject\">Reference Object</a>] ]</td>\n<td>The incoming webhooks that MAY be received as part of this API and that the API consumer MAY choose to implement. Closely related to the <code>callbacks</code> feature, this section describes requests initiated other than by an API call, for example by an out of band registration. The key name is a unique string to refer to each webhook, while the (optionally referenced) Path Item Object describes a request that may be initiated by the API provider and the expected responses. An <a href=\"../examples/v3.1/webhook-example.yaml\">example</a> is available.</td>\n</tr>\n<tr>\n<td><a name=\"oasComponents\"></a>components</td>\n<td style=\"text-align: center;\"><a href=\"#componentsObject\">Components Object</a></td>\n<td>An element to hold various schemas for the document.</td>\n</tr>\n<tr>\n<td><a name=\"oasSecurity\"></a>security</td>\n<td style=\"text-align: center;\">[<a href=\"#securityRequirementObject\">Security Requirement Object</a>]</td>\n<td>A declaration of which security mechanisms can be used across the API. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. Individual operations can override this definition. To make security optional, an empty security requirement (<code>{}</code>) can be included in the array.</td>\n</tr>\n<tr>\n<td><a name=\"oasTags\"></a>tags</td>\n<td style=\"text-align: center;\">[<a href=\"#tagObject\">Tag Object</a>]</td>\n<td>A list of tags used by the document with additional metadata. The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by the <a href=\"#operationObject\">Operation Object</a> must be declared. The tags that are not declared MAY be organized randomly or based on the tools' logic. Each tag name in the list MUST be unique.</td>\n</tr>\n<tr>\n<td><a name=\"oasExternalDocs\"></a>externalDocs</td>\n<td style=\"text-align: center;\"><a href=\"#externalDocumentationObject\">External Documentation Object</a></td>\n<td>Additional external documentation.</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<h4 id=\"info-object\"><a name=\"infoObject\"></a>Info Object</h4>\n<p>The object provides metadata about the API.\nThe metadata MAY be used by the clients if needed, and MAY be presented in editing or documentation generation tools for convenience.</p>\n<h5 id=\"fixed-fields_1\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"infoTitle\"></a>title</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. The title of the API.</td>\n</tr>\n<tr>\n<td><a name=\"infoSummary\"></a>summary</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A short summary of the API.</td>\n</tr>\n<tr>\n<td><a name=\"infoDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A description of the API. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n<tr>\n<td><a name=\"infoTermsOfService\"></a>termsOfService</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A URL to the Terms of Service for the API. This MUST be in the form of a URL.</td>\n</tr>\n<tr>\n<td><a name=\"infoContact\"></a>contact</td>\n<td style=\"text-align: center;\"><a href=\"#contactObject\">Contact Object</a></td>\n<td>The contact information for the exposed API.</td>\n</tr>\n<tr>\n<td><a name=\"infoLicense\"></a>license</td>\n<td style=\"text-align: center;\"><a href=\"#licenseObject\">License Object</a></td>\n<td>The license information for the exposed API.</td>\n</tr>\n<tr>\n<td><a name=\"infoVersion\"></a>version</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. The version of the OpenAPI document (which is distinct from the <a href=\"#oasVersion\">OpenAPI Specification version</a> or the API implementation version).</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<h5 id=\"info-object-example\">Info Object Example</h5>\n<pre><code class=\"language-json\">{\n  \"title\": \"Sample Pet Store App\",\n  \"summary\": \"A pet store manager.\",\n  \"description\": \"This is a sample server for a pet store.\",\n  \"termsOfService\": \"https://example.com/terms/\",\n  \"contact\": {\n    \"name\": \"API Support\",\n    \"url\": \"https://www.example.com/support\",\n    \"email\": \"support@example.com\"\n  },\n  \"license\": {\n    \"name\": \"Apache 2.0\",\n    \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n  },\n  \"version\": \"1.0.1\"\n}\n</code></pre>\n<pre><code class=\"language-yaml\">title: Sample Pet Store App\nsummary: A pet store manager.\ndescription: This is a sample server for a pet store.\ntermsOfService: https://example.com/terms/\ncontact:\n  name: API Support\n  url: https://www.example.com/support\n  email: support@example.com\nlicense:\n  name: Apache 2.0\n  url: https://www.apache.org/licenses/LICENSE-2.0.html\nversion: 1.0.1\n</code></pre>\n<h4 id=\"contact-object\"><a name=\"contactObject\"></a>Contact Object</h4>\n<p>Contact information for the exposed API.</p>\n<h5 id=\"fixed-fields_2\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"contactName\"></a>name</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>The identifying name of the contact person/organization.</td>\n</tr>\n<tr>\n<td><a name=\"contactUrl\"></a>url</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>The URL pointing to the contact information. This MUST be in the form of a URL.</td>\n</tr>\n<tr>\n<td><a name=\"contactEmail\"></a>email</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>The email address of the contact person/organization. This MUST be in the form of an email address.</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<h5 id=\"contact-object-example\">Contact Object Example</h5>\n<pre><code class=\"language-json\">{\n  \"name\": \"API Support\",\n  \"url\": \"https://www.example.com/support\",\n  \"email\": \"support@example.com\"\n}\n</code></pre>\n<pre><code class=\"language-yaml\">name: API Support\nurl: https://www.example.com/support\nemail: support@example.com\n</code></pre>\n<h4 id=\"license-object\"><a name=\"licenseObject\"></a>License Object</h4>\n<p>License information for the exposed API.</p>\n<h5 id=\"fixed-fields_3\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"licenseName\"></a>name</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. The license name used for the API.</td>\n</tr>\n<tr>\n<td><a name=\"licenseIdentifier\"></a>identifier</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>An <a href=\"https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60\">SPDX</a> license expression for the API. The <code>identifier</code> field is mutually exclusive of the <code>url</code> field.</td>\n</tr>\n<tr>\n<td><a name=\"licenseUrl\"></a>url</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A URL to the license used for the API. This MUST be in the form of a URL. The <code>url</code> field is mutually exclusive of the <code>identifier</code> field.</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<h5 id=\"license-object-example\">License Object Example</h5>\n<pre><code class=\"language-json\">{\n  \"name\": \"Apache 2.0\",\n  \"identifier\": \"Apache-2.0\"\n}\n</code></pre>\n<pre><code class=\"language-yaml\">name: Apache 2.0\nidentifier: Apache-2.0\n</code></pre>\n<h4 id=\"server-object\"><a name=\"serverObject\"></a>Server Object</h4>\n<p>An object representing a Server.</p>\n<h5 id=\"fixed-fields_4\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"serverUrl\"></a>url</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. A URL to the target host.  This URL supports Server Variables and MAY be relative, to indicate that the host location is relative to the location where the OpenAPI document is being served. Variable substitutions will be made when a variable is named in <code>{</code>brackets<code>}</code>.</td>\n</tr>\n<tr>\n<td><a name=\"serverDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>An optional string describing the host designated by the URL. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n<tr>\n<td><a name=\"serverVariables\"></a>variables</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, <a href=\"#serverVariableObject\">Server Variable Object</a>]</td>\n<td>A map between a variable name and its value.  The value is used for substitution in the server's URL template.</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<h5 id=\"server-object-example\">Server Object Example</h5>\n<p>A single server would be described as:</p>\n<pre><code class=\"language-json\">{\n  \"url\": \"https://development.gigantic-server.com/v1\",\n  \"description\": \"Development server\"\n}\n</code></pre>\n<pre><code class=\"language-yaml\">url: https://development.gigantic-server.com/v1\ndescription: Development server\n</code></pre>\n<p>The following shows how multiple servers can be described, for example, at the OpenAPI Object's <a href=\"#oasServers\"><code>servers</code></a>:</p>\n<pre><code class=\"language-json\">{\n  \"servers\": [\n    {\n      \"url\": \"https://development.gigantic-server.com/v1\",\n      \"description\": \"Development server\"\n    },\n    {\n      \"url\": \"https://staging.gigantic-server.com/v1\",\n      \"description\": \"Staging server\"\n    },\n    {\n      \"url\": \"https://api.gigantic-server.com/v1\",\n      \"description\": \"Production server\"\n    }\n  ]\n}\n</code></pre>\n<pre><code class=\"language-yaml\">servers:\n- url: https://development.gigantic-server.com/v1\n  description: Development server\n- url: https://staging.gigantic-server.com/v1\n  description: Staging server\n- url: https://api.gigantic-server.com/v1\n  description: Production server\n</code></pre>\n<p>The following shows how variables can be used for a server configuration:</p>\n<pre><code class=\"language-json\">{\n  \"servers\": [\n    {\n      \"url\": \"https://{username}.gigantic-server.com:{port}/{basePath}\",\n      \"description\": \"The production API server\",\n      \"variables\": {\n        \"username\": {\n          \"default\": \"demo\",\n          \"description\": \"this value is assigned by the service provider, in this example `gigantic-server.com`\"\n        },\n        \"port\": {\n          \"enum\": [\n            \"8443\",\n            \"443\"\n          ],\n          \"default\": \"8443\"\n        },\n        \"basePath\": {\n          \"default\": \"v2\"\n        }\n      }\n    }\n  ]\n}\n</code></pre>\n<pre><code class=\"language-yaml\">servers:\n- url: https://{username}.gigantic-server.com:{port}/{basePath}\n  description: The production API server\n  variables:\n    username:\n      # note! no enum here means it is an open value\n      default: demo\n      description: this value is assigned by the service provider, in this example `gigantic-server.com`\n    port:\n      enum:\n        - '8443'\n        - '443'\n      default: '8443'\n    basePath:\n      # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`\n      default: v2\n</code></pre>\n<h4 id=\"server-variable-object\"><a name=\"serverVariableObject\"></a>Server Variable Object</h4>\n<p>An object representing a Server Variable for server URL template substitution.</p>\n<h5 id=\"fixed-fields_5\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"serverVariableEnum\"></a>enum</td>\n<td style=\"text-align: center;\">[<code>string</code>]</td>\n<td>An enumeration of string values to be used if the substitution options are from a limited set. The array MUST NOT be empty.</td>\n</tr>\n<tr>\n<td><a name=\"serverVariableDefault\"></a>default</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. The default value to use for substitution, which SHALL be sent if an alternate value is <em>not</em> supplied. Note this behavior is different than the <a href=\"#schemaObject\">Schema Object's</a> treatment of default values, because in those cases parameter values are optional. If the <a href=\"#serverVariableEnum\"><code>enum</code></a> is defined, the value MUST exist in the enum's values.</td>\n</tr>\n<tr>\n<td><a name=\"serverVariableDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>An optional description for the server variable. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<h4 id=\"components-object\"><a name=\"componentsObject\"></a>Components Object</h4>\n<p>Holds a set of reusable objects for different aspects of the OAS.\nAll objects defined within the components object will have no effect on the API unless they are explicitly referenced from properties outside the components object.</p>\n<h5 id=\"fixed-fields_6\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: left;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"componentsSchemas\"></a> schemas</td>\n<td style=\"text-align: left;\">Map[<code>string</code>, <a href=\"#schemaObject\">Schema Object</a>]</td>\n<td>An object to hold reusable <a href=\"#schemaObject\">Schema Objects</a>.</td>\n</tr>\n<tr>\n<td><a name=\"componentsResponses\"></a> responses</td>\n<td style=\"text-align: left;\">Map[<code>string</code>, <a href=\"#responseObject\">Response Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>An object to hold reusable <a href=\"#responseObject\">Response Objects</a>.</td>\n</tr>\n<tr>\n<td><a name=\"componentsParameters\"></a> parameters</td>\n<td style=\"text-align: left;\">Map[<code>string</code>, <a href=\"#parameterObject\">Parameter Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>An object to hold reusable <a href=\"#parameterObject\">Parameter Objects</a>.</td>\n</tr>\n<tr>\n<td><a name=\"componentsExamples\"></a> examples</td>\n<td style=\"text-align: left;\">Map[<code>string</code>, <a href=\"#exampleObject\">Example Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>An object to hold reusable <a href=\"#exampleObject\">Example Objects</a>.</td>\n</tr>\n<tr>\n<td><a name=\"componentsRequestBodies\"></a> requestBodies</td>\n<td style=\"text-align: left;\">Map[<code>string</code>, <a href=\"#requestBodyObject\">Request Body Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>An object to hold reusable <a href=\"#requestBodyObject\">Request Body Objects</a>.</td>\n</tr>\n<tr>\n<td><a name=\"componentsHeaders\"></a> headers</td>\n<td style=\"text-align: left;\">Map[<code>string</code>, <a href=\"#headerObject\">Header Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>An object to hold reusable <a href=\"#headerObject\">Header Objects</a>.</td>\n</tr>\n<tr>\n<td><a name=\"componentsSecuritySchemes\"></a> securitySchemes</td>\n<td style=\"text-align: left;\">Map[<code>string</code>, <a href=\"#securitySchemeObject\">Security Scheme Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>An object to hold reusable <a href=\"#securitySchemeObject\">Security Scheme Objects</a>.</td>\n</tr>\n<tr>\n<td><a name=\"componentsLinks\"></a> links</td>\n<td style=\"text-align: left;\">Map[<code>string</code>, <a href=\"#linkObject\">Link Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>An object to hold reusable <a href=\"#linkObject\">Link Objects</a>.</td>\n</tr>\n<tr>\n<td><a name=\"componentsCallbacks\"></a> callbacks</td>\n<td style=\"text-align: left;\">Map[<code>string</code>, <a href=\"#callbackObject\">Callback Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>An object to hold reusable <a href=\"#callbackObject\">Callback Objects</a>.</td>\n</tr>\n<tr>\n<td><a name=\"componentsPathItems\"></a> pathItems</td>\n<td style=\"text-align: left;\">Map[<code>string</code>, <a href=\"#pathItemObject\">Path Item Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>An object to hold reusable <a href=\"#pathItemObject\">Path Item Object</a>.</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<p>All the fixed fields declared above are objects that MUST use keys that match the regular expression: <code>^[a-zA-Z0-9\\.\\-_]+$</code>.</p>\n<p>Field Name Examples:</p>\n<pre><code>User\nUser_1\nUser_Name\nuser-name\nmy.org.User\n</code></pre>\n<h5 id=\"components-object-example\">Components Object Example</h5>\n<pre><code class=\"language-json\">\"components\": {\n  \"schemas\": {\n    \"GeneralError\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"code\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        },\n        \"message\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Category\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Tag\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  },\n  \"parameters\": {\n    \"skipParam\": {\n      \"name\": \"skip\",\n      \"in\": \"query\",\n      \"description\": \"number of items to skip\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    },\n    \"limitParam\": {\n      \"name\": \"limit\",\n      \"in\": \"query\",\n      \"description\": \"max records to return\",\n      \"required\": true,\n      \"schema\" : {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    }\n  },\n  \"responses\": {\n    \"NotFound\": {\n      \"description\": \"Entity not found.\"\n    },\n    \"IllegalInput\": {\n      \"description\": \"Illegal input for operation.\"\n    },\n    \"GeneralError\": {\n      \"description\": \"General Error\",\n      \"content\": {\n        \"application/json\": {\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/GeneralError\"\n          }\n        }\n      }\n    }\n  },\n  \"securitySchemes\": {\n    \"api_key\": {\n      \"type\": \"apiKey\",\n      \"name\": \"api_key\",\n      \"in\": \"header\"\n    },\n    \"petstore_auth\": {\n      \"type\": \"oauth2\",\n      \"flows\": {\n        \"implicit\": {\n          \"authorizationUrl\": \"https://example.org/api/oauth/dialog\",\n          \"scopes\": {\n            \"write:pets\": \"modify pets in your account\",\n            \"read:pets\": \"read your pets\"\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">components:\n  schemas:\n    GeneralError:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n  parameters:\n    skipParam:\n      name: skip\n      in: query\n      description: number of items to skip\n      required: true\n      schema:\n        type: integer\n        format: int32\n    limitParam:\n      name: limit\n      in: query\n      description: max records to return\n      required: true\n      schema:\n        type: integer\n        format: int32\n  responses:\n    NotFound:\n      description: Entity not found.\n    IllegalInput:\n      description: Illegal input for operation.\n    GeneralError:\n      description: General Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GeneralError'\n  securitySchemes:\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n    petstore_auth:\n      type: oauth2\n      flows: \n        implicit:\n          authorizationUrl: https://example.org/api/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n</code></pre>\n<h4 id=\"paths-object\"><a name=\"pathsObject\"></a>Paths Object</h4>\n<p>Holds the relative paths to the individual endpoints and their operations.\nThe path is appended to the URL from the <a href=\"#serverObject\"><code>Server Object</code></a> in order to construct the full URL.  The Paths MAY be empty, due to <a href=\"#securityFiltering\">Access Control List (ACL) constraints</a>.</p>\n<h5 id=\"patterned-fields\">Patterned Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Pattern</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"pathsPath\"></a>/{path}</td>\n<td style=\"text-align: center;\"><a href=\"#pathItemObject\">Path Item Object</a></td>\n<td>A relative path to an individual endpoint. The field name MUST begin with a forward slash (<code>/</code>). The path is <strong>appended</strong> (no relative URL resolution) to the expanded URL from the <a href=\"#serverObject\"><code>Server Object</code></a>'s <code>url</code> field in order to construct the full URL. <a href=\"#pathTemplating\">Path templating</a> is allowed. When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts. Templated paths with the same hierarchy but different templated names MUST NOT exist as they are identical. In case of ambiguous matching, it's up to the tooling to decide which one to use.</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<h5 id=\"path-templating-matching\">Path Templating Matching</h5>\n<p>Assuming the following paths, the concrete definition, <code>/pets/mine</code>, will be matched first if used:</p>\n<pre><code>  /pets/{petId}\n  /pets/mine\n</code></pre>\n<p>The following paths are considered identical and invalid:</p>\n<pre><code>  /pets/{petId}\n  /pets/{name}\n</code></pre>\n<p>The following may lead to ambiguous resolution:</p>\n<pre><code>  /{entity}/me\n  /books/{id}\n</code></pre>\n<h5 id=\"paths-object-example\">Paths Object Example</h5>\n<pre><code class=\"language-json\">{\n  \"/pets\": {\n    \"get\": {\n      \"description\": \"Returns all pets from the system that the user has access to\",\n      \"responses\": {\n        \"200\": {          \n          \"description\": \"A list of pets.\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/pet\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">/pets:\n  get:\n    description: Returns all pets from the system that the user has access to\n    responses:\n      '200':\n        description: A list of pets.\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/pet'\n</code></pre>\n<h4 id=\"path-item-object\"><a name=\"pathItemObject\"></a>Path Item Object</h4>\n<p>Describes the operations available on a single path.\nA Path Item MAY be empty, due to <a href=\"#securityFiltering\">ACL constraints</a>.\nThe path itself is still exposed to the documentation viewer but they will not know which operations and parameters are available.</p>\n<h5 id=\"fixed-fields_7\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"pathItemRef\"></a>$ref</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>Allows for a referenced definition of this path item. The referenced structure MUST be in the form of a <a href=\"#pathItemObject\">Path Item Object</a>.  In case a Path Item Object field appears both in the defined object and the referenced object, the behavior is undefined. See the rules for resolving <a href=\"#relativeReferencesURI\">Relative References</a>.</td>\n</tr>\n<tr>\n<td><a name=\"pathItemSummary\"></a>summary</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>An optional, string summary, intended to apply to all operations in this path.</td>\n</tr>\n<tr>\n<td><a name=\"pathItemDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>An optional, string description, intended to apply to all operations in this path. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n<tr>\n<td><a name=\"pathItemGet\"></a>get</td>\n<td style=\"text-align: center;\"><a href=\"#operationObject\">Operation Object</a></td>\n<td>A definition of a GET operation on this path.</td>\n</tr>\n<tr>\n<td><a name=\"pathItemPut\"></a>put</td>\n<td style=\"text-align: center;\"><a href=\"#operationObject\">Operation Object</a></td>\n<td>A definition of a PUT operation on this path.</td>\n</tr>\n<tr>\n<td><a name=\"pathItemPost\"></a>post</td>\n<td style=\"text-align: center;\"><a href=\"#operationObject\">Operation Object</a></td>\n<td>A definition of a POST operation on this path.</td>\n</tr>\n<tr>\n<td><a name=\"pathItemDelete\"></a>delete</td>\n<td style=\"text-align: center;\"><a href=\"#operationObject\">Operation Object</a></td>\n<td>A definition of a DELETE operation on this path.</td>\n</tr>\n<tr>\n<td><a name=\"pathItemOptions\"></a>options</td>\n<td style=\"text-align: center;\"><a href=\"#operationObject\">Operation Object</a></td>\n<td>A definition of a OPTIONS operation on this path.</td>\n</tr>\n<tr>\n<td><a name=\"pathItemHead\"></a>head</td>\n<td style=\"text-align: center;\"><a href=\"#operationObject\">Operation Object</a></td>\n<td>A definition of a HEAD operation on this path.</td>\n</tr>\n<tr>\n<td><a name=\"pathItemPatch\"></a>patch</td>\n<td style=\"text-align: center;\"><a href=\"#operationObject\">Operation Object</a></td>\n<td>A definition of a PATCH operation on this path.</td>\n</tr>\n<tr>\n<td><a name=\"pathItemTrace\"></a>trace</td>\n<td style=\"text-align: center;\"><a href=\"#operationObject\">Operation Object</a></td>\n<td>A definition of a TRACE operation on this path.</td>\n</tr>\n<tr>\n<td><a name=\"pathItemServers\"></a>servers</td>\n<td style=\"text-align: center;\">[<a href=\"#serverObject\">Server Object</a>]</td>\n<td>An alternative <code>server</code> array to service all operations in this path.</td>\n</tr>\n<tr>\n<td><a name=\"pathItemParameters\"></a>parameters</td>\n<td style=\"text-align: center;\">[<a href=\"#parameterObject\">Parameter Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>A list of parameters that are applicable for all the operations described under this path. These parameters can be overridden at the operation level, but cannot be removed there. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a <a href=\"#parameterName\">name</a> and <a href=\"#parameterIn\">location</a>. The list can use the <a href=\"#referenceObject\">Reference Object</a> to link to parameters that are defined at the <a href=\"#componentsParameters\">OpenAPI Object's components/parameters</a>.</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<h5 id=\"path-item-object-example\">Path Item Object Example</h5>\n<pre><code class=\"language-json\">{\n  \"get\": {\n    \"description\": \"Returns pets based on ID\",\n    \"summary\": \"Find pets by ID\",\n    \"operationId\": \"getPetsById\",\n    \"responses\": {\n      \"200\": {\n        \"description\": \"pet response\",\n        \"content\": {\n          \"*/*\": {\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"$ref\": \"#/components/schemas/Pet\"\n              }\n            }\n          }\n        }\n      },\n      \"default\": {\n        \"description\": \"error payload\",\n        \"content\": {\n          \"text/html\": {\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/ErrorModel\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \"parameters\": [\n    {\n      \"name\": \"id\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet to use\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"style\": \"simple\"\n    }\n  ]\n}\n</code></pre>\n<pre><code class=\"language-yaml\">get:\n  description: Returns pets based on ID\n  summary: Find pets by ID\n  operationId: getPetsById\n  responses:\n    '200':\n      description: pet response\n      content:\n        '*/*' :\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/Pet'\n    default:\n      description: error payload\n      content:\n        'text/html':\n          schema:\n            $ref: '#/components/schemas/ErrorModel'\nparameters:\n- name: id\n  in: path\n  description: ID of pet to use\n  required: true\n  schema:\n    type: array\n    items:\n      type: string  \n  style: simple\n</code></pre>\n<h4 id=\"operation-object\"><a name=\"operationObject\"></a>Operation Object</h4>\n<p>Describes a single API operation on a path.</p>\n<h5 id=\"fixed-fields_8\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"operationTags\"></a>tags</td>\n<td style=\"text-align: center;\">[<code>string</code>]</td>\n<td>A list of tags for API documentation control. Tags can be used for logical grouping of operations by resources or any other qualifier.</td>\n</tr>\n<tr>\n<td><a name=\"operationSummary\"></a>summary</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A short summary of what the operation does.</td>\n</tr>\n<tr>\n<td><a name=\"operationDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A verbose explanation of the operation behavior. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n<tr>\n<td><a name=\"operationExternalDocs\"></a>externalDocs</td>\n<td style=\"text-align: center;\"><a href=\"#externalDocumentationObject\">External Documentation Object</a></td>\n<td>Additional external documentation for this operation.</td>\n</tr>\n<tr>\n<td><a name=\"operationId\"></a>operationId</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>Unique string used to identify the operation. The id MUST be unique among all operations described in the API. The operationId value is <strong>case-sensitive</strong>. Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is RECOMMENDED to follow common programming naming conventions.</td>\n</tr>\n<tr>\n<td><a name=\"operationParameters\"></a>parameters</td>\n<td style=\"text-align: center;\">[<a href=\"#parameterObject\">Parameter Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>A list of parameters that are applicable for this operation. If a parameter is already defined at the <a href=\"#pathItemParameters\">Path Item</a>, the new definition will override it but can never remove it. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a <a href=\"#parameterName\">name</a> and <a href=\"#parameterIn\">location</a>. The list can use the <a href=\"#referenceObject\">Reference Object</a> to link to parameters that are defined at the <a href=\"#componentsParameters\">OpenAPI Object's components/parameters</a>.</td>\n</tr>\n<tr>\n<td><a name=\"operationRequestBody\"></a>requestBody</td>\n<td style=\"text-align: center;\"><a href=\"#requestBodyObject\">Request Body Object</a> | <a href=\"#referenceObject\">Reference Object</a></td>\n<td>The request body applicable for this operation.  The <code>requestBody</code> is fully supported in HTTP methods where the HTTP 1.1 specification <a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.1\">RFC7231</a> has explicitly defined semantics for request bodies.  In other cases where the HTTP spec is vague (such as <a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.1\">GET</a>, <a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.2\">HEAD</a> and <a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.5\">DELETE</a>), <code>requestBody</code> is permitted but does not have well-defined semantics and SHOULD be avoided if possible.</td>\n</tr>\n<tr>\n<td><a name=\"operationResponses\"></a>responses</td>\n<td style=\"text-align: center;\"><a href=\"#responsesObject\">Responses Object</a></td>\n<td>The list of possible responses as they are returned from executing this operation.</td>\n</tr>\n<tr>\n<td><a name=\"operationCallbacks\"></a>callbacks</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, <a href=\"#callbackObject\">Callback Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>A map of possible out-of band callbacks related to the parent operation. The key is a unique identifier for the Callback Object. Each value in the map is a <a href=\"#callbackObject\">Callback Object</a> that describes a request that may be initiated by the API provider and the expected responses.</td>\n</tr>\n<tr>\n<td><a name=\"operationDeprecated\"></a>deprecated</td>\n<td style=\"text-align: center;\"><code>boolean</code></td>\n<td>Declares this operation to be deprecated. Consumers SHOULD refrain from usage of the declared operation. Default value is <code>false</code>.</td>\n</tr>\n<tr>\n<td><a name=\"operationSecurity\"></a>security</td>\n<td style=\"text-align: center;\">[<a href=\"#securityRequirementObject\">Security Requirement Object</a>]</td>\n<td>A declaration of which security mechanisms can be used for this operation. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. To make security optional, an empty security requirement (<code>{}</code>) can be included in the array. This definition overrides any declared top-level <a href=\"#oasSecurity\"><code>security</code></a>. To remove a top-level security declaration, an empty array can be used.</td>\n</tr>\n<tr>\n<td><a name=\"operationServers\"></a>servers</td>\n<td style=\"text-align: center;\">[<a href=\"#serverObject\">Server Object</a>]</td>\n<td>An alternative <code>server</code> array to service this operation. If an alternative <code>server</code> object is specified at the Path Item Object or Root level, it will be overridden by this value.</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<h5 id=\"operation-object-example\">Operation Object Example</h5>\n<pre><code class=\"language-json\">{\n  \"tags\": [\n    \"pet\"\n  ],\n  \"summary\": \"Updates a pet in the store with form data\",\n  \"operationId\": \"updatePetWithForm\",\n  \"parameters\": [\n    {\n      \"name\": \"petId\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet that needs to be updated\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  ],\n  \"requestBody\": {\n    \"content\": {\n      \"application/x-www-form-urlencoded\": {\n        \"schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"name\": { \n              \"description\": \"Updated name of the pet\",\n              \"type\": \"string\"\n            },\n            \"status\": {\n              \"description\": \"Updated status of the pet\",\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\"status\"] \n        }\n      }\n    }\n  },\n  \"responses\": {\n    \"200\": {\n      \"description\": \"Pet updated.\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    },\n    \"405\": {\n      \"description\": \"Method Not Allowed\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    }\n  },\n  \"security\": [\n    {\n      \"petstore_auth\": [\n        \"write:pets\",\n        \"read:pets\"\n      ]\n    }\n  ]\n}\n</code></pre>\n<pre><code class=\"language-yaml\">tags:\n- pet\nsummary: Updates a pet in the store with form data\noperationId: updatePetWithForm\nparameters:\n- name: petId\n  in: path\n  description: ID of pet that needs to be updated\n  required: true\n  schema:\n    type: string\nrequestBody:\n  content:\n    'application/x-www-form-urlencoded':\n      schema:\n       type: object\n       properties:\n          name: \n            description: Updated name of the pet\n            type: string\n          status:\n            description: Updated status of the pet\n            type: string\n       required:\n         - status\nresponses:\n  '200':\n    description: Pet updated.\n    content: \n      'application/json': {}\n      'application/xml': {}\n  '405':\n    description: Method Not Allowed\n    content: \n      'application/json': {}\n      'application/xml': {}\nsecurity:\n- petstore_auth:\n  - write:pets\n  - read:pets\n</code></pre>\n<h4 id=\"external-documentation-object\"><a name=\"externalDocumentationObject\"></a>External Documentation Object</h4>\n<p>Allows referencing an external resource for extended documentation.</p>\n<h5 id=\"fixed-fields_9\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"externalDocDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A description of the target documentation. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n<tr>\n<td><a name=\"externalDocUrl\"></a>url</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. The URL for the target documentation. This MUST be in the form of a URL.</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<h5 id=\"external-documentation-object-example\">External Documentation Object Example</h5>\n<pre><code class=\"language-json\">{\n  \"description\": \"Find more info here\",\n  \"url\": \"https://example.com\"\n}\n</code></pre>\n<pre><code class=\"language-yaml\">description: Find more info here\nurl: https://example.com\n</code></pre>\n<h4 id=\"parameter-object\"><a name=\"parameterObject\"></a>Parameter Object</h4>\n<p>Describes a single operation parameter.</p>\n<p>A unique parameter is defined by a combination of a <a href=\"#parameterName\">name</a> and <a href=\"#parameterIn\">location</a>.</p>\n<h5 id=\"parameter-locations\">Parameter Locations</h5>\n<p>There are four possible parameter locations specified by the <code>in</code> field:\n* path - Used together with <a href=\"#pathTemplating\">Path Templating</a>, where the parameter value is actually part of the operation's URL. This does not include the host or base path of the API. For example, in <code>/items/{itemId}</code>, the path parameter is <code>itemId</code>.\n* query - Parameters that are appended to the URL. For example, in <code>/items?id=###</code>, the query parameter is <code>id</code>.\n* header - Custom headers that are expected as part of the request. Note that <a href=\"https://tools.ietf.org/html/rfc7230#page-22\">RFC7230</a> states header names are case insensitive.\n* cookie - Used to pass a specific cookie value to the API.</p>\n<h5 id=\"fixed-fields_10\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"parameterName\"></a>name</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. The name of the parameter. Parameter names are <em>case sensitive</em>. <ul><li>If <a href=\"#parameterIn\"><code>in</code></a> is <code>\"path\"</code>, the <code>name</code> field MUST correspond to a template expression occurring within the <a href=\"#pathsPath\">path</a> field in the <a href=\"#pathsObject\">Paths Object</a>. See <a href=\"#pathTemplating\">Path Templating</a> for further information.<li>If <a href=\"#parameterIn\"><code>in</code></a> is <code>\"header\"</code> and the <code>name</code> field is <code>\"Accept\"</code>, <code>\"Content-Type\"</code> or <code>\"Authorization\"</code>, the parameter definition SHALL be ignored.<li>For all other cases, the <code>name</code> corresponds to the parameter name used by the <a href=\"#parameterIn\"><code>in</code></a> property.</li></li></li></ul></td>\n</tr>\n<tr>\n<td><a name=\"parameterIn\"></a>in</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. The location of the parameter. Possible values are <code>\"query\"</code>, <code>\"header\"</code>, <code>\"path\"</code> or <code>\"cookie\"</code>.</td>\n</tr>\n<tr>\n<td><a name=\"parameterDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A brief description of the parameter. This could contain examples of use. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n<tr>\n<td><a name=\"parameterRequired\"></a>required</td>\n<td style=\"text-align: center;\"><code>boolean</code></td>\n<td>Determines whether this parameter is mandatory. If the <a href=\"#parameterIn\">parameter location</a> is <code>\"path\"</code>, this property is <strong>REQUIRED</strong> and its value MUST be <code>true</code>. Otherwise, the property MAY be included and its default value is <code>false</code>.</td>\n</tr>\n<tr>\n<td><a name=\"parameterDeprecated\"></a> deprecated</td>\n<td style=\"text-align: center;\"><code>boolean</code></td>\n<td>Specifies that a parameter is deprecated and SHOULD be transitioned out of usage. Default value is <code>false</code>.</td>\n</tr>\n<tr>\n<td><a name=\"parameterAllowEmptyValue\"></a> allowEmptyValue</td>\n<td style=\"text-align: center;\"><code>boolean</code></td>\n<td>Sets the ability to pass empty-valued parameters. This is valid only for <code>query</code> parameters and allows sending a parameter with an empty value. Default value is <code>false</code>. If <a href=\"#parameterStyle\"><code>style</code></a> is used, and if behavior is <code>n/a</code> (cannot be serialized), the value of <code>allowEmptyValue</code> SHALL be ignored. Use of this property is NOT RECOMMENDED, as it is likely to be removed in a later revision.</td>\n</tr>\n</tbody>\n</table>\n<p>The rules for serialization of the parameter are specified in one of two ways.\nFor simpler scenarios, a <a href=\"#parameterSchema\"><code>schema</code></a> and <a href=\"#parameterStyle\"><code>style</code></a> can describe the structure and syntax of the parameter.</p>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"parameterStyle\"></a>style</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>Describes how the parameter value will be serialized depending on the type of the parameter value. Default values (based on value of <code>in</code>): for <code>query</code> - <code>form</code>; for <code>path</code> - <code>simple</code>; for <code>header</code> - <code>simple</code>; for <code>cookie</code> - <code>form</code>.</td>\n</tr>\n<tr>\n<td><a name=\"parameterExplode\"></a>explode</td>\n<td style=\"text-align: center;\"><code>boolean</code></td>\n<td>When this is true, parameter values of type <code>array</code> or <code>object</code> generate separate parameters for each value of the array or key-value pair of the map. For other types of parameters this property has no effect. When <a href=\"#parameterStyle\"><code>style</code></a> is <code>form</code>, the default value is <code>true</code>. For all other styles, the default value is <code>false</code>.</td>\n</tr>\n<tr>\n<td><a name=\"parameterAllowReserved\"></a>allowReserved</td>\n<td style=\"text-align: center;\"><code>boolean</code></td>\n<td>Determines whether the parameter value SHOULD allow reserved characters, as defined by <a href=\"https://tools.ietf.org/html/rfc3986#section-2.2\">RFC3986</a> <code>:/?#[]@!$&amp;'()*+,;=</code> to be included without percent-encoding. This property only applies to parameters with an <code>in</code> value of <code>query</code>. The default value is <code>false</code>.</td>\n</tr>\n<tr>\n<td><a name=\"parameterSchema\"></a>schema</td>\n<td style=\"text-align: center;\"><a href=\"#schemaObject\">Schema Object</a></td>\n<td>The schema defining the type used for the parameter.</td>\n</tr>\n<tr>\n<td><a name=\"parameterExample\"></a>example</td>\n<td style=\"text-align: center;\">Any</td>\n<td>Example of the parameter's potential value. The example SHOULD match the specified schema and encoding properties if present. The <code>example</code> field is mutually exclusive of the <code>examples</code> field. Furthermore, if referencing a <code>schema</code> that contains an example, the <code>example</code> value SHALL <em>override</em> the example provided by the schema. To represent examples of media types that cannot naturally be represented in JSON or YAML, a string value can contain the example with escaping where necessary.</td>\n</tr>\n<tr>\n<td><a name=\"parameterExamples\"></a>examples</td>\n<td style=\"text-align: center;\">Map[ <code>string</code>, <a href=\"#exampleObject\">Example Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>Examples of the parameter's potential value. Each example SHOULD contain a value in the correct format as specified in the parameter encoding. The <code>examples</code> field is mutually exclusive of the <code>example</code> field. Furthermore, if referencing a <code>schema</code> that contains an example, the <code>examples</code> value SHALL <em>override</em> the example provided by the schema.</td>\n</tr>\n</tbody>\n</table>\n<p>For more complex scenarios, the <a href=\"#parameterContent\"><code>content</code></a> property can define the media type and schema of the parameter.\nA parameter MUST contain either a <code>schema</code> property, or a <code>content</code> property, but not both.\nWhen <code>example</code> or <code>examples</code> are provided in conjunction with the <code>schema</code> object, the example MUST follow the prescribed serialization strategy for the parameter.</p>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"parameterContent\"></a>content</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, <a href=\"#mediaTypeObject\">Media Type Object</a>]</td>\n<td>A map containing the representations for the parameter. The key is the media type and the value describes it. The map MUST only contain one entry.</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"style-values\"><a name=\"styleValues\"></a>Style Values</h5>\n<p>In order to support common ways of serializing simple parameters, a set of <code>style</code> values are defined.</p>\n<table>\n<thead>\n<tr>\n<th><code>style</code></th>\n<th><a href=\"#dataTypes\"><code>type</code></a></th>\n<th><code>in</code></th>\n<th>Comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>matrix</td>\n<td><code>primitive</code>, <code>array</code>, <code>object</code></td>\n<td><code>path</code></td>\n<td>Path-style parameters defined by <a href=\"https://tools.ietf.org/html/rfc6570#section-3.2.7\">RFC6570</a></td>\n</tr>\n<tr>\n<td>label</td>\n<td><code>primitive</code>, <code>array</code>, <code>object</code></td>\n<td><code>path</code></td>\n<td>Label style parameters defined by <a href=\"https://tools.ietf.org/html/rfc6570#section-3.2.5\">RFC6570</a></td>\n</tr>\n<tr>\n<td>form</td>\n<td><code>primitive</code>, <code>array</code>, <code>object</code></td>\n<td><code>query</code>, <code>cookie</code></td>\n<td>Form style parameters defined by <a href=\"https://tools.ietf.org/html/rfc6570#section-3.2.8\">RFC6570</a>. This option replaces <code>collectionFormat</code> with a <code>csv</code> (when <code>explode</code> is false) or <code>multi</code> (when <code>explode</code> is true) value from OpenAPI 2.0.</td>\n</tr>\n<tr>\n<td>simple</td>\n<td><code>array</code></td>\n<td><code>path</code>, <code>header</code></td>\n<td>Simple style parameters defined by <a href=\"https://tools.ietf.org/html/rfc6570#section-3.2.2\">RFC6570</a>.  This option replaces <code>collectionFormat</code> with a <code>csv</code> value from OpenAPI 2.0.</td>\n</tr>\n<tr>\n<td>spaceDelimited</td>\n<td><code>array</code>, <code>object</code></td>\n<td><code>query</code></td>\n<td>Space separated array or object values. This option replaces <code>collectionFormat</code> equal to <code>ssv</code> from OpenAPI 2.0.</td>\n</tr>\n<tr>\n<td>pipeDelimited</td>\n<td><code>array</code>, <code>object</code></td>\n<td><code>query</code></td>\n<td>Pipe separated array or object values. This option replaces <code>collectionFormat</code> equal to <code>pipes</code> from OpenAPI 2.0.</td>\n</tr>\n<tr>\n<td>deepObject</td>\n<td><code>object</code></td>\n<td><code>query</code></td>\n<td>Provides a simple way of rendering nested objects using form parameters.</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"style-examples\">Style Examples</h5>\n<p>Assume a parameter named <code>color</code> has one of the following values:</p>\n<pre><code>   string -&gt; \"blue\"\n   array -&gt; [\"blue\",\"black\",\"brown\"]\n   object -&gt; { \"R\": 100, \"G\": 200, \"B\": 150 }\n</code></pre>\n<p>The following table shows examples of rendering differences for each value.</p>\n<table>\n<thead>\n<tr>\n<th><a href=\"#styleValues\"><code>style</code></a></th>\n<th><code>explode</code></th>\n<th><code>empty</code></th>\n<th><code>string</code></th>\n<th><code>array</code></th>\n<th><code>object</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>matrix</td>\n<td>false</td>\n<td>;color</td>\n<td>;color=blue</td>\n<td>;color=blue,black,brown</td>\n<td>;color=R,100,G,200,B,150</td>\n</tr>\n<tr>\n<td>matrix</td>\n<td>true</td>\n<td>;color</td>\n<td>;color=blue</td>\n<td>;color=blue;color=black;color=brown</td>\n<td>;R=100;G=200;B=150</td>\n</tr>\n<tr>\n<td>label</td>\n<td>false</td>\n<td>.</td>\n<td>.blue</td>\n<td>.blue.black.brown</td>\n<td>.R.100.G.200.B.150</td>\n</tr>\n<tr>\n<td>label</td>\n<td>true</td>\n<td>.</td>\n<td>.blue</td>\n<td>.blue.black.brown</td>\n<td>.R=100.G=200.B=150</td>\n</tr>\n<tr>\n<td>form</td>\n<td>false</td>\n<td>color=</td>\n<td>color=blue</td>\n<td>color=blue,black,brown</td>\n<td>color=R,100,G,200,B,150</td>\n</tr>\n<tr>\n<td>form</td>\n<td>true</td>\n<td>color=</td>\n<td>color=blue</td>\n<td>color=blue&amp;color=black&amp;color=brown</td>\n<td>R=100&amp;G=200&amp;B=150</td>\n</tr>\n<tr>\n<td>simple</td>\n<td>false</td>\n<td>n/a</td>\n<td>blue</td>\n<td>blue,black,brown</td>\n<td>R,100,G,200,B,150</td>\n</tr>\n<tr>\n<td>simple</td>\n<td>true</td>\n<td>n/a</td>\n<td>blue</td>\n<td>blue,black,brown</td>\n<td>R=100,G=200,B=150</td>\n</tr>\n<tr>\n<td>spaceDelimited</td>\n<td>false</td>\n<td>n/a</td>\n<td>n/a</td>\n<td>blue%20black%20brown</td>\n<td>R%20100%20G%20200%20B%20150</td>\n</tr>\n<tr>\n<td>pipeDelimited</td>\n<td>false</td>\n<td>n/a</td>\n<td>n/a</td>\n<td>blue|black|brown</td>\n<td>R|100|G|200|B|150</td>\n</tr>\n<tr>\n<td>deepObject</td>\n<td>true</td>\n<td>n/a</td>\n<td>n/a</td>\n<td>n/a</td>\n<td>color[R]=100&amp;color[G]=200&amp;color[B]=150</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<h5 id=\"parameter-object-examples\">Parameter Object Examples</h5>\n<p>A header parameter with an array of 64 bit integer numbers:</p>\n<pre><code class=\"language-json\">{\n  \"name\": \"token\",\n  \"in\": \"header\",\n  \"description\": \"token to be passed as a header\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    }\n  },\n  \"style\": \"simple\"\n}\n</code></pre>\n<pre><code class=\"language-yaml\">name: token\nin: header\ndescription: token to be passed as a header\nrequired: true\nschema:\n  type: array\n  items:\n    type: integer\n    format: int64\nstyle: simple\n</code></pre>\n<p>A path parameter of a string value:</p>\n<pre><code class=\"language-json\">{\n  \"name\": \"username\",\n  \"in\": \"path\",\n  \"description\": \"username to fetch\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"string\"\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">name: username\nin: path\ndescription: username to fetch\nrequired: true\nschema:\n  type: string\n</code></pre>\n<p>An optional query parameter of a string value, allowing multiple values by repeating the query parameter:</p>\n<pre><code class=\"language-json\">{\n  \"name\": \"id\",\n  \"in\": \"query\",\n  \"description\": \"ID of the object to fetch\",\n  \"required\": false,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    }\n  },\n  \"style\": \"form\",\n  \"explode\": true\n}\n</code></pre>\n<pre><code class=\"language-yaml\">name: id\nin: query\ndescription: ID of the object to fetch\nrequired: false\nschema:\n  type: array\n  items:\n    type: string\nstyle: form\nexplode: true\n</code></pre>\n<p>A free-form query parameter, allowing undefined parameters of a specific type:</p>\n<pre><code class=\"language-json\">{\n  \"in\": \"query\",\n  \"name\": \"freeForm\",\n  \"schema\": {\n    \"type\": \"object\",\n    \"additionalProperties\": {\n      \"type\": \"integer\"\n    },\n  },\n  \"style\": \"form\"\n}\n</code></pre>\n<pre><code class=\"language-yaml\">in: query\nname: freeForm\nschema:\n  type: object\n  additionalProperties:\n    type: integer\nstyle: form\n</code></pre>\n<p>A complex parameter using <code>content</code> to define serialization:</p>\n<pre><code class=\"language-json\">{\n  \"in\": \"query\",\n  \"name\": \"coordinates\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"lat\",\n          \"long\"\n        ],\n        \"properties\": {\n          \"lat\": {\n            \"type\": \"number\"\n          },\n          \"long\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">in: query\nname: coordinates\ncontent:\n  application/json:\n    schema:\n      type: object\n      required:\n        - lat\n        - long\n      properties:\n        lat:\n          type: number\n        long:\n          type: number\n</code></pre>\n<h4 id=\"request-body-object\"><a name=\"requestBodyObject\"></a>Request Body Object</h4>\n<p>Describes a single request body.</p>\n<h5 id=\"fixed-fields_11\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"requestBodyDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A brief description of the request body. This could contain examples of use.  <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n<tr>\n<td><a name=\"requestBodyContent\"></a>content</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, <a href=\"#mediaTypeObject\">Media Type Object</a>]</td>\n<td><strong>REQUIRED</strong>. The content of the request body. The key is a media type or <a href=\"https://tools.ietf.org/html/rfc7231#appendix-D\">media type range</a> and the value describes it.  For requests that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*</td>\n</tr>\n<tr>\n<td><a name=\"requestBodyRequired\"></a>required</td>\n<td style=\"text-align: center;\"><code>boolean</code></td>\n<td>Determines if the request body is required in the request. Defaults to <code>false</code>.</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<h5 id=\"request-body-examples\">Request Body Examples</h5>\n<p>A request body with a referenced model definition.</p>\n<pre><code class=\"language-json\">{\n  \"description\": \"user to add to the system\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/User\"\n      },\n      \"examples\": {\n          \"user\" : {\n            \"summary\": \"User Example\", \n            \"externalValue\": \"https://foo.bar/examples/user-example.json\"\n          } \n        }\n    },\n    \"application/xml\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/User\"\n      },\n      \"examples\": {\n          \"user\" : {\n            \"summary\": \"User example in XML\",\n            \"externalValue\": \"https://foo.bar/examples/user-example.xml\"\n          }\n        }\n    },\n    \"text/plain\": {\n      \"examples\": {\n        \"user\" : {\n            \"summary\": \"User example in Plain text\",\n            \"externalValue\": \"https://foo.bar/examples/user-example.txt\" \n        }\n      } \n    },\n    \"*/*\": {\n      \"examples\": {\n        \"user\" : {\n            \"summary\": \"User example in other format\",\n            \"externalValue\": \"https://foo.bar/examples/user-example.whatever\"\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">description: user to add to the system\ncontent: \n  'application/json':\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: User Example\n        externalValue: 'https://foo.bar/examples/user-example.json'\n  'application/xml':\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: User example in XML\n        externalValue: 'https://foo.bar/examples/user-example.xml'\n  'text/plain':\n    examples:\n      user:\n        summary: User example in Plain text\n        externalValue: 'https://foo.bar/examples/user-example.txt'\n  '*/*':\n    examples:\n      user: \n        summary: User example in other format\n        externalValue: 'https://foo.bar/examples/user-example.whatever'\n</code></pre>\n<p>A body parameter that is an array of string values:</p>\n<pre><code class=\"language-json\">{\n  \"description\": \"user to add to the system\",\n  \"required\": true,\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">description: user to add to the system\nrequired: true\ncontent:\n  text/plain:\n    schema:\n      type: array\n      items:\n        type: string\n</code></pre>\n<h4 id=\"media-type-object\"><a name=\"mediaTypeObject\"></a>Media Type Object</h4>\n<p>Each Media Type Object provides schema and examples for the media type identified by its key.</p>\n<h5 id=\"fixed-fields_12\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"mediaTypeSchema\"></a>schema</td>\n<td style=\"text-align: center;\"><a href=\"#schemaObject\">Schema Object</a></td>\n<td>The schema defining the content of the request, response, or parameter.</td>\n</tr>\n<tr>\n<td><a name=\"mediaTypeExample\"></a>example</td>\n<td style=\"text-align: center;\">Any</td>\n<td>Example of the media type.  The example object SHOULD be in the correct format as specified by the media type.  The <code>example</code> field is mutually exclusive of the <code>examples</code> field.  Furthermore, if referencing a <code>schema</code> which contains an example, the <code>example</code> value SHALL <em>override</em> the example provided by the schema.</td>\n</tr>\n<tr>\n<td><a name=\"mediaTypeExamples\"></a>examples</td>\n<td style=\"text-align: center;\">Map[ <code>string</code>, <a href=\"#exampleObject\">Example Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>Examples of the media type.  Each example object SHOULD  match the media type and specified schema if present.  The <code>examples</code> field is mutually exclusive of the <code>example</code> field.  Furthermore, if referencing a <code>schema</code> which contains an example, the <code>examples</code> value SHALL <em>override</em> the example provided by the schema.</td>\n</tr>\n<tr>\n<td><a name=\"mediaTypeEncoding\"></a>encoding</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, <a href=\"#encodingObject\">Encoding Object</a>]</td>\n<td>A map between a property name and its encoding information. The key, being the property name, MUST exist in the schema as a property. The encoding object SHALL only apply to <code>requestBody</code> objects when the media type is <code>multipart</code> or <code>application/x-www-form-urlencoded</code>.</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<h5 id=\"media-type-examples\">Media Type Examples</h5>\n<pre><code class=\"language-json\">{\n  \"application/json\": {\n    \"schema\": {\n         \"$ref\": \"#/components/schemas/Pet\"\n    },\n    \"examples\": {\n      \"cat\" : {\n        \"summary\": \"An example of a cat\",\n        \"value\": \n          {\n            \"name\": \"Fluffy\",\n            \"petType\": \"Cat\",\n            \"color\": \"White\",\n            \"gender\": \"male\",\n            \"breed\": \"Persian\"\n          }\n      },\n      \"dog\": {\n        \"summary\": \"An example of a dog with a cat's name\",\n        \"value\" :  { \n          \"name\": \"Puma\",\n          \"petType\": \"Dog\",\n          \"color\": \"Black\",\n          \"gender\": \"Female\",\n          \"breed\": \"Mixed\"\n        },\n      \"frog\": {\n          \"$ref\": \"#/components/examples/frog-example\"\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">application/json: \n  schema:\n    $ref: \"#/components/schemas/Pet\"\n  examples:\n    cat:\n      summary: An example of a cat\n      value:\n        name: Fluffy\n        petType: Cat\n        color: White\n        gender: male\n        breed: Persian\n    dog:\n      summary: An example of a dog with a cat's name\n      value:\n        name: Puma\n        petType: Dog\n        color: Black\n        gender: Female\n        breed: Mixed\n    frog:\n      $ref: \"#/components/examples/frog-example\"\n</code></pre>\n<h5 id=\"considerations-for-file-uploads\">Considerations for File Uploads</h5>\n<p>In contrast with the 2.0 specification, <code>file</code> input/output content in OpenAPI is described with the same semantics as any other schema type.</p>\n<p>In contrast with the 3.0 specification, the <code>format</code> keyword has no effect on the content-encoding of the schema. JSON Schema offers a <code>contentEncoding</code> keyword, which may be used to specify the <code>Content-Encoding</code> for the schema. The <code>contentEncoding</code> keyword supports all encodings defined in <a href=\"https://tools.ietf.org/html/rfc4648\">RFC4648</a>, including \"base64\" and \"base64url\", as well as \"quoted-printable\" from <a href=\"https://tools.ietf.org/html/rfc2045#section-6.7\">RFC2045</a>. The encoding specified by the <code>contentEncoding</code> keyword is independent of an encoding specified by the <code>Content-Type</code> header in the request or response or metadata of a multipart body -- when both are present, the encoding specified in the <code>contentEncoding</code> is applied first and then the encoding specified in the <code>Content-Type</code> header.</p>\n<p>JSON Schema also offers a <code>contentMediaType</code> keyword.  However, when the media type is already specified by the Media Type Object's key, or by the <code>contentType</code> field of an <a href=\"#encodingObject\">Encoding Object</a>, the <code>contentMediaType</code> keyword SHALL be ignored if present.</p>\n<p>Examples:</p>\n<p>Content transferred in binary (octet-stream) MAY omit <code>schema</code>:</p>\n<pre><code class=\"language-yaml\"># a PNG image as a binary file:\ncontent:\n    image/png: {}\n</code></pre>\n<pre><code class=\"language-yaml\"># an arbitrary binary file:\ncontent:\n    application/octet-stream: {}\n</code></pre>\n<p>Binary content transferred with base64 encoding:</p>\n<pre><code class=\"language-yaml\">content:\n    image/png:\n        schema:\n            type: string\n            contentMediaType: image/png\n            contentEncoding: base64\n</code></pre>\n<p>Note that the <code>Content-Type</code> remains <code>image/png</code>, describing the semantics of the payload.  The JSON Schema <code>type</code> and <code>contentEncoding</code> fields explain that the payload is transferred as text.  The JSON Schema <code>contentMediaType</code> is technically redundant, but can be used by JSON Schema tools that may not be aware of the OpenAPI context.</p>\n<p>These examples apply to either input payloads of file uploads or response payloads.</p>\n<p>A <code>requestBody</code> for submitting a file in a <code>POST</code> operation may look like the following example:</p>\n<pre><code class=\"language-yaml\">requestBody:\n  content:\n    application/octet-stream: {}\n</code></pre>\n<p>In addition, specific media types MAY be specified:</p>\n<pre><code class=\"language-yaml\"># multiple, specific media types may be specified:\nrequestBody:\n  content:\n    # a binary file of type png or jpeg\n    image/jpeg: {}\n    image/png: {}\n</code></pre>\n<p>To upload multiple files, a <code>multipart</code> media type MUST be used:</p>\n<pre><code class=\"language-yaml\">requestBody:\n  content:\n    multipart/form-data:\n      schema:\n        properties:\n          # The property name 'file' will be used for all files.\n          file:\n            type: array\n            items: {}\n</code></pre>\n<p>As seen in the section on <code>multipart/form-data</code> below, the empty schema for <code>items</code> indicates a media type of <code>application/octet-stream</code>.</p>\n<h5 id=\"support-for-x-www-form-urlencoded-request-bodies\">Support for x-www-form-urlencoded Request Bodies</h5>\n<p>To submit content using form url encoding via <a href=\"https://tools.ietf.org/html/rfc1866\">RFC1866</a>, the following\ndefinition may be used:</p>\n<pre><code class=\"language-yaml\">requestBody:\n  content:\n    application/x-www-form-urlencoded:\n      schema:\n        type: object\n        properties:\n          id:\n            type: string\n            format: uuid\n          address:\n            # complex types are stringified to support RFC 1866\n            type: object\n            properties: {}\n</code></pre>\n<p>In this example, the contents in the <code>requestBody</code> MUST be stringified per <a href=\"https://tools.ietf.org/html/rfc1866/\">RFC1866</a> when passed to the server.  In addition, the <code>address</code> field complex object will be stringified.</p>\n<p>When passing complex objects in the <code>application/x-www-form-urlencoded</code> content type, the default serialization strategy of such properties is described in the <a href=\"#encodingObject\"><code>Encoding Object</code></a>'s <a href=\"#encodingStyle\"><code>style</code></a> property as <code>form</code>.</p>\n<h5 id=\"special-considerations-for-multipart-content\">Special Considerations for <code>multipart</code> Content</h5>\n<p>It is common to use <code>multipart/form-data</code> as a <code>Content-Type</code> when transferring request bodies to operations.  In contrast to 2.0, a <code>schema</code> is REQUIRED to define the input parameters to the operation when using <code>multipart</code> content.  This supports complex structures as well as supporting mechanisms for multiple file uploads.</p>\n<p>In a <code>multipart/form-data</code> request body, each schema property, or each element of a schema array property, takes a section in the payload with an internal header as defined by <a href=\"https://tools.ietf.org/html/rfc7578\">RFC7578</a>. The serialization strategy for each property of a <code>multipart/form-data</code> request body can be specified in an associated <a href=\"#encodingObject\"><code>Encoding Object</code></a>.</p>\n<p>When passing in <code>multipart</code> types, boundaries MAY be used to separate sections of the content being transferred \u2013 thus, the following default <code>Content-Type</code>s are defined for <code>multipart</code>:</p>\n<ul>\n<li>If the property is a primitive, or an array of primitive values, the default Content-Type is <code>text/plain</code></li>\n<li>If the property is complex, or an array of complex values, the default Content-Type is <code>application/json</code></li>\n<li>If the property is a <code>type: string</code> with a <code>contentEncoding</code>, the default Content-Type is <code>application/octet-stream</code></li>\n</ul>\n<p>Per the JSON Schema specification, <code>contentMediaType</code> without <code>contentEncoding</code> present is treated as if <code>contentEncoding: identity</code> were present.  While useful for embedding text documents such as <code>text/html</code> into JSON strings, it is not useful for a <code>multipart/form-data</code> part, as it just causes the document to be treated as <code>text/plain</code> instead of its actual media type.  Use the Encoding Object without <code>contentMediaType</code> if no <code>contentEncoding</code> is required.</p>\n<p>Examples:</p>\n<pre><code class=\"language-yaml\">requestBody:\n  content:\n    multipart/form-data:\n      schema:\n        type: object\n        properties:\n          id:\n            type: string\n            format: uuid\n          address:\n            # default Content-Type for objects is `application/json`\n            type: object\n            properties: {}\n          profileImage:\n            # Content-Type for application-level encoded resource is `text/plain`\n            type: string\n            contentMediaType: image/png\n            contentEncoding: base64\n          children:\n            # default Content-Type for arrays is based on the _inner_ type (`text/plain` here)\n            type: array\n            items:\n              type: string\n          addresses:\n            # default Content-Type for arrays is based on the _inner_ type (object shown, so `application/json` in this example)\n            type: array\n            items:\n              type: object\n              $ref: '#/components/schemas/Address'\n</code></pre>\n<p>An <code>encoding</code> attribute is introduced to give you control over the serialization of parts of <code>multipart</code> request bodies.  This attribute is <em>only</em> applicable to <code>multipart</code> and <code>application/x-www-form-urlencoded</code> request bodies.</p>\n<h4 id=\"encoding-object\"><a name=\"encodingObject\"></a>Encoding Object</h4>\n<p>A single encoding definition applied to a single schema property.</p>\n<h5 id=\"fixed-fields_13\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"encodingContentType\"></a>contentType</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>The Content-Type for encoding a specific property. Default value depends on the property type: for <code>object</code> - <code>application/json</code>;  for <code>array</code> \u2013 the default is defined based on the inner type; for all other cases the default is <code>application/octet-stream</code>. The value can be a specific media type (e.g. <code>application/json</code>), a wildcard media type (e.g. <code>image/*</code>), or a comma-separated list of the two types.</td>\n</tr>\n<tr>\n<td><a name=\"encodingHeaders\"></a>headers</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, <a href=\"#headerObject\">Header Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>A map allowing additional information to be provided as headers, for example <code>Content-Disposition</code>.  <code>Content-Type</code> is described separately and SHALL be ignored in this section. This property SHALL be ignored if the request body media type is not a <code>multipart</code>.</td>\n</tr>\n<tr>\n<td><a name=\"encodingStyle\"></a>style</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>Describes how a specific property value will be serialized depending on its type.  See <a href=\"#parameterObject\">Parameter Object</a> for details on the <a href=\"#parameterStyle\"><code>style</code></a> property. The behavior follows the same values as <code>query</code> parameters, including default values. This property SHALL be ignored if the request body media type is not <code>application/x-www-form-urlencoded</code> or <code>multipart/form-data</code>. If a value is explicitly defined, then the value of <a href=\"#encodingContentType\"><code>contentType</code></a> (implicit or explicit) SHALL be ignored.</td>\n</tr>\n<tr>\n<td><a name=\"encodingExplode\"></a>explode</td>\n<td style=\"text-align: center;\"><code>boolean</code></td>\n<td>When this is true, property values of type <code>array</code> or <code>object</code> generate separate parameters for each value of the array, or key-value-pair of the map.  For other types of properties this property has no effect. When <a href=\"#encodingStyle\"><code>style</code></a> is <code>form</code>, the default value is <code>true</code>. For all other styles, the default value is <code>false</code>. This property SHALL be ignored if the request body media type is not <code>application/x-www-form-urlencoded</code> or <code>multipart/form-data</code>. If a value is explicitly defined, then the value of <a href=\"#encodingContentType\"><code>contentType</code></a> (implicit or explicit) SHALL be ignored.</td>\n</tr>\n<tr>\n<td><a name=\"encodingAllowReserved\"></a>allowReserved</td>\n<td style=\"text-align: center;\"><code>boolean</code></td>\n<td>Determines whether the parameter value SHOULD allow reserved characters, as defined by <a href=\"https://tools.ietf.org/html/rfc3986#section-2.2\">RFC3986</a> <code>:/?#[]@!$&amp;'()*+,;=</code> to be included without percent-encoding. The default value is <code>false</code>. This property SHALL be ignored if the request body media type is not <code>application/x-www-form-urlencoded</code> or <code>multipart/form-data</code>. If a value is explicitly defined, then the value of <a href=\"#encodingContentType\"><code>contentType</code></a> (implicit or explicit) SHALL be ignored.</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<h5 id=\"encoding-object-example\">Encoding Object Example</h5>\n<pre><code class=\"language-yaml\">requestBody:\n  content:\n    multipart/form-data:\n      schema:\n        type: object\n        properties:\n          id:\n            # default is text/plain\n            type: string\n            format: uuid\n          address:\n            # default is application/json\n            type: object\n            properties: {}\n          historyMetadata:\n            # need to declare XML format!\n            description: metadata in XML format\n            type: object\n            properties: {}\n          profileImage: {}\n      encoding:\n        historyMetadata:\n          # require XML Content-Type in utf-8 encoding\n          contentType: application/xml; charset=utf-8\n        profileImage:\n          # only accept png/jpeg\n          contentType: image/png, image/jpeg\n          headers:\n            X-Rate-Limit-Limit:\n              description: The number of allowed requests in the current period\n              schema:\n                type: integer\n</code></pre>\n<h4 id=\"responses-object\"><a name=\"responsesObject\"></a>Responses Object</h4>\n<p>A container for the expected responses of an operation.\nThe container maps a HTTP response code to the expected response.</p>\n<p>The documentation is not necessarily expected to cover all possible HTTP response codes because they may not be known in advance.\nHowever, documentation is expected to cover a successful operation response and any known errors.</p>\n<p>The <code>default</code> MAY be used as a default response object for all HTTP codes \nthat are not covered individually by the <code>Responses Object</code>.</p>\n<p>The <code>Responses Object</code> MUST contain at least one response code, and if only one\nresponse code is provided it SHOULD be the response for a successful operation\ncall.</p>\n<h5 id=\"fixed-fields_14\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"responsesDefault\"></a>default</td>\n<td style=\"text-align: center;\"><a href=\"#responseObject\">Response Object</a> | <a href=\"#referenceObject\">Reference Object</a></td>\n<td>The documentation of responses other than the ones declared for specific HTTP response codes. Use this field to cover undeclared responses.</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"patterned-fields_1\">Patterned Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Pattern</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"responsesCode\"></a><a href=\"#httpCodes\">HTTP Status Code</a></td>\n<td style=\"text-align: center;\"><a href=\"#responseObject\">Response Object</a> | <a href=\"#referenceObject\">Reference Object</a></td>\n<td>Any <a href=\"#httpCodes\">HTTP status code</a> can be used as the property name, but only one property per code, to describe the expected response for that HTTP status code. This field MUST be enclosed in quotation marks (for example, \"200\") for compatibility between JSON and YAML. To define a range of response codes, this field MAY contain the uppercase wildcard character <code>X</code>. For example, <code>2XX</code> represents all response codes between <code>[200-299]</code>. Only the following range definitions are allowed: <code>1XX</code>, <code>2XX</code>, <code>3XX</code>, <code>4XX</code>, and <code>5XX</code>. If a response is defined using an explicit code, the explicit code definition takes precedence over the range definition for that code.</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<h5 id=\"responses-object-example\">Responses Object Example</h5>\n<p>A 200 response for a successful operation and a default response for others (implying an error):</p>\n<pre><code class=\"language-json\">{\n  \"200\": {\n    \"description\": \"a pet to be returned\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Pet\"\n        }\n      }\n    }\n  },\n  \"default\": {\n    \"description\": \"Unexpected error\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/ErrorModel\"\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">'200':\n  description: a pet to be returned\n  content: \n    application/json:\n      schema:\n        $ref: '#/components/schemas/Pet'\ndefault:\n  description: Unexpected error\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/ErrorModel'\n</code></pre>\n<h4 id=\"response-object\"><a name=\"responseObject\"></a>Response Object</h4>\n<p>Describes a single response from an API Operation, including design-time, static \n<code>links</code> to operations based on the response.</p>\n<h5 id=\"fixed-fields_15\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"responseDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. A description of the response. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n<tr>\n<td><a name=\"responseHeaders\"></a>headers</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, <a href=\"#headerObject\">Header Object</a>  | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>Maps a header name to its definition. <a href=\"https://tools.ietf.org/html/rfc7230#page-22\">RFC7230</a> states header names are case insensitive. If a response header is defined with the name <code>\"Content-Type\"</code>, it SHALL be ignored.</td>\n</tr>\n<tr>\n<td><a name=\"responseContent\"></a>content</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, <a href=\"#mediaTypeObject\">Media Type Object</a>]</td>\n<td>A map containing descriptions of potential response payloads. The key is a media type or <a href=\"https://tools.ietf.org/html/rfc7231#appendix-D\">media type range</a> and the value describes it.  For responses that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*</td>\n</tr>\n<tr>\n<td><a name=\"responseLinks\"></a>links</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, <a href=\"#linkObject\">Link Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>A map of operations links that can be followed from the response. The key of the map is a short name for the link, following the naming constraints of the names for <a href=\"#componentsObject\">Component Objects</a>.</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<h5 id=\"response-object-examples\">Response Object Examples</h5>\n<p>Response of an array of a complex type:</p>\n<pre><code class=\"language-json\">{\n  \"description\": \"A complex object array response\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/VeryComplexType\"\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">description: A complex object array response\ncontent: \n  application/json:\n    schema: \n      type: array\n      items:\n        $ref: '#/components/schemas/VeryComplexType'\n</code></pre>\n<p>Response with a string type:</p>\n<pre><code class=\"language-json\">{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n\n}\n</code></pre>\n<pre><code class=\"language-yaml\">description: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n</code></pre>\n<p>Plain text response with headers:</p>\n<pre><code class=\"language-json\">{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\",\n        \"example\": \"whoa!\"\n      }\n    }\n  },\n  \"headers\": {\n    \"X-Rate-Limit-Limit\": {\n      \"description\": \"The number of allowed requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Remaining\": {\n      \"description\": \"The number of remaining requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Reset\": {\n      \"description\": \"The number of seconds left in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">description: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n    example: 'whoa!'\nheaders:\n  X-Rate-Limit-Limit:\n    description: The number of allowed requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Remaining:\n    description: The number of remaining requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Reset:\n    description: The number of seconds left in the current period\n    schema:\n      type: integer\n</code></pre>\n<p>Response with no return value:</p>\n<pre><code class=\"language-json\">{\n  \"description\": \"object created\"\n}\n</code></pre>\n<pre><code class=\"language-yaml\">description: object created\n</code></pre>\n<h4 id=\"callback-object\"><a name=\"callbackObject\"></a>Callback Object</h4>\n<p>A map of possible out-of band callbacks related to the parent operation.\nEach value in the map is a <a href=\"#pathItemObject\">Path Item Object</a> that describes a set of requests that may be initiated by the API provider and the expected responses.\nThe key value used to identify the path item object is an expression, evaluated at runtime, that identifies a URL to use for the callback operation.</p>\n<p>To describe incoming requests from the API provider independent from another API call, use the <a href=\"#oasWebhooks\"><code>webhooks</code></a> field.</p>\n<h5 id=\"patterned-fields_2\">Patterned Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Pattern</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"callbackExpression\"></a>{expression}</td>\n<td style=\"text-align: center;\"><a href=\"#pathItemObject\">Path Item Object</a> | <a href=\"#referenceObject\">Reference Object</a></td>\n<td>A Path Item Object, or a reference to one, used to define a callback request and expected responses.  A <a href=\"../examples/v3.0/callback-example.yaml\">complete example</a> is available.</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<h5 id=\"key-expression\">Key Expression</h5>\n<p>The key that identifies the <a href=\"#pathItemObject\">Path Item Object</a> is a <a href=\"#runtimeExpression\">runtime expression</a> that can be evaluated in the context of a runtime HTTP request/response to identify the URL to be used for the callback request.\nA simple example might be <code>$request.body#/url</code>.\nHowever, using a <a href=\"#runtimeExpression\">runtime expression</a> the complete HTTP message can be accessed.\nThis includes accessing any part of a body that a JSON Pointer <a href=\"https://tools.ietf.org/html/rfc6901\">RFC6901</a> can reference. </p>\n<p>For example, given the following HTTP request:</p>\n<pre><code class=\"language-http\">POST /subscribe/myevent?queryUrl=https://clientdomain.com/stillrunning HTTP/1.1\nHost: example.org\nContent-Type: application/json\nContent-Length: 187\n\n{\n  \"failedUrl\" : \"https://clientdomain.com/failed\",\n  \"successUrls\" : [\n    \"https://clientdomain.com/fast\",\n    \"https://clientdomain.com/medium\",\n    \"https://clientdomain.com/slow\"\n  ] \n}\n\n201 Created\nLocation: https://example.org/subscription/1\n</code></pre>\n<p>The following examples show how the various expressions evaluate, assuming the callback operation has a path parameter named <code>eventType</code> and a query parameter named <code>queryUrl</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th style=\"text-align: left;\">Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$url</td>\n<td style=\"text-align: left;\">https://example.org/subscribe/myevent?queryUrl=https://clientdomain.com/stillrunning</td>\n</tr>\n<tr>\n<td>$method</td>\n<td style=\"text-align: left;\">POST</td>\n</tr>\n<tr>\n<td>$request.path.eventType</td>\n<td style=\"text-align: left;\">myevent</td>\n</tr>\n<tr>\n<td>$request.query.queryUrl</td>\n<td style=\"text-align: left;\">https://clientdomain.com/stillrunning</td>\n</tr>\n<tr>\n<td>$request.header.content-Type</td>\n<td style=\"text-align: left;\">application/json</td>\n</tr>\n<tr>\n<td>$request.body#/failedUrl</td>\n<td style=\"text-align: left;\">https://clientdomain.com/failed</td>\n</tr>\n<tr>\n<td>$request.body#/successUrls/2</td>\n<td style=\"text-align: left;\">https://clientdomain.com/medium</td>\n</tr>\n<tr>\n<td>$response.header.Location</td>\n<td style=\"text-align: left;\">https://example.org/subscription/1</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"callback-object-examples\">Callback Object Examples</h5>\n<p>The following example uses the user provided <code>queryUrl</code> query string parameter to define the callback URL.  This is an example of how to use a callback object to describe a WebHook callback that goes with the subscription operation to enable registering for the WebHook.</p>\n<pre><code class=\"language-yaml\">myCallback:\n  '{$request.query.queryUrl}':\n    post:\n      requestBody:\n        description: Callback payload\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/SomePayload'\n      responses:\n        '200':\n          description: callback successfully processed\n</code></pre>\n<p>The following example shows a callback where the server is hard-coded, but the query string parameters are populated from the <code>id</code> and <code>email</code> property in the request body.</p>\n<pre><code class=\"language-yaml\">transactionCallback:\n  'http://notificationServer.com?transactionId={$request.body#/id}&amp;email={$request.body#/email}':\n    post:\n      requestBody:\n        description: Callback payload\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/SomePayload'\n      responses:\n        '200':\n          description: callback successfully processed\n</code></pre>\n<h4 id=\"example-object\"><a name=\"exampleObject\"></a>Example Object</h4>\n<h5 id=\"fixed-fields_16\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"exampleSummary\"></a>summary</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>Short description for the example.</td>\n</tr>\n<tr>\n<td><a name=\"exampleDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>Long description for the example. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n<tr>\n<td><a name=\"exampleValue\"></a>value</td>\n<td style=\"text-align: center;\">Any</td>\n<td>Embedded literal example. The <code>value</code> field and <code>externalValue</code> field are mutually exclusive. To represent examples of media types that cannot naturally represented in JSON or YAML, use a string value to contain the example, escaping where necessary.</td>\n</tr>\n<tr>\n<td><a name=\"exampleExternalValue\"></a>externalValue</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A URI that points to the literal example. This provides the capability to reference examples that cannot easily be included in JSON or YAML documents.  The <code>value</code> field and <code>externalValue</code> field are mutually exclusive. See the rules for resolving <a href=\"#relativeReferencesURI\">Relative References</a>.</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<p>In all cases, the example value is expected to be compatible with the type schema \nof its associated value.  Tooling implementations MAY choose to \nvalidate compatibility automatically, and reject the example value(s) if incompatible.</p>\n<h5 id=\"example-object-examples\">Example Object Examples</h5>\n<p>In a request body:</p>\n<pre><code class=\"language-yaml\">requestBody:\n  content:\n    'application/json':\n      schema:\n        $ref: '#/components/schemas/Address'\n      examples: \n        foo:\n          summary: A foo example\n          value: {\"foo\": \"bar\"}\n        bar:\n          summary: A bar example\n          value: {\"bar\": \"baz\"}\n    'application/xml':\n      examples: \n        xmlExample:\n          summary: This is an example in XML\n          externalValue: 'https://example.org/examples/address-example.xml'\n    'text/plain':\n      examples:\n        textExample: \n          summary: This is a text example\n          externalValue: 'https://foo.bar/examples/address-example.txt'\n</code></pre>\n<p>In a parameter:</p>\n<pre><code class=\"language-yaml\">parameters:\n  - name: 'zipCode'\n    in: 'query'\n    schema:\n      type: 'string'\n      format: 'zip-code'\n    examples:\n      zip-example: \n        $ref: '#/components/examples/zip-example'\n</code></pre>\n<p>In a response:</p>\n<pre><code class=\"language-yaml\">responses:\n  '200':\n    description: your car appointment has been booked\n    content: \n      application/json:\n        schema:\n          $ref: '#/components/schemas/SuccessResponse'\n        examples:\n          confirmation-success:\n            $ref: '#/components/examples/confirmation-success'\n</code></pre>\n<h4 id=\"link-object\"><a name=\"linkObject\"></a>Link Object</h4>\n<p>The <code>Link object</code> represents a possible design-time link for a response.\nThe presence of a link does not guarantee the caller's ability to successfully invoke it, rather it provides a known relationship and traversal mechanism between responses and other operations.</p>\n<p>Unlike <em>dynamic</em> links (i.e. links provided <strong>in</strong> the response payload), the OAS linking mechanism does not require link information in the runtime response.</p>\n<p>For computing links, and providing instructions to execute them, a <a href=\"#runtimeExpression\">runtime expression</a> is used for accessing values in an operation and using them as parameters while invoking the linked operation.  </p>\n<h5 id=\"fixed-fields_17\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"linkOperationRef\"></a>operationRef</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A relative or absolute URI reference to an OAS operation. This field is mutually exclusive of the <code>operationId</code> field, and MUST point to an <a href=\"#operationObject\">Operation Object</a>. Relative <code>operationRef</code> values MAY be used to locate an existing <a href=\"#operationObject\">Operation Object</a> in the OpenAPI definition. See the rules for resolving <a href=\"#relativeReferencesURI\">Relative References</a>.</td>\n</tr>\n<tr>\n<td><a name=\"linkOperationId\"></a>operationId</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>The name of an <em>existing</em>, resolvable OAS operation, as defined with a unique <code>operationId</code>.  This field is mutually exclusive of the <code>operationRef</code> field.</td>\n</tr>\n<tr>\n<td><a name=\"linkParameters\"></a>parameters</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, Any | <a href=\"#runtimeExpression\">{expression}</a>]</td>\n<td>A map representing parameters to pass to an operation as specified with <code>operationId</code> or identified via <code>operationRef</code>. The key is the parameter name to be used, whereas the value can be a constant or an expression to be evaluated and passed to the linked operation.  The parameter name can be qualified using the <a href=\"#parameterIn\">parameter location</a> <code>[{in}.]{name}</code> for operations that use the same parameter name in different locations (e.g. path.id).</td>\n</tr>\n<tr>\n<td><a name=\"linkRequestBody\"></a>requestBody</td>\n<td style=\"text-align: center;\">Any | <a href=\"#runtimeExpression\">{expression}</a></td>\n<td>A literal value or <a href=\"#runtimeExpression\">{expression}</a> to use as a request body when calling the target operation.</td>\n</tr>\n<tr>\n<td><a name=\"linkDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A description of the link. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n<tr>\n<td><a name=\"linkServer\"></a>server</td>\n<td style=\"text-align: center;\"><a href=\"#serverObject\">Server Object</a></td>\n<td>A server object to be used by the target operation.</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<p>A linked operation MUST be identified using either an <code>operationRef</code> or <code>operationId</code>.\nIn the case of an <code>operationId</code>, it MUST be unique and resolved in the scope of the OAS document.\nBecause of the potential for name clashes, the <code>operationRef</code> syntax is preferred \nfor OpenAPI documents with external references.</p>\n<h5 id=\"examples\">Examples</h5>\n<p>Computing a link from a request operation where the <code>$request.path.id</code> is used to pass a request parameter to the linked operation.</p>\n<pre><code class=\"language-yaml\">paths:\n  /users/{id}:\n    parameters:\n    - name: id\n      in: path\n      required: true\n      description: the user identifier, as userId \n      schema:\n        type: string\n    get:\n      responses:\n        '200':\n          description: the user being returned\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  uuid: # the unique user id\n                    type: string\n                    format: uuid\n          links:\n            address:\n              # the target link operationId\n              operationId: getUserAddress\n              parameters:\n                # get the `id` field from the request path parameter named `id`\n                userId: $request.path.id\n  # the path item of the linked operation\n  /users/{userid}/address:\n    parameters:\n    - name: userid\n      in: path\n      required: true\n      description: the user identifier, as userId \n      schema:\n        type: string\n    # linked operation\n    get:\n      operationId: getUserAddress\n      responses:\n        '200':\n          description: the user's address\n</code></pre>\n<p>When a runtime expression fails to evaluate, no parameter value is passed to the target operation.</p>\n<p>Values from the response body can be used to drive a linked operation.</p>\n<pre><code class=\"language-yaml\">links:\n  address:\n    operationId: getUserAddressByUUID\n    parameters:\n      # get the `uuid` field from the `uuid` field in the response body\n      userUuid: $response.body#/uuid\n</code></pre>\n<p>Clients follow all links at their discretion. \nNeither permissions, nor the capability to make a successful call to that link, is guaranteed \nsolely by the existence of a relationship.</p>\n<h5 id=\"operationref-examples\">OperationRef Examples</h5>\n<p>As references to <code>operationId</code> MAY NOT be possible (the <code>operationId</code> is an optional \nfield in an <a href=\"#operationObject\">Operation Object</a>), references MAY also be made through a relative <code>operationRef</code>:</p>\n<pre><code class=\"language-yaml\">links:\n  UserRepositories:\n    # returns array of '#/components/schemas/repository'\n    operationRef: '#/paths/~12.0~1repositories~1{username}/get'\n    parameters:\n      username: $response.body#/username\n</code></pre>\n<p>or an absolute <code>operationRef</code>:</p>\n<pre><code class=\"language-yaml\">links:\n  UserRepositories:\n    # returns array of '#/components/schemas/repository'\n    operationRef: 'https://na2.gigantic-server.com/#/paths/~12.0~1repositories~1{username}/get'\n    parameters:\n      username: $response.body#/username\n</code></pre>\n<p>Note that in the use of <code>operationRef</code>, the <em>escaped forward-slash</em> is necessary when \nusing JSON references.</p>\n<h5 id=\"runtime-expressions\"><a name=\"runtimeExpression\"></a>Runtime Expressions</h5>\n<p>Runtime expressions allow defining values based on information that will only be available within the HTTP message in an actual API call.\nThis mechanism is used by <a href=\"#linkObject\">Link Objects</a> and <a href=\"#callbackObject\">Callback Objects</a>.</p>\n<p>The runtime expression is defined by the following <a href=\"https://tools.ietf.org/html/rfc5234\">ABNF</a> syntax</p>\n<pre><code class=\"language-abnf\">      expression = ( \"$url\" / \"$method\" / \"$statusCode\" / \"$request.\" source / \"$response.\" source )\n      source = ( header-reference / query-reference / path-reference / body-reference )\n      header-reference = \"header.\" token\n      query-reference = \"query.\" name  \n      path-reference = \"path.\" name\n      body-reference = \"body\" [\"#\" json-pointer ]\n      json-pointer    = *( \"/\" reference-token )\n      reference-token = *( unescaped / escaped )\n      unescaped       = %x00-2E / %x30-7D / %x7F-10FFFF\n         ; %x2F ('/') and %x7E ('~') are excluded from 'unescaped'\n      escaped         = \"~\" ( \"0\" / \"1\" )\n        ; representing '~' and '/', respectively\n      name = *( CHAR )\n      token = 1*tchar\n      tchar = \"!\" / \"#\" / \"$\" / \"%\" / \"&amp;\" / \"'\" / \"*\" / \"+\" / \"-\" / \".\" /\n        \"^\" / \"_\" / \"`\" / \"|\" / \"~\" / DIGIT / ALPHA\n</code></pre>\n<p>Here, <code>json-pointer</code> is taken from <a href=\"https://tools.ietf.org/html/rfc6901\">RFC6901</a>, <code>char</code> from <a href=\"https://tools.ietf.org/html/rfc7159#section-7\">RFC7159</a> and <code>token</code> from <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.6\">RFC7230</a>.</p>\n<p>The <code>name</code> identifier is case-sensitive, whereas <code>token</code> is not. </p>\n<p>The table below provides examples of runtime expressions and examples of their use in a value:</p>\n<h5 id=\"examples_1\"><a name=\"runtimeExpressionExamples\"></a>Examples</h5>\n<p>Source Location | example expression  | notes\n---|:---|:---|\nHTTP Method            | <code>$method</code>         | The allowable values for the <code>$method</code> will be those for the HTTP operation.\nRequested media type | <code>$request.header.accept</code>        |<br/>\nRequest parameter      | <code>$request.path.id</code>        | Request parameters MUST be declared in the <code>parameters</code> section of the parent operation or they cannot be evaluated. This includes request headers.\nRequest body property   | <code>$request.body#/user/uuid</code>   | In operations which accept payloads, references may be made to portions of the <code>requestBody</code> or the entire body.\nRequest URL            | <code>$url</code>            |<br/>\nResponse value         | <code>$response.body#/status</code>       |  In operations which return payloads, references may be made to portions of the response body or the entire body.\nResponse header        | <code>$response.header.Server</code> |  Single header values only are available</p>\n<p>Runtime expressions preserve the type of the referenced value.\nExpressions can be embedded into string values by surrounding the expression with <code>{}</code> curly braces.</p>\n<h4 id=\"header-object\"><a name=\"headerObject\"></a>Header Object</h4>\n<p>The Header Object follows the structure of the <a href=\"#parameterObject\">Parameter Object</a> with the following changes:</p>\n<ol>\n<li><code>name</code> MUST NOT be specified, it is given in the corresponding <code>headers</code> map.</li>\n<li><code>in</code> MUST NOT be specified, it is implicitly in <code>header</code>.</li>\n<li>All traits that are affected by the location MUST be applicable to a location of <code>header</code> (for example, <a href=\"#parameterStyle\"><code>style</code></a>).</li>\n</ol>\n<h5 id=\"header-object-example\">Header Object Example</h5>\n<p>A simple header of type <code>integer</code>:</p>\n<pre><code class=\"language-json\">{\n  \"description\": \"The number of allowed requests in the current period\",\n  \"schema\": {\n    \"type\": \"integer\"\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">description: The number of allowed requests in the current period\nschema:\n  type: integer\n</code></pre>\n<h4 id=\"tag-object\"><a name=\"tagObject\"></a>Tag Object</h4>\n<p>Adds metadata to a single tag that is used by the <a href=\"#operationObject\">Operation Object</a>.\nIt is not mandatory to have a Tag Object per tag defined in the Operation Object instances.</p>\n<h5 id=\"fixed-fields_18\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"tagName\"></a>name</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. The name of the tag.</td>\n</tr>\n<tr>\n<td><a name=\"tagDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A description for the tag. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n<tr>\n<td><a name=\"tagExternalDocs\"></a>externalDocs</td>\n<td style=\"text-align: center;\"><a href=\"#externalDocumentationObject\">External Documentation Object</a></td>\n<td>Additional external documentation for this tag.</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<h5 id=\"tag-object-example\">Tag Object Example</h5>\n<pre><code class=\"language-json\">{\n    \"name\": \"pet\",\n    \"description\": \"Pets operations\"\n}\n</code></pre>\n<pre><code class=\"language-yaml\">name: pet\ndescription: Pets operations\n</code></pre>\n<h4 id=\"reference-object\"><a name=\"referenceObject\"></a>Reference Object</h4>\n<p>A simple object to allow referencing other components in the OpenAPI document, internally and externally.</p>\n<p>The <code>$ref</code> string value contains a URI <a href=\"https://tools.ietf.org/html/rfc3986\">RFC3986</a>, which identifies the location of the value being referenced.</p>\n<p>See the rules for resolving <a href=\"#relativeReferencesURI\">Relative References</a>.</p>\n<h5 id=\"fixed-fields_19\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"referenceRef\"></a>$ref</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. The reference identifier. This MUST be in the form of a URI.</td>\n</tr>\n<tr>\n<td><a name=\"referenceSummary\"></a>summary</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A short summary which by default SHOULD override that of the referenced component. If the referenced object-type does not allow a <code>summary</code> field, then this field has no effect.</td>\n</tr>\n<tr>\n<td><a name=\"referenceDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A description which by default SHOULD override that of the referenced component. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation. If the referenced object-type does not allow a <code>description</code> field, then this field has no effect.</td>\n</tr>\n</tbody>\n</table>\n<p>This object cannot be extended with additional properties and any properties added SHALL be ignored.</p>\n<p>Note that this restriction on additional properties is a difference between Reference Objects and <a href=\"#schemaObject\"><code>Schema Objects</code></a> that contain a <code>$ref</code> keyword.</p>\n<h5 id=\"reference-object-example\">Reference Object Example</h5>\n<pre><code class=\"language-json\">{\n    \"$ref\": \"#/components/schemas/Pet\"\n}\n</code></pre>\n<pre><code class=\"language-yaml\">$ref: '#/components/schemas/Pet'\n</code></pre>\n<h5 id=\"relative-schema-document-example\">Relative Schema Document Example</h5>\n<pre><code class=\"language-json\">{\n  \"$ref\": \"Pet.json\"\n}\n</code></pre>\n<pre><code class=\"language-yaml\">$ref: Pet.yaml\n</code></pre>\n<h5 id=\"relative-documents-with-embedded-schema-example\">Relative Documents With Embedded Schema Example</h5>\n<pre><code class=\"language-json\">{\n  \"$ref\": \"definitions.json#/Pet\"\n}\n</code></pre>\n<pre><code class=\"language-yaml\">$ref: definitions.yaml#/Pet\n</code></pre>\n<h4 id=\"schema-object\"><a name=\"schemaObject\"></a>Schema Object</h4>\n<p>The Schema Object allows the definition of input and output data types.\nThese types can be objects, but also primitives and arrays. This object is a superset of the <a href=\"https://tools.ietf.org/html/draft-bhutton-json-schema-00\">JSON Schema Specification Draft 2020-12</a>.</p>\n<p>For more information about the properties, see <a href=\"https://tools.ietf.org/html/draft-bhutton-json-schema-00\">JSON Schema Core</a> and <a href=\"https://tools.ietf.org/html/draft-bhutton-json-schema-validation-00\">JSON Schema Validation</a>.</p>\n<p>Unless stated otherwise, the property definitions follow those of JSON Schema and do not add any additional semantics.\nWhere JSON Schema indicates that behavior is defined by the application (e.g. for annotations), OAS also defers the definition of semantics to the application consuming the OpenAPI document.</p>\n<h5 id=\"properties\">Properties</h5>\n<p>The OpenAPI Schema Object <a href=\"https://tools.ietf.org/html/draft-bhutton-json-schema-00#section-4.3.3\">dialect</a> is defined as requiring the <a href=\"#baseVocabulary\">OAS base vocabulary</a>, in addition to the vocabularies as specified in the JSON Schema draft 2020-12 <a href=\"https://tools.ietf.org/html/draft-bhutton-json-schema-00#section-8\">general purpose meta-schema</a>.</p>\n<p>The OpenAPI Schema Object dialect for this version of the specification is identified by the URI <code>https://spec.openapis.org/oas/3.1/dialect/base</code> (the <a name=\"dialectSchemaId\"></a>\"OAS dialect schema id\").</p>\n<p>The following properties are taken from the JSON Schema specification but their definitions have been extended by the OAS:</p>\n<ul>\n<li>description - <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</li>\n<li>format - See <a href=\"#dataTypeFormat\">Data Type Formats</a> for further details. While relying on JSON Schema's defined formats, the OAS offers a few additional predefined formats.</li>\n</ul>\n<p>In addition to the JSON Schema properties comprising the OAS dialect, the Schema Object supports keywords from any other vocabularies, or entirely arbitrary properties.</p>\n<p>The OpenAPI Specification's base vocabulary is comprised of the following keywords:</p>\n<h5 id=\"fixed-fields_20\"><a name=\"baseVocabulary\"></a>Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"schemaDiscriminator\"></a>discriminator</td>\n<td style=\"text-align: center;\"><a href=\"#discriminatorObject\">Discriminator Object</a></td>\n<td>Adds support for polymorphism. The discriminator is an object name that is used to differentiate between other schemas which may satisfy the payload description. See <a href=\"#schemaComposition\">Composition and Inheritance</a> for more details.</td>\n</tr>\n<tr>\n<td><a name=\"schemaXml\"></a>xml</td>\n<td style=\"text-align: center;\"><a href=\"#xmlObject\">XML Object</a></td>\n<td>This MAY be used only on properties schemas. It has no effect on root schemas. Adds additional metadata to describe the XML representation of this property.</td>\n</tr>\n<tr>\n<td><a name=\"schemaExternalDocs\"></a>externalDocs</td>\n<td style=\"text-align: center;\"><a href=\"#externalDocumentationObject\">External Documentation Object</a></td>\n<td>Additional external documentation for this schema.</td>\n</tr>\n<tr>\n<td><a name=\"schemaExample\"></a>example</td>\n<td style=\"text-align: center;\">Any</td>\n<td>A free-form property to include an example of an instance for this schema. To represent examples that cannot be naturally represented in JSON or YAML, a string value can be used to contain the example with escaping where necessary.<br/><br/><strong>Deprecated:</strong> The <code>example</code> property has been deprecated in favor of the JSON Schema <code>examples</code> keyword. Use of <code>example</code> is discouraged, and later versions of this specification may remove it.</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>, though as noted, additional properties MAY omit the <code>x-</code> prefix within this object.</p>\n<h6 id=\"composition-and-inheritance-polymorphism\"><a name=\"schemaComposition\"></a>Composition and Inheritance (Polymorphism)</h6>\n<p>The OpenAPI Specification allows combining and extending model definitions using the <code>allOf</code> property of JSON Schema, in effect offering model composition.\n<code>allOf</code> takes an array of object definitions that are validated <em>independently</em> but together compose a single object.</p>\n<p>While composition offers model extensibility, it does not imply a hierarchy between the models.\nTo support polymorphism, the OpenAPI Specification adds the <code>discriminator</code> field.\nWhen used, the <code>discriminator</code> will be the name of the property that decides which schema definition validates the structure of the model.\nAs such, the <code>discriminator</code> field MUST be a required field.\nThere are two ways to define the value of a discriminator for an inheriting instance.\n- Use the schema name.\n- Override the schema name by overriding the property with a new value. If a new value exists, this takes precedence over the schema name.\nAs such, inline schema definitions, which do not have a given id, <em>cannot</em> be used in polymorphism.</p>\n<h6 id=\"xml-modeling\">XML Modeling</h6>\n<p>The <a href=\"#schemaXml\">xml</a> property allows extra definitions when translating the JSON definition to XML.\nThe <a href=\"#xmlObject\">XML Object</a> contains additional information about the available options.</p>\n<h6 id=\"specifying-schema-dialects\">Specifying Schema Dialects</h6>\n<p>It is important for tooling to be able to determine which dialect or meta-schema any given resource wishes to be processed with: JSON Schema Core, JSON Schema Validation, OpenAPI Schema dialect, or some custom meta-schema.</p>\n<p>The <code>$schema</code> keyword MAY be present in any root Schema Object, and if present MUST be used to determine which dialect should be used when processing the schema. This allows use of Schema Objects which comply with other drafts of JSON Schema than the default Draft 2020-12 support. Tooling MUST support the <a href=\"#dialectSchemaId\">OAS dialect schema id</a>, and MAY support additional values of <code>$schema</code>.</p>\n<p>To allow use of a different default <code>$schema</code> value for all Schema Objects contained within an OAS document, a <code>jsonSchemaDialect</code> value may be set within the <a href=\"#oasObject\">OpenAPI Object</a>. If this default is not set, then the OAS dialect schema id MUST be used for these Schema Objects. The value of <code>$schema</code> within a Schema Object always overrides any default.</p>\n<p>When a Schema Object is referenced from an external resource which is not an OAS document (e.g. a bare JSON Schema resource), then the value of the <code>$schema</code> keyword for schemas within that resource MUST follow <a href=\"https://tools.ietf.org/html/draft-bhutton-json-schema-00#section-8.1.1\">JSON Schema rules</a>.</p>\n<h5 id=\"schema-object-examples\">Schema Object Examples</h5>\n<h6 id=\"primitive-sample\">Primitive Sample</h6>\n<pre><code class=\"language-json\">{\n  \"type\": \"string\",\n  \"format\": \"email\"\n}\n</code></pre>\n<pre><code class=\"language-yaml\">type: string\nformat: email\n</code></pre>\n<h6 id=\"simple-model\">Simple Model</h6>\n<pre><code class=\"language-json\">{\n  \"type\": \"object\",\n  \"required\": [\n    \"name\"\n  ],\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"address\": {\n      \"$ref\": \"#/components/schemas/Address\"\n    },\n    \"age\": {\n      \"type\": \"integer\",\n      \"format\": \"int32\",\n      \"minimum\": 0\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">type: object\nrequired:\n- name\nproperties:\n  name:\n    type: string\n  address:\n    $ref: '#/components/schemas/Address'\n  age:\n    type: integer\n    format: int32\n    minimum: 0\n</code></pre>\n<h6 id=\"model-with-mapdictionary-properties\">Model with Map/Dictionary Properties</h6>\n<p>For a simple string to string mapping:</p>\n<pre><code class=\"language-json\">{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"type\": \"string\"\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">type: object\nadditionalProperties:\n  type: string\n</code></pre>\n<p>For a string to model mapping:</p>\n<pre><code class=\"language-json\">{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"$ref\": \"#/components/schemas/ComplexModel\"\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">type: object\nadditionalProperties:\n  $ref: '#/components/schemas/ComplexModel'\n</code></pre>\n<h6 id=\"model-with-example\">Model with Example</h6>\n<pre><code class=\"language-json\">{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"name\"\n  ],\n  \"example\": {\n    \"name\": \"Puma\",\n    \"id\": 1\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">type: object\nproperties:\n  id:\n    type: integer\n    format: int64\n  name:\n    type: string\nrequired:\n- name\nexample:\n  name: Puma\n  id: 1\n</code></pre>\n<h6 id=\"models-with-composition\">Models with Composition</h6>\n<pre><code class=\"language-json\">{\n  \"components\": {\n    \"schemas\": {\n      \"ErrorModel\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"message\",\n          \"code\"\n        ],\n        \"properties\": {\n          \"message\": {\n            \"type\": \"string\"\n          },\n          \"code\": {\n            \"type\": \"integer\",\n            \"minimum\": 100,\n            \"maximum\": 600\n          }\n        }\n      },\n      \"ExtendedErrorModel\": {\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/ErrorModel\"\n          },\n          {\n            \"type\": \"object\",\n            \"required\": [\n              \"rootCause\"\n            ],\n            \"properties\": {\n              \"rootCause\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">components:\n  schemas:\n    ErrorModel:\n      type: object\n      required:\n      - message\n      - code\n      properties:\n        message:\n          type: string\n        code:\n          type: integer\n          minimum: 100\n          maximum: 600\n    ExtendedErrorModel:\n      allOf:\n      - $ref: '#/components/schemas/ErrorModel'\n      - type: object\n        required:\n        - rootCause\n        properties:\n          rootCause:\n            type: string\n</code></pre>\n<h6 id=\"models-with-polymorphism-support\">Models with Polymorphism Support</h6>\n<pre><code class=\"language-json\">{\n  \"components\": {\n    \"schemas\": {\n      \"Pet\": {\n        \"type\": \"object\",\n        \"discriminator\": {\n          \"propertyName\": \"petType\"\n        },\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"petType\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"name\",\n          \"petType\"\n        ]\n      },\n      \"Cat\": {\n        \"description\": \"A representation of a cat. Note that `Cat` will be used as the discriminator value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"huntingSkill\": {\n                \"type\": \"string\",\n                \"description\": \"The measured skill for hunting\",\n                \"default\": \"lazy\",\n                \"enum\": [\n                  \"clueless\",\n                  \"lazy\",\n                  \"adventurous\",\n                  \"aggressive\"\n                ]\n              }\n            },\n            \"required\": [\n              \"huntingSkill\"\n            ]\n          }\n        ]\n      },\n      \"Dog\": {\n        \"description\": \"A representation of a dog. Note that `Dog` will be used as the discriminator value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"packSize\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\",\n                \"description\": \"the size of the pack the dog is from\",\n                \"default\": 0,\n                \"minimum\": 0\n              }\n            },\n            \"required\": [\n              \"packSize\"\n            ]\n          }\n        ]\n      }\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">components:\n  schemas:\n    Pet:\n      type: object\n      discriminator:\n        propertyName: petType\n      properties:\n        name:\n          type: string\n        petType:\n          type: string\n      required:\n      - name\n      - petType\n    Cat:  ## \"Cat\" will be used as the discriminator value\n      description: A representation of a cat\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          huntingSkill:\n            type: string\n            description: The measured skill for hunting\n            enum:\n            - clueless\n            - lazy\n            - adventurous\n            - aggressive\n        required:\n        - huntingSkill\n    Dog:  ## \"Dog\" will be used as the discriminator value\n      description: A representation of a dog\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          packSize:\n            type: integer\n            format: int32\n            description: the size of the pack the dog is from\n            default: 0\n            minimum: 0\n        required:\n        - packSize\n</code></pre>\n<h4 id=\"discriminator-object\"><a name=\"discriminatorObject\"></a>Discriminator Object</h4>\n<p>When request bodies or response payloads may be one of a number of different schemas, a <code>discriminator</code> object can be used to aid in serialization, deserialization, and validation.  The discriminator is a specific object in a schema which is used to inform the consumer of the document of an alternative schema based on the value associated with it.</p>\n<p>When using the discriminator, <em>inline</em> schemas will not be considered.</p>\n<h5 id=\"fixed-fields_21\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"propertyName\"></a>propertyName</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. The name of the property in the payload that will hold the discriminator value.</td>\n</tr>\n<tr>\n<td><a name=\"discriminatorMapping\"></a> mapping</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, <code>string</code>]</td>\n<td>An object to hold mappings between payload values and schema names or references.</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<p>The discriminator object is legal only when using one of the composite keywords <code>oneOf</code>, <code>anyOf</code>, <code>allOf</code>.</p>\n<p>In OAS 3.0, a response payload MAY be described to be exactly one of any number of types:</p>\n<pre><code class=\"language-yaml\">MyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n</code></pre>\n<p>which means the payload <em>MUST</em>, by validation, match exactly one of the schemas described by <code>Cat</code>, <code>Dog</code>, or <code>Lizard</code>.  In this case, a discriminator MAY act as a \"hint\" to shortcut validation and selection of the matching schema which may be a costly operation, depending on the complexity of the schema. We can then describe exactly which field tells us which schema to use:</p>\n<pre><code class=\"language-yaml\">MyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n  discriminator:\n    propertyName: petType\n</code></pre>\n<p>The expectation now is that a property with name <code>petType</code> <em>MUST</em> be present in the response payload, and the value will correspond to the name of a schema defined in the OAS document.  Thus the response payload:</p>\n<pre><code class=\"language-json\">{\n  \"id\": 12345,\n  \"petType\": \"Cat\"\n}\n</code></pre>\n<p>Will indicate that the <code>Cat</code> schema be used in conjunction with this payload.</p>\n<p>In scenarios where the value of the discriminator field does not match the schema name or implicit mapping is not possible, an optional <code>mapping</code> definition MAY be used:</p>\n<pre><code class=\"language-yaml\">MyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n  - $ref: 'https://gigantic-server.com/schemas/Monster/schema.json'\n  discriminator:\n    propertyName: petType\n    mapping:\n      dog: '#/components/schemas/Dog'\n      monster: 'https://gigantic-server.com/schemas/Monster/schema.json'\n</code></pre>\n<p>Here the discriminator <em>value</em> of <code>dog</code> will map to the schema <code>#/components/schemas/Dog</code>, rather than the default (implicit) value of <code>Dog</code>.  If the discriminator <em>value</em> does not match an implicit or explicit mapping, no schema can be determined and validation SHOULD fail. Mapping keys MUST be string values, but tooling MAY convert response values to strings for comparison.</p>\n<p>When used in conjunction with the <code>anyOf</code> construct, the use of the discriminator can avoid ambiguity where multiple schemas may satisfy a single payload.</p>\n<p>In both the <code>oneOf</code> and <code>anyOf</code> use cases, all possible schemas MUST be listed explicitly.  To avoid redundancy, the discriminator MAY be added to a parent schema definition, and all schemas comprising the parent schema in an <code>allOf</code> construct may be used as an alternate schema.</p>\n<p>For example:</p>\n<pre><code class=\"language-yaml\">components:\n  schemas:\n    Pet:\n      type: object\n      required:\n      - petType\n      properties:\n        petType:\n          type: string\n      discriminator:\n        propertyName: petType\n        mapping:\n          dog: Dog\n    Cat:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        # all other properties specific to a `Cat`\n        properties:\n          name:\n            type: string\n    Dog:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        # all other properties specific to a `Dog`\n        properties:\n          bark:\n            type: string\n    Lizard:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        # all other properties specific to a `Lizard`\n        properties:\n          lovesRocks:\n            type: boolean\n</code></pre>\n<p>a payload like this:</p>\n<pre><code class=\"language-json\">{\n  \"petType\": \"Cat\",\n  \"name\": \"misty\"\n}\n</code></pre>\n<p>will indicate that the <code>Cat</code> schema be used.  Likewise this schema:</p>\n<pre><code class=\"language-json\">{\n  \"petType\": \"dog\",\n  \"bark\": \"soft\"\n}\n</code></pre>\n<p>will map to <code>Dog</code> because of the definition in the <code>mapping</code> element.</p>\n<h4 id=\"xml-object\"><a name=\"xmlObject\"></a>XML Object</h4>\n<p>A metadata object that allows for more fine-tuned XML model definitions.</p>\n<p>When using arrays, XML element names are <em>not</em> inferred (for singular/plural forms) and the <code>name</code> property SHOULD be used to add that information.\nSee examples for expected behavior.</p>\n<h5 id=\"fixed-fields_22\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"xmlName\"></a>name</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>Replaces the name of the element/attribute used for the described schema property. When defined within <code>items</code>, it will affect the name of the individual XML elements within the list. When defined alongside <code>type</code> being <code>array</code> (outside the <code>items</code>), it will affect the wrapping element and only if <code>wrapped</code> is <code>true</code>. If <code>wrapped</code> is <code>false</code>, it will be ignored.</td>\n</tr>\n<tr>\n<td><a name=\"xmlNamespace\"></a>namespace</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>The URI of the namespace definition. This MUST be in the form of an absolute URI.</td>\n</tr>\n<tr>\n<td><a name=\"xmlPrefix\"></a>prefix</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>The prefix to be used for the <a href=\"#xmlName\">name</a>.</td>\n</tr>\n<tr>\n<td><a name=\"xmlAttribute\"></a>attribute</td>\n<td style=\"text-align: center;\"><code>boolean</code></td>\n<td>Declares whether the property definition translates to an attribute instead of an element. Default value is <code>false</code>.</td>\n</tr>\n<tr>\n<td><a name=\"xmlWrapped\"></a>wrapped</td>\n<td style=\"text-align: center;\"><code>boolean</code></td>\n<td>MAY be used only for an array definition. Signifies whether the array is wrapped (for example, <code>&lt;books&gt;&lt;book/&gt;&lt;book/&gt;&lt;/books&gt;</code>) or unwrapped (<code>&lt;book/&gt;&lt;book/&gt;</code>). Default value is <code>false</code>. The definition takes effect only when defined alongside <code>type</code> being <code>array</code> (outside the <code>items</code>).</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<h5 id=\"xml-object-examples\">XML Object Examples</h5>\n<p>The examples of the XML object definitions are included inside a property definition of a <a href=\"#schemaObject\">Schema Object</a> with a sample of the XML representation of it.</p>\n<h6 id=\"no-xml-element\">No XML Element</h6>\n<p>Basic string property:</p>\n<pre><code class=\"language-json\">{\n    \"animals\": {\n        \"type\": \"string\"\n    }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">animals:\n  type: string\n</code></pre>\n<pre><code class=\"language-xml\">&lt;animals&gt;...&lt;/animals&gt;\n</code></pre>\n<p>Basic string array property (<a href=\"#xmlWrapped\"><code>wrapped</code></a> is <code>false</code> by default):</p>\n<pre><code class=\"language-json\">{\n    \"animals\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"type\": \"string\"\n        }\n    }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">animals:\n  type: array\n  items:\n    type: string\n</code></pre>\n<pre><code class=\"language-xml\">&lt;animals&gt;...&lt;/animals&gt;\n&lt;animals&gt;...&lt;/animals&gt;\n&lt;animals&gt;...&lt;/animals&gt;\n</code></pre>\n<h6 id=\"xml-name-replacement\">XML Name Replacement</h6>\n<pre><code class=\"language-json\">{\n  \"animals\": {\n    \"type\": \"string\",\n    \"xml\": {\n      \"name\": \"animal\"\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">animals:\n  type: string\n  xml:\n    name: animal\n</code></pre>\n<pre><code class=\"language-xml\">&lt;animal&gt;...&lt;/animal&gt;\n</code></pre>\n<h6 id=\"xml-attribute-prefix-and-namespace\">XML Attribute, Prefix and Namespace</h6>\n<p>In this example, a full model definition is shown.</p>\n<pre><code class=\"language-json\">{\n  \"Person\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\",\n        \"xml\": {\n          \"attribute\": true\n        }\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"xml\": {\n          \"namespace\": \"https://example.com/schema/sample\",\n          \"prefix\": \"sample\"\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">Person:\n  type: object\n  properties:\n    id:\n      type: integer\n      format: int32\n      xml:\n        attribute: true\n    name:\n      type: string\n      xml:\n        namespace: https://example.com/schema/sample\n        prefix: sample\n</code></pre>\n<pre><code class=\"language-xml\">&lt;Person id=\"123\"&gt;\n    &lt;sample:name xmlns:sample=\"https://example.com/schema/sample\"&gt;example&lt;/sample:name&gt;\n&lt;/Person&gt;\n</code></pre>\n<h6 id=\"xml-arrays\">XML Arrays</h6>\n<p>Changing the element names:</p>\n<pre><code class=\"language-json\">{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">animals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n</code></pre>\n<pre><code class=\"language-xml\">&lt;animal&gt;value&lt;/animal&gt;\n&lt;animal&gt;value&lt;/animal&gt;\n</code></pre>\n<p>The external <code>name</code> property has no effect on the XML:</p>\n<pre><code class=\"language-json\">{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"aliens\"\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">animals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    name: aliens\n</code></pre>\n<pre><code class=\"language-xml\">&lt;animal&gt;value&lt;/animal&gt;\n&lt;animal&gt;value&lt;/animal&gt;\n</code></pre>\n<p>Even when the array is wrapped, if a name is not explicitly defined, the same name will be used both internally and externally:</p>\n<pre><code class=\"language-json\">{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"xml\": {\n      \"wrapped\": true\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">animals:\n  type: array\n  items:\n    type: string\n  xml:\n    wrapped: true\n</code></pre>\n<pre><code class=\"language-xml\">&lt;animals&gt;\n  &lt;animals&gt;value&lt;/animals&gt;\n  &lt;animals&gt;value&lt;/animals&gt;\n&lt;/animals&gt;\n</code></pre>\n<p>To overcome the naming problem in the example above, the following definition can be used:</p>\n<pre><code class=\"language-json\">{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"wrapped\": true\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">animals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    wrapped: true\n</code></pre>\n<pre><code class=\"language-xml\">&lt;animals&gt;\n  &lt;animal&gt;value&lt;/animal&gt;\n  &lt;animal&gt;value&lt;/animal&gt;\n&lt;/animals&gt;\n</code></pre>\n<p>Affecting both internal and external names:</p>\n<pre><code class=\"language-json\">{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"aliens\",\n      \"wrapped\": true\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">animals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    name: aliens\n    wrapped: true\n</code></pre>\n<pre><code class=\"language-xml\">&lt;aliens&gt;\n  &lt;animal&gt;value&lt;/animal&gt;\n  &lt;animal&gt;value&lt;/animal&gt;\n&lt;/aliens&gt;\n</code></pre>\n<p>If we change the external element but not the internal ones:</p>\n<pre><code class=\"language-json\">{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"xml\": {\n      \"name\": \"aliens\",\n      \"wrapped\": true\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">animals:\n  type: array\n  items:\n    type: string\n  xml:\n    name: aliens\n    wrapped: true\n</code></pre>\n<pre><code class=\"language-xml\">&lt;aliens&gt;\n  &lt;aliens&gt;value&lt;/aliens&gt;\n  &lt;aliens&gt;value&lt;/aliens&gt;\n&lt;/aliens&gt;\n</code></pre>\n<h4 id=\"security-scheme-object\"><a name=\"securitySchemeObject\"></a>Security Scheme Object</h4>\n<p>Defines a security scheme that can be used by the operations.</p>\n<p>Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter), mutual TLS (use of a client certificate), OAuth2's common flows (implicit, password, client credentials and authorization code) as defined in <a href=\"https://tools.ietf.org/html/rfc6749\">RFC6749</a>, and <a href=\"https://tools.ietf.org/html/draft-ietf-oauth-discovery-06\">OpenID Connect Discovery</a>.\nPlease note that as of 2020, the implicit flow is about to be deprecated by <a href=\"https://tools.ietf.org/html/draft-ietf-oauth-security-topics\">OAuth 2.0 Security Best Current Practice</a>. Recommended for most use case is Authorization Code Grant flow with PKCE.</p>\n<h5 id=\"fixed-fields_23\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Applies To</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"securitySchemeType\"></a>type</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>Any</td>\n<td><strong>REQUIRED</strong>. The type of the security scheme. Valid values are <code>\"apiKey\"</code>, <code>\"http\"</code>, <code>\"mutualTLS\"</code>, <code>\"oauth2\"</code>, <code>\"openIdConnect\"</code>.</td>\n</tr>\n<tr>\n<td><a name=\"securitySchemeDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>Any</td>\n<td>A description for security scheme. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n<tr>\n<td><a name=\"securitySchemeName\"></a>name</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><code>apiKey</code></td>\n<td><strong>REQUIRED</strong>. The name of the header, query or cookie parameter to be used.</td>\n</tr>\n<tr>\n<td><a name=\"securitySchemeIn\"></a>in</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><code>apiKey</code></td>\n<td><strong>REQUIRED</strong>. The location of the API key. Valid values are <code>\"query\"</code>, <code>\"header\"</code> or <code>\"cookie\"</code>.</td>\n</tr>\n<tr>\n<td><a name=\"securitySchemeScheme\"></a>scheme</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><code>http</code></td>\n<td><strong>REQUIRED</strong>. The name of the HTTP Authorization scheme to be used in the <a href=\"https://tools.ietf.org/html/rfc7235#section-5.1\">Authorization header as defined in RFC7235</a>.  The values used SHOULD be registered in the <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">IANA Authentication Scheme registry</a>.</td>\n</tr>\n<tr>\n<td><a name=\"securitySchemeBearerFormat\"></a>bearerFormat</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><code>http</code> (<code>\"bearer\"</code>)</td>\n<td>A hint to the client to identify how the bearer token is formatted.  Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.</td>\n</tr>\n<tr>\n<td><a name=\"securitySchemeFlows\"></a>flows</td>\n<td style=\"text-align: center;\"><a href=\"#oauthFlowsObject\">OAuth Flows Object</a></td>\n<td><code>oauth2</code></td>\n<td><strong>REQUIRED</strong>. An object containing configuration information for the flow types supported.</td>\n</tr>\n<tr>\n<td><a name=\"securitySchemeOpenIdConnectUrl\"></a>openIdConnectUrl</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><code>openIdConnect</code></td>\n<td><strong>REQUIRED</strong>. OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL. The OpenID Connect standard requires the use of TLS.</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<h5 id=\"security-scheme-object-example\">Security Scheme Object Example</h5>\n<h6 id=\"basic-authentication-sample\">Basic Authentication Sample</h6>\n<pre><code class=\"language-json\">{\n  \"type\": \"http\",\n  \"scheme\": \"basic\"\n}\n</code></pre>\n<pre><code class=\"language-yaml\">type: http\nscheme: basic\n</code></pre>\n<h6 id=\"api-key-sample\">API Key Sample</h6>\n<pre><code class=\"language-json\">{\n  \"type\": \"apiKey\",\n  \"name\": \"api_key\",\n  \"in\": \"header\"\n}\n</code></pre>\n<pre><code class=\"language-yaml\">type: apiKey\nname: api_key\nin: header\n</code></pre>\n<h6 id=\"jwt-bearer-sample\">JWT Bearer Sample</h6>\n<pre><code class=\"language-json\">{\n  \"type\": \"http\",\n  \"scheme\": \"bearer\",\n  \"bearerFormat\": \"JWT\",\n}\n</code></pre>\n<pre><code class=\"language-yaml\">type: http\nscheme: bearer\nbearerFormat: JWT\n</code></pre>\n<h6 id=\"implicit-oauth2-sample\">Implicit OAuth2 Sample</h6>\n<pre><code class=\"language-json\">{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">type: oauth2\nflows: \n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n</code></pre>\n<h4 id=\"oauth-flows-object\"><a name=\"oauthFlowsObject\"></a>OAuth Flows Object</h4>\n<p>Allows configuration of the supported OAuth Flows.</p>\n<h5 id=\"fixed-fields_24\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"oauthFlowsImplicit\"></a>implicit</td>\n<td style=\"text-align: center;\"><a href=\"#oauthFlowObject\">OAuth Flow Object</a></td>\n<td>Configuration for the OAuth Implicit flow</td>\n</tr>\n<tr>\n<td><a name=\"oauthFlowsPassword\"></a>password</td>\n<td style=\"text-align: center;\"><a href=\"#oauthFlowObject\">OAuth Flow Object</a></td>\n<td>Configuration for the OAuth Resource Owner Password flow</td>\n</tr>\n<tr>\n<td><a name=\"oauthFlowsClientCredentials\"></a>clientCredentials</td>\n<td style=\"text-align: center;\"><a href=\"#oauthFlowObject\">OAuth Flow Object</a></td>\n<td>Configuration for the OAuth Client Credentials flow.  Previously called <code>application</code> in OpenAPI 2.0.</td>\n</tr>\n<tr>\n<td><a name=\"oauthFlowsAuthorizationCode\"></a>authorizationCode</td>\n<td style=\"text-align: center;\"><a href=\"#oauthFlowObject\">OAuth Flow Object</a></td>\n<td>Configuration for the OAuth Authorization Code flow.  Previously called <code>accessCode</code> in OpenAPI 2.0.</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<h4 id=\"oauth-flow-object\"><a name=\"oauthFlowObject\"></a>OAuth Flow Object</h4>\n<p>Configuration details for a supported OAuth Flow</p>\n<h5 id=\"fixed-fields_25\">Fixed Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Applies To</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"oauthFlowAuthorizationUrl\"></a>authorizationUrl</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><code>oauth2</code> (<code>\"implicit\"</code>, <code>\"authorizationCode\"</code>)</td>\n<td><strong>REQUIRED</strong>. The authorization URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.</td>\n</tr>\n<tr>\n<td><a name=\"oauthFlowTokenUrl\"></a>tokenUrl</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><code>oauth2</code> (<code>\"password\"</code>, <code>\"clientCredentials\"</code>, <code>\"authorizationCode\"</code>)</td>\n<td><strong>REQUIRED</strong>. The token URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.</td>\n</tr>\n<tr>\n<td><a name=\"oauthFlowRefreshUrl\"></a>refreshUrl</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><code>oauth2</code></td>\n<td>The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.</td>\n</tr>\n<tr>\n<td><a name=\"oauthFlowScopes\"></a>scopes</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, <code>string</code>]</td>\n<td><code>oauth2</code></td>\n<td><strong>REQUIRED</strong>. The available scopes for the OAuth2 security scheme. A map between the scope name and a short description for it. The map MAY be empty.</td>\n</tr>\n</tbody>\n</table>\n<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>\n<h5 id=\"oauth-flow-object-examples\">OAuth Flow Object Examples</h5>\n<pre><code class=\"language-JSON\">{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    },\n    \"authorizationCode\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"tokenUrl\": \"https://example.com/api/oauth/token\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-yaml\">type: oauth2\nflows: \n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n  authorizationCode:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    tokenUrl: https://example.com/api/oauth/token\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets \n</code></pre>\n<h4 id=\"security-requirement-object\"><a name=\"securityRequirementObject\"></a>Security Requirement Object</h4>\n<p>Lists the required security schemes to execute this operation.\nThe name used for each property MUST correspond to a security scheme declared in the <a href=\"#componentsSecuritySchemes\">Security Schemes</a> under the <a href=\"#componentsObject\">Components Object</a>.</p>\n<p>Security Requirement Objects that contain multiple schemes require that all schemes MUST be satisfied for a request to be authorized.\nThis enables support for scenarios where multiple query parameters or HTTP headers are required to convey security information.</p>\n<p>When a list of Security Requirement Objects is defined on the <a href=\"#oasObject\">OpenAPI Object</a> or <a href=\"#operationObject\">Operation Object</a>, only one of the Security Requirement Objects in the list needs to be satisfied to authorize the request.</p>\n<h5 id=\"patterned-fields_3\">Patterned Fields</h5>\n<table>\n<thead>\n<tr>\n<th>Field Pattern</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"securityRequirementsName\"></a>{name}</td>\n<td style=\"text-align: center;\">[<code>string</code>]</td>\n<td>Each name MUST correspond to a security scheme which is declared in the <a href=\"#componentsSecuritySchemes\">Security Schemes</a> under the <a href=\"#componentsObject\">Components Object</a>. If the security scheme is of type <code>\"oauth2\"</code> or <code>\"openIdConnect\"</code>, then the value is a list of scope names required for the execution, and the list MAY be empty if authorization does not require a specified scope. For other security scheme types, the array MAY contain a list of role names which are required for the execution, but are not otherwise defined or exchanged in-band.</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"security-requirement-object-examples\">Security Requirement Object Examples</h5>\n<h6 id=\"non-oauth2-security-requirement\">Non-OAuth2 Security Requirement</h6>\n<pre><code class=\"language-json\">{\n  \"api_key\": []\n}\n</code></pre>\n<pre><code class=\"language-yaml\">api_key: []\n</code></pre>\n<h6 id=\"oauth2-security-requirement\">OAuth2 Security Requirement</h6>\n<pre><code class=\"language-json\">{\n  \"petstore_auth\": [\n    \"write:pets\",\n    \"read:pets\"\n  ]\n}\n</code></pre>\n<pre><code class=\"language-yaml\">petstore_auth:\n- write:pets\n- read:pets\n</code></pre>\n<h6 id=\"optional-oauth2-security\">Optional OAuth2 Security</h6>\n<p>Optional OAuth2 security as would be defined in an <a href=\"#openapi-object\">OpenAPI Object</a> or an <a href=\"#operation-object\">Operation Object</a>:</p>\n<pre><code class=\"language-json\">{\n  \"security\": [\n    {},\n    {\n      \"petstore_auth\": [\n        \"write:pets\",\n        \"read:pets\"\n      ]\n    }\n  ]\n}\n</code></pre>\n<pre><code class=\"language-yaml\">security:\n  - {}\n  - petstore_auth:\n    - write:pets\n    - read:pets\n</code></pre>\n<h3 id=\"specification-extensions\"><a name=\"specificationExtensions\"></a>Specification Extensions</h3>\n<p>While the OpenAPI Specification tries to accommodate most use cases, additional data can be added to extend the specification at certain points.</p>\n<p>The extensions properties are implemented as patterned fields that are always prefixed by <code>\"x-\"</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Field Pattern</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"infoExtensions\"></a>^x-</td>\n<td style=\"text-align: center;\">Any</td>\n<td>Allows extensions to the OpenAPI Schema. The field name MUST begin with <code>x-</code>, for example, <code>x-internal-id</code>. Field names beginning <code>x-oai-</code> and <code>x-oas-</code> are reserved for uses defined by the <a href=\"https://www.openapis.org/\">OpenAPI Initiative</a>. The value can be <code>null</code>, a primitive, an array or an object.</td>\n</tr>\n</tbody>\n</table>\n<p>The extensions may or may not be supported by the available tooling, but those may be extended as well to add requested support (if tools are internal or open-sourced).</p>\n<h3 id=\"security-filtering\"><a name=\"securityFiltering\"></a>Security Filtering</h3>\n<p>Some objects in the OpenAPI Specification MAY be declared and remain empty, or be completely removed, even though they are inherently the core of the API documentation. </p>\n<p>The reasoning is to allow an additional layer of access control over the documentation.\nWhile not part of the specification itself, certain libraries MAY choose to allow access to parts of the documentation based on some form of authentication/authorization.</p>\n<p>Two examples of this:</p>\n<ol>\n<li>The <a href=\"#pathsObject\">Paths Object</a> MAY be present but empty. It may be counterintuitive, but this may tell the viewer that they got to the right place, but can't access any documentation. They would still have access to at least the <a href=\"#infoObject\">Info Object</a> which may contain additional information regarding authentication.</li>\n<li>The <a href=\"#pathItemObject\">Path Item Object</a> MAY be empty. In this case, the viewer will be aware that the path exists, but will not be able to see any of its operations or parameters. This is different from hiding the path itself from the <a href=\"#pathsObject\">Paths Object</a>, because the user will be aware of its existence. This allows the documentation provider to finely control what the viewer can see.</li>\n</ol>\n<h2 id=\"appendix-a-revision-history\"><a name=\"revisionHistory\"></a>Appendix A: Revision History</h2>\n<table>\n<thead>\n<tr>\n<th>Version</th>\n<th>Date</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3.1.0</td>\n<td>2021-02-15</td>\n<td>Release of the OpenAPI Specification 3.1.0</td>\n</tr>\n<tr>\n<td>3.1.0-rc1</td>\n<td>2020-10-08</td>\n<td>rc1 of the 3.1 specification</td>\n</tr>\n<tr>\n<td>3.1.0-rc0</td>\n<td>2020-06-18</td>\n<td>rc0 of the 3.1 specification</td>\n</tr>\n<tr>\n<td>3.0.3</td>\n<td>2020-02-20</td>\n<td>Patch release of the OpenAPI Specification 3.0.3</td>\n</tr>\n<tr>\n<td>3.0.2</td>\n<td>2018-10-08</td>\n<td>Patch release of the OpenAPI Specification 3.0.2</td>\n</tr>\n<tr>\n<td>3.0.1</td>\n<td>2017-12-06</td>\n<td>Patch release of the OpenAPI Specification 3.0.1</td>\n</tr>\n<tr>\n<td>3.0.0</td>\n<td>2017-07-26</td>\n<td>Release of the OpenAPI Specification 3.0.0</td>\n</tr>\n<tr>\n<td>3.0.0-rc2</td>\n<td>2017-06-16</td>\n<td>rc2 of the 3.0 specification</td>\n</tr>\n<tr>\n<td>3.0.0-rc1</td>\n<td>2017-04-27</td>\n<td>rc1 of the 3.0 specification</td>\n</tr>\n<tr>\n<td>3.0.0-rc0</td>\n<td>2017-02-28</td>\n<td>Implementer's Draft of the 3.0 specification</td>\n</tr>\n<tr>\n<td>2.0</td>\n<td>2015-12-31</td>\n<td>Donation of Swagger 2.0 to the OpenAPI Initiative</td>\n</tr>\n<tr>\n<td>2.0</td>\n<td>2014-09-08</td>\n<td>Release of Swagger 2.0</td>\n</tr>\n<tr>\n<td>1.2</td>\n<td>2014-03-14</td>\n<td>Initial release of the formal document.</td>\n</tr>\n<tr>\n<td>1.1</td>\n<td>2012-08-22</td>\n<td>Release of Swagger 1.1</td>\n</tr>\n<tr>\n<td>1.0</td>\n<td>2011-08-10</td>\n<td>First release of the Swagger Specification</td>\n</tr>\n</tbody>\n</table>",
        "children": [
            {
                "type": "header",
                "subType": null,
                "level": 1,
                "text": "OpenAPI Specification",
                "html": "<h1 id=\"openapi-specification\">OpenAPI Specification</h1>",
                "children": [
                    {
                        "type": "header",
                        "subType": null,
                        "level": 4,
                        "text": "Version 3.1.0",
                        "html": "<h4 id=\"version-310\">Version 3.1.0</h4>",
                        "children": [
                            {
                                "type": "content",
                                "subType": "text",
                                "level": null,
                                "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 RFC2119 RFC8174 when, and only when, they appear in all capitals, as shown here.",
                                "html": "<p>The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in <a href=\"https://tools.ietf.org/html/bcp14\">BCP 14</a> <a href=\"https://tools.ietf.org/html/rfc2119\">RFC2119</a> <a href=\"https://tools.ietf.org/html/rfc8174\">RFC8174</a> when, and only when, they appear in all capitals, as shown here.</p>",
                                "children": []
                            },
                            {
                                "type": "content",
                                "subType": "text",
                                "level": null,
                                "text": "This document is licensed under The Apache License, Version 2.0.",
                                "html": "<p>This document is licensed under <a href=\"https://www.apache.org/licenses/LICENSE-2.0.html\">The Apache License, Version 2.0</a>.</p>",
                                "children": []
                            }
                        ],
                        "header": {
                            "level": 4,
                            "id": "version-310",
                            "anchor": null
                        }
                    },
                    {
                        "type": "header",
                        "subType": null,
                        "level": 2,
                        "text": "Introduction",
                        "html": "<h2 id=\"introduction\">Introduction</h2>",
                        "children": [
                            {
                                "type": "content",
                                "subType": "text",
                                "level": null,
                                "text": "The OpenAPI Specification (OAS) defines a standard, language-agnostic interface to HTTP APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, a consumer can understand and interact with the remote service with a minimal amount of implementation logic.",
                                "html": "<p>The OpenAPI Specification (OAS) defines a standard, language-agnostic interface to HTTP APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, a consumer can understand and interact with the remote service with a minimal amount of implementation logic.</p>",
                                "children": []
                            },
                            {
                                "type": "content",
                                "subType": "text",
                                "level": null,
                                "text": "An OpenAPI definition can then be used by documentation generation tools to display the API, code generation tools to generate servers and clients in various programming languages, testing tools, and many other use cases.",
                                "html": "<p>An OpenAPI definition can then be used by documentation generation tools to display the API, code generation tools to generate servers and clients in various programming languages, testing tools, and many other use cases.</p>",
                                "children": []
                            }
                        ],
                        "header": {
                            "level": 2,
                            "id": "introduction",
                            "anchor": null
                        }
                    },
                    {
                        "type": "header",
                        "subType": null,
                        "level": 2,
                        "text": "Table of Contents",
                        "html": "<h2 id=\"table-of-contents\">Table of Contents</h2>",
                        "children": [
                            {
                                "type": "content",
                                "subType": "text",
                                "level": null,
                                "text": "",
                                "html": " TOC depthFrom:1 depthTo:3 withLinks:1 updateOnSave:1 orderedList:0 ",
                                "children": []
                            },
                            {
                                "type": "content",
                                "subType": "text",
                                "level": null,
                                "text": "\nDefinitions\nOpenAPI Document\nPath Templating\nMedia Types\nHTTP Status Codes\n\n\nSpecification\nVersions\nFormat\nDocument Structure\nData Types\nRich Text Formatting\nRelative References In URIs\nRelative References In URLs\nSchema\nOpenAPI Object\nInfo Object\nContact Object\nLicense Object\nServer Object\nServer Variable Object\nComponents Object\nPaths Object\nPath Item Object\nOperation Object\nExternal Documentation Object\nParameter Object\nRequest Body Object\nMedia Type Object\nEncoding Object\nResponses Object\nResponse Object\nCallback Object\nExample Object\nLink Object\nHeader Object\nTag Object\nReference Object\nSchema Object\nDiscriminator Object\nXML Object\nSecurity Scheme Object\nOAuth Flows Object\nOAuth Flow Object\nSecurity Requirement Object\n\n\nSpecification Extensions\nSecurity Filtering\n\n\nAppendix A: Revision History\n",
                                "html": "<ul>\n<li><a href=\"#definitions\">Definitions</a><ul>\n<li><a href=\"#oasDocument\">OpenAPI Document</a></li>\n<li><a href=\"#pathTemplating\">Path Templating</a></li>\n<li><a href=\"#mediaTypes\">Media Types</a></li>\n<li><a href=\"#httpCodes\">HTTP Status Codes</a></li>\n</ul>\n</li>\n<li><a href=\"#specification\">Specification</a><ul>\n<li><a href=\"#versions\">Versions</a></li>\n<li><a href=\"#format\">Format</a></li>\n<li><a href=\"#documentStructure\">Document Structure</a></li>\n<li><a href=\"#dataTypes\">Data Types</a></li>\n<li><a href=\"#richText\">Rich Text Formatting</a></li>\n<li><a href=\"#relativeReferencesURI\">Relative References In URIs</a></li>\n<li><a href=\"#relativeReferencesURL\">Relative References In URLs</a></li>\n<li><a href=\"#schema\">Schema</a><ul>\n<li><a href=\"#oasObject\">OpenAPI Object</a></li>\n<li><a href=\"#infoObject\">Info Object</a></li>\n<li><a href=\"#contactObject\">Contact Object</a></li>\n<li><a href=\"#licenseObject\">License Object</a></li>\n<li><a href=\"#serverObject\">Server Object</a></li>\n<li><a href=\"#serverVariableObject\">Server Variable Object</a></li>\n<li><a href=\"#componentsObject\">Components Object</a></li>\n<li><a href=\"#pathsObject\">Paths Object</a></li>\n<li><a href=\"#pathItemObject\">Path Item Object</a></li>\n<li><a href=\"#operationObject\">Operation Object</a></li>\n<li><a href=\"#externalDocumentationObject\">External Documentation Object</a></li>\n<li><a href=\"#parameterObject\">Parameter Object</a></li>\n<li><a href=\"#requestBodyObject\">Request Body Object</a></li>\n<li><a href=\"#mediaTypeObject\">Media Type Object</a></li>\n<li><a href=\"#encodingObject\">Encoding Object</a></li>\n<li><a href=\"#responsesObject\">Responses Object</a></li>\n<li><a href=\"#responseObject\">Response Object</a></li>\n<li><a href=\"#callbackObject\">Callback Object</a></li>\n<li><a href=\"#exampleObject\">Example Object</a></li>\n<li><a href=\"#linkObject\">Link Object</a></li>\n<li><a href=\"#headerObject\">Header Object</a></li>\n<li><a href=\"#tagObject\">Tag Object</a></li>\n<li><a href=\"#referenceObject\">Reference Object</a></li>\n<li><a href=\"#schemaObject\">Schema Object</a></li>\n<li><a href=\"#discriminatorObject\">Discriminator Object</a></li>\n<li><a href=\"#xmlObject\">XML Object</a></li>\n<li><a href=\"#securitySchemeObject\">Security Scheme Object</a></li>\n<li><a href=\"#oauthFlowsObject\">OAuth Flows Object</a></li>\n<li><a href=\"#oauthFlowObject\">OAuth Flow Object</a></li>\n<li><a href=\"#securityRequirementObject\">Security Requirement Object</a></li>\n</ul>\n</li>\n<li><a href=\"#specificationExtensions\">Specification Extensions</a></li>\n<li><a href=\"#securityFiltering\">Security Filtering</a></li>\n</ul>\n</li>\n<li><a href=\"#revisionHistory\">Appendix A: Revision History</a></li>\n</ul>",
                                "children": []
                            },
                            {
                                "type": "content",
                                "subType": "text",
                                "level": null,
                                "text": "",
                                "html": " /TOC ",
                                "children": []
                            }
                        ],
                        "header": {
                            "level": 2,
                            "id": "table-of-contents",
                            "anchor": null
                        }
                    },
                    {
                        "type": "header",
                        "subType": null,
                        "level": 2,
                        "text": "Definitions",
                        "html": "<h2 id=\"definitions\">Definitions</h2>",
                        "children": [
                            {
                                "type": "header",
                                "subType": null,
                                "level": 5,
                                "text": "OpenAPI Document",
                                "html": "<h5 id=\"openapi-document\"><a name=\"oasDocument\"></a>OpenAPI Document</h5>",
                                "children": [
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "A self-contained or composite resource which defines or describes an API or elements of an API. The OpenAPI document MUST contain at least one paths field, a components field or a webhooks field. An OpenAPI document uses and conforms to the OpenAPI Specification.",
                                        "html": "<p>A self-contained or composite resource which defines or describes an API or elements of an API. The OpenAPI document MUST contain at least one <a href=\"#pathsObject\">paths</a> field, a <a href=\"#oasComponents\">components</a> field or a <a href=\"#oasWebhooks\">webhooks</a> field. An OpenAPI document uses and conforms to the OpenAPI Specification.</p>",
                                        "children": []
                                    }
                                ],
                                "header": {
                                    "level": 5,
                                    "id": "openapi-document",
                                    "anchor": "oasDocument"
                                }
                            },
                            {
                                "type": "header",
                                "subType": null,
                                "level": 5,
                                "text": "Path Templating",
                                "html": "<h5 id=\"path-templating\"><a name=\"pathTemplating\"></a>Path Templating</h5>",
                                "children": [
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "Path templating refers to the usage of template expressions, delimited by curly braces ({}), to mark a section of a URL path as replaceable using path parameters.",
                                        "html": "<p>Path templating refers to the usage of template expressions, delimited by curly braces ({}), to mark a section of a URL path as replaceable using path parameters.</p>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "Each template expression in the path MUST correspond to a path parameter that is included in the Path Item itself and/or in each of the Path Item's Operations. An exception is if the path item is empty, for example due to ACL constraints, matching path parameters are not required.",
                                        "html": "<p>Each template expression in the path MUST correspond to a path parameter that is included in the <a href=\"#path-item-object\">Path Item</a> itself and/or in each of the Path Item's <a href=\"#operation-object\">Operations</a>. An exception is if the path item is empty, for example due to ACL constraints, matching path parameters are not required.</p>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "The value for these path parameters MUST NOT contain any unescaped \"generic syntax\" characters described by RFC3986: forward slashes (/), question marks (?), or hashes (#).",
                                        "html": "<p>The value for these path parameters MUST NOT contain any unescaped \"generic syntax\" characters described by <a href=\"https://tools.ietf.org/html/rfc3986#section-3\">RFC3986</a>: forward slashes (<code>/</code>), question marks (<code>?</code>), or hashes (<code>#</code>).</p>",
                                        "children": []
                                    }
                                ],
                                "header": {
                                    "level": 5,
                                    "id": "path-templating",
                                    "anchor": "pathTemplating"
                                }
                            },
                            {
                                "type": "header",
                                "subType": null,
                                "level": 5,
                                "text": "Media Types",
                                "html": "<h5 id=\"media-types\"><a name=\"mediaTypes\"></a>Media Types</h5>",
                                "children": [
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "Media type definitions are spread across several resources.\nThe media type definitions SHOULD be in compliance with RFC6838.",
                                        "html": "<p>Media type definitions are spread across several resources.\nThe media type definitions SHOULD be in compliance with <a href=\"https://tools.ietf.org/html/rfc6838\">RFC6838</a>.</p>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "Some examples of possible media type definitions:",
                                        "html": "<p>Some examples of possible media type definitions:</p>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "code",
                                        "level": null,
                                        "text": "  text/plain; charset=utf-8\n  application/json\n  application/vnd.github+json\n  application/vnd.github.v3+json\n  application/vnd.github.v3.raw+json\n  application/vnd.github.v3.text+json\n  application/vnd.github.v3.html+json\n  application/vnd.github.v3.full+json\n  application/vnd.github.v3.diff\n  application/vnd.github.v3.patch\n",
                                        "html": "<pre><code>  text/plain; charset=utf-8\n  application/json\n  application/vnd.github+json\n  application/vnd.github.v3+json\n  application/vnd.github.v3.raw+json\n  application/vnd.github.v3.text+json\n  application/vnd.github.v3.html+json\n  application/vnd.github.v3.full+json\n  application/vnd.github.v3.diff\n  application/vnd.github.v3.patch\n</code></pre>",
                                        "children": [],
                                        "code": {
                                            "language": null,
                                            "text": "  text/plain; charset=utf-8\n  application/json\n  application/vnd.github+json\n  application/vnd.github.v3+json\n  application/vnd.github.v3.raw+json\n  application/vnd.github.v3.text+json\n  application/vnd.github.v3.html+json\n  application/vnd.github.v3.full+json\n  application/vnd.github.v3.diff\n  application/vnd.github.v3.patch\n"
                                        }
                                    }
                                ],
                                "header": {
                                    "level": 5,
                                    "id": "media-types",
                                    "anchor": "mediaTypes"
                                }
                            },
                            {
                                "type": "header",
                                "subType": null,
                                "level": 5,
                                "text": "HTTP Status Codes",
                                "html": "<h5 id=\"http-status-codes\"><a name=\"httpCodes\"></a>HTTP Status Codes</h5>",
                                "children": [
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "The HTTP Status Codes are used to indicate the status of the executed operation. \nThe available status codes are defined by RFC7231 and registered status codes are listed in the IANA Status Code Registry.",
                                        "html": "<p>The HTTP Status Codes are used to indicate the status of the executed operation. \nThe available status codes are defined by <a href=\"https://tools.ietf.org/html/rfc7231#section-6\">RFC7231</a> and registered status codes are listed in the <a href=\"https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\">IANA Status Code Registry</a>.</p>",
                                        "children": []
                                    }
                                ],
                                "header": {
                                    "level": 5,
                                    "id": "http-status-codes",
                                    "anchor": "httpCodes"
                                }
                            }
                        ],
                        "header": {
                            "level": 2,
                            "id": "definitions",
                            "anchor": null
                        }
                    },
                    {
                        "type": "header",
                        "subType": null,
                        "level": 2,
                        "text": "Specification",
                        "html": "<h2 id=\"specification\">Specification</h2>",
                        "children": [
                            {
                                "type": "header",
                                "subType": null,
                                "level": 3,
                                "text": "Versions",
                                "html": "<h3 id=\"versions\">Versions</h3>",
                                "children": [
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "The OpenAPI Specification is versioned using a major.minor.patch versioning scheme. The major.minor portion of the version string (for example 3.1) SHALL designate the OAS feature set. .patch versions address errors in, or provide clarifications to, this document, not the feature set. Tooling which supports OAS 3.1 SHOULD be compatible with all OAS 3.1.* versions. The patch version SHOULD NOT be considered by tooling, making no distinction between 3.1.0 and 3.1.1 for example.",
                                        "html": "<p>The OpenAPI Specification is versioned using a <code>major</code>.<code>minor</code>.<code>patch</code> versioning scheme. The <code>major</code>.<code>minor</code> portion of the version string (for example <code>3.1</code>) SHALL designate the OAS feature set. <em><code>.patch</code></em> versions address errors in, or provide clarifications to, this document, not the feature set. Tooling which supports OAS 3.1 SHOULD be compatible with all OAS 3.1.* versions. The patch version SHOULD NOT be considered by tooling, making no distinction between <code>3.1.0</code> and <code>3.1.1</code> for example.</p>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "Occasionally, non-backwards compatible changes may be made in minor versions of the OAS where impact is believed to be low relative to the benefit provided.",
                                        "html": "<p>Occasionally, non-backwards compatible changes may be made in <code>minor</code> versions of the OAS where impact is believed to be low relative to the benefit provided.</p>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "An OpenAPI document compatible with OAS 3.*.* contains a required openapi field which designates the version of the OAS that it uses.",
                                        "html": "<p>An OpenAPI document compatible with OAS 3.*.* contains a required <a href=\"#oasVersion\"><code>openapi</code></a> field which designates the version of the OAS that it uses.</p>",
                                        "children": []
                                    }
                                ],
                                "header": {
                                    "level": 3,
                                    "id": "versions",
                                    "anchor": null
                                }
                            },
                            {
                                "type": "header",
                                "subType": null,
                                "level": 3,
                                "text": "Format",
                                "html": "<h3 id=\"format\">Format</h3>",
                                "children": [
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "An OpenAPI document that conforms to the OpenAPI Specification is itself a JSON object, which may be represented either in JSON or YAML format.",
                                        "html": "<p>An OpenAPI document that conforms to the OpenAPI Specification is itself a JSON object, which may be represented either in JSON or YAML format.</p>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "For example, if a field has an array value, the JSON array representation will be used:",
                                        "html": "<p>For example, if a field has an array value, the JSON array representation will be used:</p>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "code",
                                        "level": null,
                                        "text": "{\n   \"field\": [ 1, 2, 3 ]\n}\n",
                                        "html": "<pre><code class=\"language-json\">{\n   \"field\": [ 1, 2, 3 ]\n}\n</code></pre>",
                                        "children": [],
                                        "code": {
                                            "language": "json",
                                            "text": "{\n   \"field\": [ 1, 2, 3 ]\n}\n"
                                        }
                                    },
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "All field names in the specification are case sensitive.\nThis includes all fields that are used as keys in a map, except where explicitly noted that keys are case insensitive.",
                                        "html": "<p>All field names in the specification are <strong>case sensitive</strong>.\nThis includes all fields that are used as keys in a map, except where explicitly noted that keys are <strong>case insensitive</strong>.</p>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "The schema exposes two types of fields: Fixed fields, which have a declared name, and Patterned fields, which declare a regex pattern for the field name.",
                                        "html": "<p>The schema exposes two types of fields: Fixed fields, which have a declared name, and Patterned fields, which declare a regex pattern for the field name.</p>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "Patterned fields MUST have unique names within the containing object. ",
                                        "html": "<p>Patterned fields MUST have unique names within the containing object. </p>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "In order to preserve the ability to round-trip between YAML and JSON formats, YAML version 1.2 is RECOMMENDED along with some additional constraints:",
                                        "html": "<p>In order to preserve the ability to round-trip between YAML and JSON formats, YAML version <a href=\"https://yaml.org/spec/1.2/spec.html\">1.2</a> is RECOMMENDED along with some additional constraints:</p>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "\nTags MUST be limited to those allowed by the JSON Schema ruleset.\nKeys used in YAML maps MUST be limited to a scalar string, as defined by the YAML Failsafe schema ruleset.\n",
                                        "html": "<ul>\n<li>Tags MUST be limited to those allowed by the <a href=\"https://yaml.org/spec/1.2/spec.html#id2803231\">JSON Schema ruleset</a>.</li>\n<li>Keys used in YAML maps MUST be limited to a scalar string, as defined by the <a href=\"https://yaml.org/spec/1.2/spec.html#id2802346\">YAML Failsafe schema ruleset</a>.</li>\n</ul>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "Note: While APIs may be defined by OpenAPI documents in either YAML or JSON format, the API request and response bodies and other content are not required to be JSON or YAML.",
                                        "html": "<p><strong>Note:</strong> While APIs may be defined by OpenAPI documents in either YAML or JSON format, the API request and response bodies and other content are not required to be JSON or YAML.</p>",
                                        "children": []
                                    }
                                ],
                                "header": {
                                    "level": 3,
                                    "id": "format",
                                    "anchor": null
                                }
                            },
                            {
                                "type": "header",
                                "subType": null,
                                "level": 3,
                                "text": "Document Structure",
                                "html": "<h3 id=\"document-structure\"><a name=\"documentStructure\"></a>Document Structure</h3>",
                                "children": [
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "An OpenAPI document MAY be made up of a single document or be divided into multiple, connected parts at the discretion of the author. In the latter case, Reference Objects and Schema Object $ref keywords are used.",
                                        "html": "<p>An OpenAPI document MAY be made up of a single document or be divided into multiple, connected parts at the discretion of the author. In the latter case, <a href=\"#referenceObject\"><code>Reference Objects</code></a> and <a href=\"#schemaObject\"><code>Schema Object</code></a> <code>$ref</code> keywords are used.</p>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "It is RECOMMENDED that the root OpenAPI document be named: openapi.json or openapi.yaml.",
                                        "html": "<p>It is RECOMMENDED that the root OpenAPI document be named: <code>openapi.json</code> or <code>openapi.yaml</code>.</p>",
                                        "children": []
                                    }
                                ],
                                "header": {
                                    "level": 3,
                                    "id": "document-structure",
                                    "anchor": "documentStructure"
                                }
                            },
                            {
                                "type": "header",
                                "subType": null,
                                "level": 3,
                                "text": "Data Types",
                                "html": "<h3 id=\"data-types\"><a name=\"dataTypes\"></a>Data Types</h3>",
                                "children": [
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "Data types in the OAS are based on the types supported by the JSON Schema Specification Draft 2020-12.\nNote that integer as a type is also supported and is defined as a JSON number without a fraction or exponent part. \nModels are defined using the Schema Object, which is a superset of JSON Schema Specification Draft 2020-12.",
                                        "html": "<p>Data types in the OAS are based on the types supported by the <a href=\"https://tools.ietf.org/html/draft-bhutton-json-schema-00#section-4.2.1\">JSON Schema Specification Draft 2020-12</a>.\nNote that <code>integer</code> as a type is also supported and is defined as a JSON number without a fraction or exponent part. \nModels are defined using the <a href=\"#schemaObject\">Schema Object</a>, which is a superset of JSON Schema Specification Draft 2020-12.</p>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "As defined by the JSON Schema Validation vocabulary, data types can have an optional modifier property: format.\nOAS defines additional formats to provide fine detail for primitive data types.",
                                        "html": "<p><a name=\"dataTypeFormat\"></a>As defined by the <a href=\"https://tools.ietf.org/html/draft-bhutton-json-schema-validation-00#section-7.3\">JSON Schema Validation vocabulary</a>, data types can have an optional modifier property: <code>format</code>.\nOAS defines additional formats to provide fine detail for primitive data types.</p>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "The formats defined by the OAS are:",
                                        "html": "<p>The formats defined by the OAS are:</p>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "table",
                                        "level": null,
                                        "text": "\n\n\ntype\nformat\nComments\n\n\n\n\ninteger\nint32\nsigned 32 bits\n\n\ninteger\nint64\nsigned 64 bits (a.k.a long)\n\n\nnumber\nfloat\n\n\n\nnumber\ndouble\n\n\n\nstring\npassword\nA hint to UIs to obscure input.\n\n\n",
                                        "html": "<table>\n<thead>\n<tr>\n<th><a href=\"#dataTypes\"><code>type</code></a></th>\n<th><a href=\"#dataTypeFormat\"><code>format</code></a></th>\n<th>Comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>integer</code></td>\n<td><code>int32</code></td>\n<td>signed 32 bits</td>\n</tr>\n<tr>\n<td><code>integer</code></td>\n<td><code>int64</code></td>\n<td>signed 64 bits (a.k.a long)</td>\n</tr>\n<tr>\n<td><code>number</code></td>\n<td><code>float</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>number</code></td>\n<td><code>double</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>string</code></td>\n<td><code>password</code></td>\n<td>A hint to UIs to obscure input.</td>\n</tr>\n</tbody>\n</table>",
                                        "children": [],
                                        "table": {
                                            "headers": [
                                                {
                                                    "text": "type",
                                                    "html": "<a href=\"#dataTypes\"><code>type</code></a>"
                                                },
                                                {
                                                    "text": "format",
                                                    "html": "<a href=\"#dataTypeFormat\"><code>format</code></a>"
                                                },
                                                {
                                                    "text": "Comments",
                                                    "html": "Comments"
                                                }
                                            ],
                                            "lines": [
                                                {
                                                    "anchor": null,
                                                    "values": [
                                                        {
                                                            "text": "integer",
                                                            "html": "<code>integer</code>"
                                                        },
                                                        {
                                                            "text": "int32",
                                                            "html": "<code>int32</code>"
                                                        },
                                                        {
                                                            "text": "signed 32 bits",
                                                            "html": "signed 32 bits"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "anchor": null,
                                                    "values": [
                                                        {
                                                            "text": "integer",
                                                            "html": "<code>integer</code>"
                                                        },
                                                        {
                                                            "text": "int64",
                                                            "html": "<code>int64</code>"
                                                        },
                                                        {
                                                            "text": "signed 64 bits (a.k.a long)",
                                                            "html": "signed 64 bits (a.k.a long)"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "anchor": null,
                                                    "values": [
                                                        {
                                                            "text": "number",
                                                            "html": "<code>number</code>"
                                                        },
                                                        {
                                                            "text": "float",
                                                            "html": "<code>float</code>"
                                                        },
                                                        {
                                                            "text": "",
                                                            "html": ""
                                                        }
                                                    ]
                                                },
                                                {
                                                    "anchor": null,
                                                    "values": [
                                                        {
                                                            "text": "number",
                                                            "html": "<code>number</code>"
                                                        },
                                                        {
                                                            "text": "double",
                                                            "html": "<code>double</code>"
                                                        },
                                                        {
                                                            "text": "",
                                                            "html": ""
                                                        }
                                                    ]
                                                },
                                                {
                                                    "anchor": null,
                                                    "values": [
                                                        {
                                                            "text": "string",
                                                            "html": "<code>string</code>"
                                                        },
                                                        {
                                                            "text": "password",
                                                            "html": "<code>password</code>"
                                                        },
                                                        {
                                                            "text": "A hint to UIs to obscure input.",
                                                            "html": "A hint to UIs to obscure input."
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    }
                                ],
                                "header": {
                                    "level": 3,
                                    "id": "data-types",
                                    "anchor": "dataTypes"
                                }
                            },
                            {
                                "type": "header",
                                "subType": null,
                                "level": 3,
                                "text": "Rich Text Formatting",
                                "html": "<h3 id=\"rich-text-formatting\"><a name=\"richText\"></a>Rich Text Formatting</h3>",
                                "children": [
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "Throughout the specification description fields are noted as supporting CommonMark markdown formatting.\nWhere OpenAPI tooling renders rich text it MUST support, at a minimum, markdown syntax as described by CommonMark 0.27. Tooling MAY choose to ignore some CommonMark features to address security concerns. ",
                                        "html": "<p>Throughout the specification <code>description</code> fields are noted as supporting CommonMark markdown formatting.\nWhere OpenAPI tooling renders rich text it MUST support, at a minimum, markdown syntax as described by <a href=\"https://spec.commonmark.org/0.27/\">CommonMark 0.27</a>. Tooling MAY choose to ignore some CommonMark features to address security concerns. </p>",
                                        "children": []
                                    }
                                ],
                                "header": {
                                    "level": 3,
                                    "id": "rich-text-formatting",
                                    "anchor": "richText"
                                }
                            },
                            {
                                "type": "header",
                                "subType": null,
                                "level": 3,
                                "text": "Relative References in URIs",
                                "html": "<h3 id=\"relative-references-in-uris\"><a name=\"relativeReferencesURI\"></a>Relative References in URIs</h3>",
                                "children": [
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "Unless specified otherwise, all properties that are URIs MAY be relative references as defined by RFC3986.",
                                        "html": "<p>Unless specified otherwise, all properties that are URIs MAY be relative references as defined by <a href=\"https://tools.ietf.org/html/rfc3986#section-4.2\">RFC3986</a>.</p>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "Relative references, including those in Reference Objects, PathItem Object $ref fields, Link Object operationRef fields and Example Object externalValue fields, are resolved using the referring document as the Base URI according to RFC3986.",
                                        "html": "<p>Relative references, including those in <a href=\"#referenceObject\"><code>Reference Objects</code></a>, <a href=\"#pathItemObject\"><code>PathItem Object</code></a> <code>$ref</code> fields, <a href=\"#linkObject\"><code>Link Object</code></a> <code>operationRef</code> fields and <a href=\"#exampleObject\"><code>Example Object</code></a> <code>externalValue</code> fields, are resolved using the referring document as the Base URI according to <a href=\"https://tools.ietf.org/html/rfc3986#section-5.2\">RFC3986</a>.</p>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "If a URI contains a fragment identifier, then the fragment should be resolved per the fragment resolution mechanism of the referenced document.  If the representation of the referenced document is JSON or YAML, then the fragment identifier SHOULD be interpreted as a JSON-Pointer as per RFC6901.",
                                        "html": "<p>If a URI contains a fragment identifier, then the fragment should be resolved per the fragment resolution mechanism of the referenced document.  If the representation of the referenced document is JSON or YAML, then the fragment identifier SHOULD be interpreted as a JSON-Pointer as per <a href=\"https://tools.ietf.org/html/rfc6901\">RFC6901</a>.</p>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "Relative references in Schema Objects, including any that appear as $id values, use the nearest parent $id as a Base URI, as described by JSON Schema Specification Draft 2020-12.  If no parent schema contains an $id, then the Base URI MUST be determined according to RFC3986.",
                                        "html": "<p>Relative references in <a href=\"#schemaObject\"><code>Schema Objects</code></a>, including any that appear as <code>$id</code> values, use the nearest parent <code>$id</code> as a Base URI, as described by <a href=\"https://tools.ietf.org/html/draft-bhutton-json-schema-00#section-8.2\">JSON Schema Specification Draft 2020-12</a>.  If no parent schema contains an <code>$id</code>, then the Base URI MUST be determined according to <a href=\"https://tools.ietf.org/html/rfc3986#section-5.1\">RFC3986</a>.</p>",
                                        "children": []
                                    }
                                ],
                                "header": {
                                    "level": 3,
                                    "id": "relative-references-in-uris",
                                    "anchor": "relativeReferencesURI"
                                }
                            },
                            {
                                "type": "header",
                                "subType": null,
                                "level": 3,
                                "text": "Relative References in URLs",
                                "html": "<h3 id=\"relative-references-in-urls\"><a name=\"relativeReferencesURL\"></a>Relative References in URLs</h3>",
                                "children": [
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "Unless specified otherwise, all properties that are URLs MAY be relative references as defined by RFC3986.\nUnless specified otherwise, relative references are resolved using the URLs defined in the Server Object as a Base URL. Note that these themselves MAY be relative to the referring document.",
                                        "html": "<p>Unless specified otherwise, all properties that are URLs MAY be relative references as defined by <a href=\"https://tools.ietf.org/html/rfc3986#section-4.2\">RFC3986</a>.\nUnless specified otherwise, relative references are resolved using the URLs defined in the <a href=\"#serverObject\"><code>Server Object</code></a> as a Base URL. Note that these themselves MAY be relative to the referring document.</p>",
                                        "children": []
                                    }
                                ],
                                "header": {
                                    "level": 3,
                                    "id": "relative-references-in-urls",
                                    "anchor": "relativeReferencesURL"
                                }
                            },
                            {
                                "type": "header",
                                "subType": null,
                                "level": 3,
                                "text": "Schema",
                                "html": "<h3 id=\"schema\">Schema</h3>",
                                "children": [
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "In the following description, if a field is not explicitly REQUIRED or described with a MUST or SHALL, it can be considered OPTIONAL.",
                                        "html": "<p>In the following description, if a field is not explicitly <strong>REQUIRED</strong> or described with a MUST or SHALL, it can be considered OPTIONAL.</p>",
                                        "children": []
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "OpenAPI Object",
                                        "html": "<h4 id=\"openapi-object\"><a name=\"oasObject\"></a>OpenAPI Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "This is the root object of the OpenAPI document.",
                                                "html": "<p>This is the root object of the <a href=\"#oasDocument\">OpenAPI document</a>.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\nopenapi\nstring\nREQUIRED. This string MUST be the version number of the OpenAPI Specification that the OpenAPI document uses. The openapi field SHOULD be used by tooling to interpret the OpenAPI document. This is not related to the API info.version string.\n\n\ninfo\nInfo Object\nREQUIRED. Provides metadata about the API. The metadata MAY be used by tooling as required.\n\n\n jsonSchemaDialect\nstring\nThe default value for the $schema keyword within Schema Objects contained within this OAS document. This MUST be in the form of a URI.\n\n\nservers\n[Server Object]\nAn array of Server Objects, which provide connectivity information to a target server. If the servers property is not provided, or is an empty array, the default value would be a Server Object with a url value of /.\n\n\npaths\nPaths Object\nThe available paths and operations for the API.\n\n\nwebhooks\nMap[string, Path Item Object | Reference Object] ]\nThe incoming webhooks that MAY be received as part of this API and that the API consumer MAY choose to implement. Closely related to the callbacks feature, this section describes requests initiated other than by an API call, for example by an out of band registration. The key name is a unique string to refer to each webhook, while the (optionally referenced) Path Item Object describes a request that may be initiated by the API provider and the expected responses. An example is available.\n\n\ncomponents\nComponents Object\nAn element to hold various schemas for the document.\n\n\nsecurity\n[Security Requirement Object]\nA declaration of which security mechanisms can be used across the API. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. Individual operations can override this definition. To make security optional, an empty security requirement ({}) can be included in the array.\n\n\ntags\n[Tag Object]\nA list of tags used by the document with additional metadata. The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by the Operation Object must be declared. The tags that are not declared MAY be organized randomly or based on the tools' logic. Each tag name in the list MUST be unique.\n\n\nexternalDocs\nExternal Documentation Object\nAdditional external documentation.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"oasVersion\"></a>openapi</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. This string MUST be the <a href=\"#versions\">version number</a> of the OpenAPI Specification that the OpenAPI document uses. The <code>openapi</code> field SHOULD be used by tooling to interpret the OpenAPI document. This is <em>not</em> related to the API <a href=\"#infoVersion\"><code>info.version</code></a> string.</td>\n</tr>\n<tr>\n<td><a name=\"oasInfo\"></a>info</td>\n<td style=\"text-align: center;\"><a href=\"#infoObject\">Info Object</a></td>\n<td><strong>REQUIRED</strong>. Provides metadata about the API. The metadata MAY be used by tooling as required.</td>\n</tr>\n<tr>\n<td><a name=\"oasJsonSchemaDialect\"></a> jsonSchemaDialect</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>The default value for the <code>$schema</code> keyword within <a href=\"#schemaObject\">Schema Objects</a> contained within this OAS document. This MUST be in the form of a URI.</td>\n</tr>\n<tr>\n<td><a name=\"oasServers\"></a>servers</td>\n<td style=\"text-align: center;\">[<a href=\"#serverObject\">Server Object</a>]</td>\n<td>An array of Server Objects, which provide connectivity information to a target server. If the <code>servers</code> property is not provided, or is an empty array, the default value would be a <a href=\"#serverObject\">Server Object</a> with a <a href=\"#serverUrl\">url</a> value of <code>/</code>.</td>\n</tr>\n<tr>\n<td><a name=\"oasPaths\"></a>paths</td>\n<td style=\"text-align: center;\"><a href=\"#pathsObject\">Paths Object</a></td>\n<td>The available paths and operations for the API.</td>\n</tr>\n<tr>\n<td><a name=\"oasWebhooks\"></a>webhooks</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, <a href=\"#pathItemObject\">Path Item Object</a> | <a href=\"#referenceObject\">Reference Object</a>] ]</td>\n<td>The incoming webhooks that MAY be received as part of this API and that the API consumer MAY choose to implement. Closely related to the <code>callbacks</code> feature, this section describes requests initiated other than by an API call, for example by an out of band registration. The key name is a unique string to refer to each webhook, while the (optionally referenced) Path Item Object describes a request that may be initiated by the API provider and the expected responses. An <a href=\"../examples/v3.1/webhook-example.yaml\">example</a> is available.</td>\n</tr>\n<tr>\n<td><a name=\"oasComponents\"></a>components</td>\n<td style=\"text-align: center;\"><a href=\"#componentsObject\">Components Object</a></td>\n<td>An element to hold various schemas for the document.</td>\n</tr>\n<tr>\n<td><a name=\"oasSecurity\"></a>security</td>\n<td style=\"text-align: center;\">[<a href=\"#securityRequirementObject\">Security Requirement Object</a>]</td>\n<td>A declaration of which security mechanisms can be used across the API. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. Individual operations can override this definition. To make security optional, an empty security requirement (<code>{}</code>) can be included in the array.</td>\n</tr>\n<tr>\n<td><a name=\"oasTags\"></a>tags</td>\n<td style=\"text-align: center;\">[<a href=\"#tagObject\">Tag Object</a>]</td>\n<td>A list of tags used by the document with additional metadata. The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by the <a href=\"#operationObject\">Operation Object</a> must be declared. The tags that are not declared MAY be organized randomly or based on the tools' logic. Each tag name in the list MUST be unique.</td>\n</tr>\n<tr>\n<td><a name=\"oasExternalDocs\"></a>externalDocs</td>\n<td style=\"text-align: center;\"><a href=\"#externalDocumentationObject\">External Documentation Object</a></td>\n<td>Additional external documentation.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "oasVersion",
                                                                    "values": [
                                                                        {
                                                                            "text": "openapi",
                                                                            "html": "<a name=\"oasVersion\"></a>openapi"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "REQUIRED. This string MUST be the version number of the OpenAPI Specification that the OpenAPI document uses. The openapi field SHOULD be used by tooling to interpret the OpenAPI document. This is not related to the API info.version string.",
                                                                            "html": "<strong>REQUIRED</strong>. This string MUST be the <a href=\"#versions\">version number</a> of the OpenAPI Specification that the OpenAPI document uses. The <code>openapi</code> field SHOULD be used by tooling to interpret the OpenAPI document. This is <em>not</em> related to the API <a href=\"#infoVersion\"><code>info.version</code></a> string."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "oasInfo",
                                                                    "values": [
                                                                        {
                                                                            "text": "info",
                                                                            "html": "<a name=\"oasInfo\"></a>info"
                                                                        },
                                                                        {
                                                                            "text": "Info Object",
                                                                            "html": "<a href=\"#infoObject\">Info Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "REQUIRED. Provides metadata about the API. The metadata MAY be used by tooling as required.",
                                                                            "html": "<strong>REQUIRED</strong>. Provides metadata about the API. The metadata MAY be used by tooling as required."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "oasJsonSchemaDialect",
                                                                    "values": [
                                                                        {
                                                                            "text": " jsonSchemaDialect",
                                                                            "html": "<a name=\"oasJsonSchemaDialect\"></a> jsonSchemaDialect"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "The default value for the $schema keyword within Schema Objects contained within this OAS document. This MUST be in the form of a URI.",
                                                                            "html": "The default value for the <code>$schema</code> keyword within <a href=\"#schemaObject\">Schema Objects</a> contained within this OAS document. This MUST be in the form of a URI."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "oasServers",
                                                                    "values": [
                                                                        {
                                                                            "text": "servers",
                                                                            "html": "<a name=\"oasServers\"></a>servers"
                                                                        },
                                                                        {
                                                                            "text": "[Server Object]",
                                                                            "html": "[<a href=\"#serverObject\">Server Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "An array of Server Objects, which provide connectivity information to a target server. If the servers property is not provided, or is an empty array, the default value would be a Server Object with a url value of /.",
                                                                            "html": "An array of Server Objects, which provide connectivity information to a target server. If the <code>servers</code> property is not provided, or is an empty array, the default value would be a <a href=\"#serverObject\">Server Object</a> with a <a href=\"#serverUrl\">url</a> value of <code>/</code>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "oasPaths",
                                                                    "values": [
                                                                        {
                                                                            "text": "paths",
                                                                            "html": "<a name=\"oasPaths\"></a>paths"
                                                                        },
                                                                        {
                                                                            "text": "Paths Object",
                                                                            "html": "<a href=\"#pathsObject\">Paths Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "The available paths and operations for the API.",
                                                                            "html": "The available paths and operations for the API."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "oasWebhooks",
                                                                    "values": [
                                                                        {
                                                                            "text": "webhooks",
                                                                            "html": "<a name=\"oasWebhooks\"></a>webhooks"
                                                                        },
                                                                        {
                                                                            "text": "Map[string, Path Item Object | Reference Object] ]",
                                                                            "html": "Map[<code>string</code>, <a href=\"#pathItemObject\">Path Item Object</a> | <a href=\"#referenceObject\">Reference Object</a>] ]"
                                                                        },
                                                                        {
                                                                            "text": "The incoming webhooks that MAY be received as part of this API and that the API consumer MAY choose to implement. Closely related to the callbacks feature, this section describes requests initiated other than by an API call, for example by an out of band registration. The key name is a unique string to refer to each webhook, while the (optionally referenced) Path Item Object describes a request that may be initiated by the API provider and the expected responses. An example is available.",
                                                                            "html": "The incoming webhooks that MAY be received as part of this API and that the API consumer MAY choose to implement. Closely related to the <code>callbacks</code> feature, this section describes requests initiated other than by an API call, for example by an out of band registration. The key name is a unique string to refer to each webhook, while the (optionally referenced) Path Item Object describes a request that may be initiated by the API provider and the expected responses. An <a href=\"../examples/v3.1/webhook-example.yaml\">example</a> is available."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "oasComponents",
                                                                    "values": [
                                                                        {
                                                                            "text": "components",
                                                                            "html": "<a name=\"oasComponents\"></a>components"
                                                                        },
                                                                        {
                                                                            "text": "Components Object",
                                                                            "html": "<a href=\"#componentsObject\">Components Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "An element to hold various schemas for the document.",
                                                                            "html": "An element to hold various schemas for the document."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "oasSecurity",
                                                                    "values": [
                                                                        {
                                                                            "text": "security",
                                                                            "html": "<a name=\"oasSecurity\"></a>security"
                                                                        },
                                                                        {
                                                                            "text": "[Security Requirement Object]",
                                                                            "html": "[<a href=\"#securityRequirementObject\">Security Requirement Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "A declaration of which security mechanisms can be used across the API. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. Individual operations can override this definition. To make security optional, an empty security requirement ({}) can be included in the array.",
                                                                            "html": "A declaration of which security mechanisms can be used across the API. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. Individual operations can override this definition. To make security optional, an empty security requirement (<code>{}</code>) can be included in the array."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "oasTags",
                                                                    "values": [
                                                                        {
                                                                            "text": "tags",
                                                                            "html": "<a name=\"oasTags\"></a>tags"
                                                                        },
                                                                        {
                                                                            "text": "[Tag Object]",
                                                                            "html": "[<a href=\"#tagObject\">Tag Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "A list of tags used by the document with additional metadata. The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by the Operation Object must be declared. The tags that are not declared MAY be organized randomly or based on the tools' logic. Each tag name in the list MUST be unique.",
                                                                            "html": "A list of tags used by the document with additional metadata. The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by the <a href=\"#operationObject\">Operation Object</a> must be declared. The tags that are not declared MAY be organized randomly or based on the tools' logic. Each tag name in the list MUST be unique."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "oasExternalDocs",
                                                                    "values": [
                                                                        {
                                                                            "text": "externalDocs",
                                                                            "html": "<a name=\"oasExternalDocs\"></a>externalDocs"
                                                                        },
                                                                        {
                                                                            "text": "External Documentation Object",
                                                                            "html": "<a href=\"#externalDocumentationObject\">External Documentation Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "Additional external documentation.",
                                                                            "html": "Additional external documentation."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "openapi-object",
                                            "anchor": "oasObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "Info Object",
                                        "html": "<h4 id=\"info-object\"><a name=\"infoObject\"></a>Info Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "The object provides metadata about the API.\nThe metadata MAY be used by the clients if needed, and MAY be presented in editing or documentation generation tools for convenience.",
                                                "html": "<p>The object provides metadata about the API.\nThe metadata MAY be used by the clients if needed, and MAY be presented in editing or documentation generation tools for convenience.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_1\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\ntitle\nstring\nREQUIRED. The title of the API.\n\n\nsummary\nstring\nA short summary of the API.\n\n\ndescription\nstring\nA description of the API. CommonMark syntax MAY be used for rich text representation.\n\n\ntermsOfService\nstring\nA URL to the Terms of Service for the API. This MUST be in the form of a URL.\n\n\ncontact\nContact Object\nThe contact information for the exposed API.\n\n\nlicense\nLicense Object\nThe license information for the exposed API.\n\n\nversion\nstring\nREQUIRED. The version of the OpenAPI document (which is distinct from the OpenAPI Specification version or the API implementation version).\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"infoTitle\"></a>title</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. The title of the API.</td>\n</tr>\n<tr>\n<td><a name=\"infoSummary\"></a>summary</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A short summary of the API.</td>\n</tr>\n<tr>\n<td><a name=\"infoDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A description of the API. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n<tr>\n<td><a name=\"infoTermsOfService\"></a>termsOfService</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A URL to the Terms of Service for the API. This MUST be in the form of a URL.</td>\n</tr>\n<tr>\n<td><a name=\"infoContact\"></a>contact</td>\n<td style=\"text-align: center;\"><a href=\"#contactObject\">Contact Object</a></td>\n<td>The contact information for the exposed API.</td>\n</tr>\n<tr>\n<td><a name=\"infoLicense\"></a>license</td>\n<td style=\"text-align: center;\"><a href=\"#licenseObject\">License Object</a></td>\n<td>The license information for the exposed API.</td>\n</tr>\n<tr>\n<td><a name=\"infoVersion\"></a>version</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. The version of the OpenAPI document (which is distinct from the <a href=\"#oasVersion\">OpenAPI Specification version</a> or the API implementation version).</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "infoTitle",
                                                                    "values": [
                                                                        {
                                                                            "text": "title",
                                                                            "html": "<a name=\"infoTitle\"></a>title"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "REQUIRED. The title of the API.",
                                                                            "html": "<strong>REQUIRED</strong>. The title of the API."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "infoSummary",
                                                                    "values": [
                                                                        {
                                                                            "text": "summary",
                                                                            "html": "<a name=\"infoSummary\"></a>summary"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "A short summary of the API.",
                                                                            "html": "A short summary of the API."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "infoDescription",
                                                                    "values": [
                                                                        {
                                                                            "text": "description",
                                                                            "html": "<a name=\"infoDescription\"></a>description"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "A description of the API. CommonMark syntax MAY be used for rich text representation.",
                                                                            "html": "A description of the API. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "infoTermsOfService",
                                                                    "values": [
                                                                        {
                                                                            "text": "termsOfService",
                                                                            "html": "<a name=\"infoTermsOfService\"></a>termsOfService"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "A URL to the Terms of Service for the API. This MUST be in the form of a URL.",
                                                                            "html": "A URL to the Terms of Service for the API. This MUST be in the form of a URL."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "infoContact",
                                                                    "values": [
                                                                        {
                                                                            "text": "contact",
                                                                            "html": "<a name=\"infoContact\"></a>contact"
                                                                        },
                                                                        {
                                                                            "text": "Contact Object",
                                                                            "html": "<a href=\"#contactObject\">Contact Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "The contact information for the exposed API.",
                                                                            "html": "The contact information for the exposed API."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "infoLicense",
                                                                    "values": [
                                                                        {
                                                                            "text": "license",
                                                                            "html": "<a name=\"infoLicense\"></a>license"
                                                                        },
                                                                        {
                                                                            "text": "License Object",
                                                                            "html": "<a href=\"#licenseObject\">License Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "The license information for the exposed API.",
                                                                            "html": "The license information for the exposed API."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "infoVersion",
                                                                    "values": [
                                                                        {
                                                                            "text": "version",
                                                                            "html": "<a name=\"infoVersion\"></a>version"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "REQUIRED. The version of the OpenAPI document (which is distinct from the OpenAPI Specification version or the API implementation version).",
                                                                            "html": "<strong>REQUIRED</strong>. The version of the OpenAPI document (which is distinct from the <a href=\"#oasVersion\">OpenAPI Specification version</a> or the API implementation version)."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_1",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Info Object Example",
                                                "html": "<h5 id=\"info-object-example\">Info Object Example</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"title\": \"Sample Pet Store App\",\n  \"summary\": \"A pet store manager.\",\n  \"description\": \"This is a sample server for a pet store.\",\n  \"termsOfService\": \"https://example.com/terms/\",\n  \"contact\": {\n    \"name\": \"API Support\",\n    \"url\": \"https://www.example.com/support\",\n    \"email\": \"support@example.com\"\n  },\n  \"license\": {\n    \"name\": \"Apache 2.0\",\n    \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n  },\n  \"version\": \"1.0.1\"\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"title\": \"Sample Pet Store App\",\n  \"summary\": \"A pet store manager.\",\n  \"description\": \"This is a sample server for a pet store.\",\n  \"termsOfService\": \"https://example.com/terms/\",\n  \"contact\": {\n    \"name\": \"API Support\",\n    \"url\": \"https://www.example.com/support\",\n    \"email\": \"support@example.com\"\n  },\n  \"license\": {\n    \"name\": \"Apache 2.0\",\n    \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n  },\n  \"version\": \"1.0.1\"\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"title\": \"Sample Pet Store App\",\n  \"summary\": \"A pet store manager.\",\n  \"description\": \"This is a sample server for a pet store.\",\n  \"termsOfService\": \"https://example.com/terms/\",\n  \"contact\": {\n    \"name\": \"API Support\",\n    \"url\": \"https://www.example.com/support\",\n    \"email\": \"support@example.com\"\n  },\n  \"license\": {\n    \"name\": \"Apache 2.0\",\n    \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n  },\n  \"version\": \"1.0.1\"\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "title: Sample Pet Store App\nsummary: A pet store manager.\ndescription: This is a sample server for a pet store.\ntermsOfService: https://example.com/terms/\ncontact:\n  name: API Support\n  url: https://www.example.com/support\n  email: support@example.com\nlicense:\n  name: Apache 2.0\n  url: https://www.apache.org/licenses/LICENSE-2.0.html\nversion: 1.0.1\n",
                                                        "html": "<pre><code class=\"language-yaml\">title: Sample Pet Store App\nsummary: A pet store manager.\ndescription: This is a sample server for a pet store.\ntermsOfService: https://example.com/terms/\ncontact:\n  name: API Support\n  url: https://www.example.com/support\n  email: support@example.com\nlicense:\n  name: Apache 2.0\n  url: https://www.apache.org/licenses/LICENSE-2.0.html\nversion: 1.0.1\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "title: Sample Pet Store App\nsummary: A pet store manager.\ndescription: This is a sample server for a pet store.\ntermsOfService: https://example.com/terms/\ncontact:\n  name: API Support\n  url: https://www.example.com/support\n  email: support@example.com\nlicense:\n  name: Apache 2.0\n  url: https://www.apache.org/licenses/LICENSE-2.0.html\nversion: 1.0.1\n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "info-object-example",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "info-object",
                                            "anchor": "infoObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "Contact Object",
                                        "html": "<h4 id=\"contact-object\"><a name=\"contactObject\"></a>Contact Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "Contact information for the exposed API.",
                                                "html": "<p>Contact information for the exposed API.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_2\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\nname\nstring\nThe identifying name of the contact person/organization.\n\n\nurl\nstring\nThe URL pointing to the contact information. This MUST be in the form of a URL.\n\n\nemail\nstring\nThe email address of the contact person/organization. This MUST be in the form of an email address.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"contactName\"></a>name</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>The identifying name of the contact person/organization.</td>\n</tr>\n<tr>\n<td><a name=\"contactUrl\"></a>url</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>The URL pointing to the contact information. This MUST be in the form of a URL.</td>\n</tr>\n<tr>\n<td><a name=\"contactEmail\"></a>email</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>The email address of the contact person/organization. This MUST be in the form of an email address.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "contactName",
                                                                    "values": [
                                                                        {
                                                                            "text": "name",
                                                                            "html": "<a name=\"contactName\"></a>name"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "The identifying name of the contact person/organization.",
                                                                            "html": "The identifying name of the contact person/organization."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "contactUrl",
                                                                    "values": [
                                                                        {
                                                                            "text": "url",
                                                                            "html": "<a name=\"contactUrl\"></a>url"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "The URL pointing to the contact information. This MUST be in the form of a URL.",
                                                                            "html": "The URL pointing to the contact information. This MUST be in the form of a URL."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "contactEmail",
                                                                    "values": [
                                                                        {
                                                                            "text": "email",
                                                                            "html": "<a name=\"contactEmail\"></a>email"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "The email address of the contact person/organization. This MUST be in the form of an email address.",
                                                                            "html": "The email address of the contact person/organization. This MUST be in the form of an email address."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_2",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Contact Object Example",
                                                "html": "<h5 id=\"contact-object-example\">Contact Object Example</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"name\": \"API Support\",\n  \"url\": \"https://www.example.com/support\",\n  \"email\": \"support@example.com\"\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"name\": \"API Support\",\n  \"url\": \"https://www.example.com/support\",\n  \"email\": \"support@example.com\"\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"name\": \"API Support\",\n  \"url\": \"https://www.example.com/support\",\n  \"email\": \"support@example.com\"\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "name: API Support\nurl: https://www.example.com/support\nemail: support@example.com\n",
                                                        "html": "<pre><code class=\"language-yaml\">name: API Support\nurl: https://www.example.com/support\nemail: support@example.com\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "name: API Support\nurl: https://www.example.com/support\nemail: support@example.com\n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "contact-object-example",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "contact-object",
                                            "anchor": "contactObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "License Object",
                                        "html": "<h4 id=\"license-object\"><a name=\"licenseObject\"></a>License Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "License information for the exposed API.",
                                                "html": "<p>License information for the exposed API.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_3\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\nname\nstring\nREQUIRED. The license name used for the API.\n\n\nidentifier\nstring\nAn SPDX license expression for the API. The identifier field is mutually exclusive of the url field.\n\n\nurl\nstring\nA URL to the license used for the API. This MUST be in the form of a URL. The url field is mutually exclusive of the identifier field.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"licenseName\"></a>name</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. The license name used for the API.</td>\n</tr>\n<tr>\n<td><a name=\"licenseIdentifier\"></a>identifier</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>An <a href=\"https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60\">SPDX</a> license expression for the API. The <code>identifier</code> field is mutually exclusive of the <code>url</code> field.</td>\n</tr>\n<tr>\n<td><a name=\"licenseUrl\"></a>url</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A URL to the license used for the API. This MUST be in the form of a URL. The <code>url</code> field is mutually exclusive of the <code>identifier</code> field.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "licenseName",
                                                                    "values": [
                                                                        {
                                                                            "text": "name",
                                                                            "html": "<a name=\"licenseName\"></a>name"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "REQUIRED. The license name used for the API.",
                                                                            "html": "<strong>REQUIRED</strong>. The license name used for the API."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "licenseIdentifier",
                                                                    "values": [
                                                                        {
                                                                            "text": "identifier",
                                                                            "html": "<a name=\"licenseIdentifier\"></a>identifier"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "An SPDX license expression for the API. The identifier field is mutually exclusive of the url field.",
                                                                            "html": "An <a href=\"https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60\">SPDX</a> license expression for the API. The <code>identifier</code> field is mutually exclusive of the <code>url</code> field."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "licenseUrl",
                                                                    "values": [
                                                                        {
                                                                            "text": "url",
                                                                            "html": "<a name=\"licenseUrl\"></a>url"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "A URL to the license used for the API. This MUST be in the form of a URL. The url field is mutually exclusive of the identifier field.",
                                                                            "html": "A URL to the license used for the API. This MUST be in the form of a URL. The <code>url</code> field is mutually exclusive of the <code>identifier</code> field."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_3",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "License Object Example",
                                                "html": "<h5 id=\"license-object-example\">License Object Example</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"name\": \"Apache 2.0\",\n  \"identifier\": \"Apache-2.0\"\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"name\": \"Apache 2.0\",\n  \"identifier\": \"Apache-2.0\"\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"name\": \"Apache 2.0\",\n  \"identifier\": \"Apache-2.0\"\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "name: Apache 2.0\nidentifier: Apache-2.0\n",
                                                        "html": "<pre><code class=\"language-yaml\">name: Apache 2.0\nidentifier: Apache-2.0\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "name: Apache 2.0\nidentifier: Apache-2.0\n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "license-object-example",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "license-object",
                                            "anchor": "licenseObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "Server Object",
                                        "html": "<h4 id=\"server-object\"><a name=\"serverObject\"></a>Server Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "An object representing a Server.",
                                                "html": "<p>An object representing a Server.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_4\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\nurl\nstring\nREQUIRED. A URL to the target host.  This URL supports Server Variables and MAY be relative, to indicate that the host location is relative to the location where the OpenAPI document is being served. Variable substitutions will be made when a variable is named in {brackets}.\n\n\ndescription\nstring\nAn optional string describing the host designated by the URL. CommonMark syntax MAY be used for rich text representation.\n\n\nvariables\nMap[string, Server Variable Object]\nA map between a variable name and its value.  The value is used for substitution in the server's URL template.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"serverUrl\"></a>url</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. A URL to the target host.  This URL supports Server Variables and MAY be relative, to indicate that the host location is relative to the location where the OpenAPI document is being served. Variable substitutions will be made when a variable is named in <code>{</code>brackets<code>}</code>.</td>\n</tr>\n<tr>\n<td><a name=\"serverDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>An optional string describing the host designated by the URL. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n<tr>\n<td><a name=\"serverVariables\"></a>variables</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, <a href=\"#serverVariableObject\">Server Variable Object</a>]</td>\n<td>A map between a variable name and its value.  The value is used for substitution in the server's URL template.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "serverUrl",
                                                                    "values": [
                                                                        {
                                                                            "text": "url",
                                                                            "html": "<a name=\"serverUrl\"></a>url"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "REQUIRED. A URL to the target host.  This URL supports Server Variables and MAY be relative, to indicate that the host location is relative to the location where the OpenAPI document is being served. Variable substitutions will be made when a variable is named in {brackets}.",
                                                                            "html": "<strong>REQUIRED</strong>. A URL to the target host.  This URL supports Server Variables and MAY be relative, to indicate that the host location is relative to the location where the OpenAPI document is being served. Variable substitutions will be made when a variable is named in <code>{</code>brackets<code>}</code>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "serverDescription",
                                                                    "values": [
                                                                        {
                                                                            "text": "description",
                                                                            "html": "<a name=\"serverDescription\"></a>description"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "An optional string describing the host designated by the URL. CommonMark syntax MAY be used for rich text representation.",
                                                                            "html": "An optional string describing the host designated by the URL. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "serverVariables",
                                                                    "values": [
                                                                        {
                                                                            "text": "variables",
                                                                            "html": "<a name=\"serverVariables\"></a>variables"
                                                                        },
                                                                        {
                                                                            "text": "Map[string, Server Variable Object]",
                                                                            "html": "Map[<code>string</code>, <a href=\"#serverVariableObject\">Server Variable Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "A map between a variable name and its value.  The value is used for substitution in the server's URL template.",
                                                                            "html": "A map between a variable name and its value.  The value is used for substitution in the server's URL template."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_4",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Server Object Example",
                                                "html": "<h5 id=\"server-object-example\">Server Object Example</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "A single server would be described as:",
                                                        "html": "<p>A single server would be described as:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"url\": \"https://development.gigantic-server.com/v1\",\n  \"description\": \"Development server\"\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"url\": \"https://development.gigantic-server.com/v1\",\n  \"description\": \"Development server\"\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"url\": \"https://development.gigantic-server.com/v1\",\n  \"description\": \"Development server\"\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "url: https://development.gigantic-server.com/v1\ndescription: Development server\n",
                                                        "html": "<pre><code class=\"language-yaml\">url: https://development.gigantic-server.com/v1\ndescription: Development server\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "url: https://development.gigantic-server.com/v1\ndescription: Development server\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "The following shows how multiple servers can be described, for example, at the OpenAPI Object's servers:",
                                                        "html": "<p>The following shows how multiple servers can be described, for example, at the OpenAPI Object's <a href=\"#oasServers\"><code>servers</code></a>:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"servers\": [\n    {\n      \"url\": \"https://development.gigantic-server.com/v1\",\n      \"description\": \"Development server\"\n    },\n    {\n      \"url\": \"https://staging.gigantic-server.com/v1\",\n      \"description\": \"Staging server\"\n    },\n    {\n      \"url\": \"https://api.gigantic-server.com/v1\",\n      \"description\": \"Production server\"\n    }\n  ]\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"servers\": [\n    {\n      \"url\": \"https://development.gigantic-server.com/v1\",\n      \"description\": \"Development server\"\n    },\n    {\n      \"url\": \"https://staging.gigantic-server.com/v1\",\n      \"description\": \"Staging server\"\n    },\n    {\n      \"url\": \"https://api.gigantic-server.com/v1\",\n      \"description\": \"Production server\"\n    }\n  ]\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"servers\": [\n    {\n      \"url\": \"https://development.gigantic-server.com/v1\",\n      \"description\": \"Development server\"\n    },\n    {\n      \"url\": \"https://staging.gigantic-server.com/v1\",\n      \"description\": \"Staging server\"\n    },\n    {\n      \"url\": \"https://api.gigantic-server.com/v1\",\n      \"description\": \"Production server\"\n    }\n  ]\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "servers:\n- url: https://development.gigantic-server.com/v1\n  description: Development server\n- url: https://staging.gigantic-server.com/v1\n  description: Staging server\n- url: https://api.gigantic-server.com/v1\n  description: Production server\n",
                                                        "html": "<pre><code class=\"language-yaml\">servers:\n- url: https://development.gigantic-server.com/v1\n  description: Development server\n- url: https://staging.gigantic-server.com/v1\n  description: Staging server\n- url: https://api.gigantic-server.com/v1\n  description: Production server\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "servers:\n- url: https://development.gigantic-server.com/v1\n  description: Development server\n- url: https://staging.gigantic-server.com/v1\n  description: Staging server\n- url: https://api.gigantic-server.com/v1\n  description: Production server\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "The following shows how variables can be used for a server configuration:",
                                                        "html": "<p>The following shows how variables can be used for a server configuration:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"servers\": [\n    {\n      \"url\": \"https://{username}.gigantic-server.com:{port}/{basePath}\",\n      \"description\": \"The production API server\",\n      \"variables\": {\n        \"username\": {\n          \"default\": \"demo\",\n          \"description\": \"this value is assigned by the service provider, in this example `gigantic-server.com`\"\n        },\n        \"port\": {\n          \"enum\": [\n            \"8443\",\n            \"443\"\n          ],\n          \"default\": \"8443\"\n        },\n        \"basePath\": {\n          \"default\": \"v2\"\n        }\n      }\n    }\n  ]\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"servers\": [\n    {\n      \"url\": \"https://{username}.gigantic-server.com:{port}/{basePath}\",\n      \"description\": \"The production API server\",\n      \"variables\": {\n        \"username\": {\n          \"default\": \"demo\",\n          \"description\": \"this value is assigned by the service provider, in this example `gigantic-server.com`\"\n        },\n        \"port\": {\n          \"enum\": [\n            \"8443\",\n            \"443\"\n          ],\n          \"default\": \"8443\"\n        },\n        \"basePath\": {\n          \"default\": \"v2\"\n        }\n      }\n    }\n  ]\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"servers\": [\n    {\n      \"url\": \"https://{username}.gigantic-server.com:{port}/{basePath}\",\n      \"description\": \"The production API server\",\n      \"variables\": {\n        \"username\": {\n          \"default\": \"demo\",\n          \"description\": \"this value is assigned by the service provider, in this example `gigantic-server.com`\"\n        },\n        \"port\": {\n          \"enum\": [\n            \"8443\",\n            \"443\"\n          ],\n          \"default\": \"8443\"\n        },\n        \"basePath\": {\n          \"default\": \"v2\"\n        }\n      }\n    }\n  ]\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "servers:\n- url: https://{username}.gigantic-server.com:{port}/{basePath}\n  description: The production API server\n  variables:\n    username:\n      # note! no enum here means it is an open value\n      default: demo\n      description: this value is assigned by the service provider, in this example `gigantic-server.com`\n    port:\n      enum:\n        - '8443'\n        - '443'\n      default: '8443'\n    basePath:\n      # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`\n      default: v2\n",
                                                        "html": "<pre><code class=\"language-yaml\">servers:\n- url: https://{username}.gigantic-server.com:{port}/{basePath}\n  description: The production API server\n  variables:\n    username:\n      # note! no enum here means it is an open value\n      default: demo\n      description: this value is assigned by the service provider, in this example `gigantic-server.com`\n    port:\n      enum:\n        - '8443'\n        - '443'\n      default: '8443'\n    basePath:\n      # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`\n      default: v2\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "servers:\n- url: https://{username}.gigantic-server.com:{port}/{basePath}\n  description: The production API server\n  variables:\n    username:\n      # note! no enum here means it is an open value\n      default: demo\n      description: this value is assigned by the service provider, in this example `gigantic-server.com`\n    port:\n      enum:\n        - '8443'\n        - '443'\n      default: '8443'\n    basePath:\n      # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`\n      default: v2\n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "server-object-example",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "server-object",
                                            "anchor": "serverObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "Server Variable Object",
                                        "html": "<h4 id=\"server-variable-object\"><a name=\"serverVariableObject\"></a>Server Variable Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "An object representing a Server Variable for server URL template substitution.",
                                                "html": "<p>An object representing a Server Variable for server URL template substitution.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_5\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\nenum\n[string]\nAn enumeration of string values to be used if the substitution options are from a limited set. The array MUST NOT be empty.\n\n\ndefault\nstring\nREQUIRED. The default value to use for substitution, which SHALL be sent if an alternate value is not supplied. Note this behavior is different than the Schema Object's treatment of default values, because in those cases parameter values are optional. If the enum is defined, the value MUST exist in the enum's values.\n\n\ndescription\nstring\nAn optional description for the server variable. CommonMark syntax MAY be used for rich text representation.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"serverVariableEnum\"></a>enum</td>\n<td style=\"text-align: center;\">[<code>string</code>]</td>\n<td>An enumeration of string values to be used if the substitution options are from a limited set. The array MUST NOT be empty.</td>\n</tr>\n<tr>\n<td><a name=\"serverVariableDefault\"></a>default</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. The default value to use for substitution, which SHALL be sent if an alternate value is <em>not</em> supplied. Note this behavior is different than the <a href=\"#schemaObject\">Schema Object's</a> treatment of default values, because in those cases parameter values are optional. If the <a href=\"#serverVariableEnum\"><code>enum</code></a> is defined, the value MUST exist in the enum's values.</td>\n</tr>\n<tr>\n<td><a name=\"serverVariableDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>An optional description for the server variable. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "serverVariableEnum",
                                                                    "values": [
                                                                        {
                                                                            "text": "enum",
                                                                            "html": "<a name=\"serverVariableEnum\"></a>enum"
                                                                        },
                                                                        {
                                                                            "text": "[string]",
                                                                            "html": "[<code>string</code>]"
                                                                        },
                                                                        {
                                                                            "text": "An enumeration of string values to be used if the substitution options are from a limited set. The array MUST NOT be empty.",
                                                                            "html": "An enumeration of string values to be used if the substitution options are from a limited set. The array MUST NOT be empty."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "serverVariableDefault",
                                                                    "values": [
                                                                        {
                                                                            "text": "default",
                                                                            "html": "<a name=\"serverVariableDefault\"></a>default"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "REQUIRED. The default value to use for substitution, which SHALL be sent if an alternate value is not supplied. Note this behavior is different than the Schema Object's treatment of default values, because in those cases parameter values are optional. If the enum is defined, the value MUST exist in the enum's values.",
                                                                            "html": "<strong>REQUIRED</strong>. The default value to use for substitution, which SHALL be sent if an alternate value is <em>not</em> supplied. Note this behavior is different than the <a href=\"#schemaObject\">Schema Object's</a> treatment of default values, because in those cases parameter values are optional. If the <a href=\"#serverVariableEnum\"><code>enum</code></a> is defined, the value MUST exist in the enum's values."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "serverVariableDescription",
                                                                    "values": [
                                                                        {
                                                                            "text": "description",
                                                                            "html": "<a name=\"serverVariableDescription\"></a>description"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "An optional description for the server variable. CommonMark syntax MAY be used for rich text representation.",
                                                                            "html": "An optional description for the server variable. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_5",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "server-variable-object",
                                            "anchor": "serverVariableObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "Components Object",
                                        "html": "<h4 id=\"components-object\"><a name=\"componentsObject\"></a>Components Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "Holds a set of reusable objects for different aspects of the OAS.\nAll objects defined within the components object will have no effect on the API unless they are explicitly referenced from properties outside the components object.",
                                                "html": "<p>Holds a set of reusable objects for different aspects of the OAS.\nAll objects defined within the components object will have no effect on the API unless they are explicitly referenced from properties outside the components object.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_6\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\n schemas\nMap[string, Schema Object]\nAn object to hold reusable Schema Objects.\n\n\n responses\nMap[string, Response Object | Reference Object]\nAn object to hold reusable Response Objects.\n\n\n parameters\nMap[string, Parameter Object | Reference Object]\nAn object to hold reusable Parameter Objects.\n\n\n examples\nMap[string, Example Object | Reference Object]\nAn object to hold reusable Example Objects.\n\n\n requestBodies\nMap[string, Request Body Object | Reference Object]\nAn object to hold reusable Request Body Objects.\n\n\n headers\nMap[string, Header Object | Reference Object]\nAn object to hold reusable Header Objects.\n\n\n securitySchemes\nMap[string, Security Scheme Object | Reference Object]\nAn object to hold reusable Security Scheme Objects.\n\n\n links\nMap[string, Link Object | Reference Object]\nAn object to hold reusable Link Objects.\n\n\n callbacks\nMap[string, Callback Object | Reference Object]\nAn object to hold reusable Callback Objects.\n\n\n pathItems\nMap[string, Path Item Object | Reference Object]\nAn object to hold reusable Path Item Object.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: left;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"componentsSchemas\"></a> schemas</td>\n<td style=\"text-align: left;\">Map[<code>string</code>, <a href=\"#schemaObject\">Schema Object</a>]</td>\n<td>An object to hold reusable <a href=\"#schemaObject\">Schema Objects</a>.</td>\n</tr>\n<tr>\n<td><a name=\"componentsResponses\"></a> responses</td>\n<td style=\"text-align: left;\">Map[<code>string</code>, <a href=\"#responseObject\">Response Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>An object to hold reusable <a href=\"#responseObject\">Response Objects</a>.</td>\n</tr>\n<tr>\n<td><a name=\"componentsParameters\"></a> parameters</td>\n<td style=\"text-align: left;\">Map[<code>string</code>, <a href=\"#parameterObject\">Parameter Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>An object to hold reusable <a href=\"#parameterObject\">Parameter Objects</a>.</td>\n</tr>\n<tr>\n<td><a name=\"componentsExamples\"></a> examples</td>\n<td style=\"text-align: left;\">Map[<code>string</code>, <a href=\"#exampleObject\">Example Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>An object to hold reusable <a href=\"#exampleObject\">Example Objects</a>.</td>\n</tr>\n<tr>\n<td><a name=\"componentsRequestBodies\"></a> requestBodies</td>\n<td style=\"text-align: left;\">Map[<code>string</code>, <a href=\"#requestBodyObject\">Request Body Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>An object to hold reusable <a href=\"#requestBodyObject\">Request Body Objects</a>.</td>\n</tr>\n<tr>\n<td><a name=\"componentsHeaders\"></a> headers</td>\n<td style=\"text-align: left;\">Map[<code>string</code>, <a href=\"#headerObject\">Header Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>An object to hold reusable <a href=\"#headerObject\">Header Objects</a>.</td>\n</tr>\n<tr>\n<td><a name=\"componentsSecuritySchemes\"></a> securitySchemes</td>\n<td style=\"text-align: left;\">Map[<code>string</code>, <a href=\"#securitySchemeObject\">Security Scheme Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>An object to hold reusable <a href=\"#securitySchemeObject\">Security Scheme Objects</a>.</td>\n</tr>\n<tr>\n<td><a name=\"componentsLinks\"></a> links</td>\n<td style=\"text-align: left;\">Map[<code>string</code>, <a href=\"#linkObject\">Link Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>An object to hold reusable <a href=\"#linkObject\">Link Objects</a>.</td>\n</tr>\n<tr>\n<td><a name=\"componentsCallbacks\"></a> callbacks</td>\n<td style=\"text-align: left;\">Map[<code>string</code>, <a href=\"#callbackObject\">Callback Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>An object to hold reusable <a href=\"#callbackObject\">Callback Objects</a>.</td>\n</tr>\n<tr>\n<td><a name=\"componentsPathItems\"></a> pathItems</td>\n<td style=\"text-align: left;\">Map[<code>string</code>, <a href=\"#pathItemObject\">Path Item Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>An object to hold reusable <a href=\"#pathItemObject\">Path Item Object</a>.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "componentsSchemas",
                                                                    "values": [
                                                                        {
                                                                            "text": " schemas",
                                                                            "html": "<a name=\"componentsSchemas\"></a> schemas"
                                                                        },
                                                                        {
                                                                            "text": "Map[string, Schema Object]",
                                                                            "html": "Map[<code>string</code>, <a href=\"#schemaObject\">Schema Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "An object to hold reusable Schema Objects.",
                                                                            "html": "An object to hold reusable <a href=\"#schemaObject\">Schema Objects</a>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "componentsResponses",
                                                                    "values": [
                                                                        {
                                                                            "text": " responses",
                                                                            "html": "<a name=\"componentsResponses\"></a> responses"
                                                                        },
                                                                        {
                                                                            "text": "Map[string, Response Object | Reference Object]",
                                                                            "html": "Map[<code>string</code>, <a href=\"#responseObject\">Response Object</a> | <a href=\"#referenceObject\">Reference Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "An object to hold reusable Response Objects.",
                                                                            "html": "An object to hold reusable <a href=\"#responseObject\">Response Objects</a>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "componentsParameters",
                                                                    "values": [
                                                                        {
                                                                            "text": " parameters",
                                                                            "html": "<a name=\"componentsParameters\"></a> parameters"
                                                                        },
                                                                        {
                                                                            "text": "Map[string, Parameter Object | Reference Object]",
                                                                            "html": "Map[<code>string</code>, <a href=\"#parameterObject\">Parameter Object</a> | <a href=\"#referenceObject\">Reference Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "An object to hold reusable Parameter Objects.",
                                                                            "html": "An object to hold reusable <a href=\"#parameterObject\">Parameter Objects</a>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "componentsExamples",
                                                                    "values": [
                                                                        {
                                                                            "text": " examples",
                                                                            "html": "<a name=\"componentsExamples\"></a> examples"
                                                                        },
                                                                        {
                                                                            "text": "Map[string, Example Object | Reference Object]",
                                                                            "html": "Map[<code>string</code>, <a href=\"#exampleObject\">Example Object</a> | <a href=\"#referenceObject\">Reference Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "An object to hold reusable Example Objects.",
                                                                            "html": "An object to hold reusable <a href=\"#exampleObject\">Example Objects</a>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "componentsRequestBodies",
                                                                    "values": [
                                                                        {
                                                                            "text": " requestBodies",
                                                                            "html": "<a name=\"componentsRequestBodies\"></a> requestBodies"
                                                                        },
                                                                        {
                                                                            "text": "Map[string, Request Body Object | Reference Object]",
                                                                            "html": "Map[<code>string</code>, <a href=\"#requestBodyObject\">Request Body Object</a> | <a href=\"#referenceObject\">Reference Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "An object to hold reusable Request Body Objects.",
                                                                            "html": "An object to hold reusable <a href=\"#requestBodyObject\">Request Body Objects</a>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "componentsHeaders",
                                                                    "values": [
                                                                        {
                                                                            "text": " headers",
                                                                            "html": "<a name=\"componentsHeaders\"></a> headers"
                                                                        },
                                                                        {
                                                                            "text": "Map[string, Header Object | Reference Object]",
                                                                            "html": "Map[<code>string</code>, <a href=\"#headerObject\">Header Object</a> | <a href=\"#referenceObject\">Reference Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "An object to hold reusable Header Objects.",
                                                                            "html": "An object to hold reusable <a href=\"#headerObject\">Header Objects</a>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "componentsSecuritySchemes",
                                                                    "values": [
                                                                        {
                                                                            "text": " securitySchemes",
                                                                            "html": "<a name=\"componentsSecuritySchemes\"></a> securitySchemes"
                                                                        },
                                                                        {
                                                                            "text": "Map[string, Security Scheme Object | Reference Object]",
                                                                            "html": "Map[<code>string</code>, <a href=\"#securitySchemeObject\">Security Scheme Object</a> | <a href=\"#referenceObject\">Reference Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "An object to hold reusable Security Scheme Objects.",
                                                                            "html": "An object to hold reusable <a href=\"#securitySchemeObject\">Security Scheme Objects</a>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "componentsLinks",
                                                                    "values": [
                                                                        {
                                                                            "text": " links",
                                                                            "html": "<a name=\"componentsLinks\"></a> links"
                                                                        },
                                                                        {
                                                                            "text": "Map[string, Link Object | Reference Object]",
                                                                            "html": "Map[<code>string</code>, <a href=\"#linkObject\">Link Object</a> | <a href=\"#referenceObject\">Reference Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "An object to hold reusable Link Objects.",
                                                                            "html": "An object to hold reusable <a href=\"#linkObject\">Link Objects</a>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "componentsCallbacks",
                                                                    "values": [
                                                                        {
                                                                            "text": " callbacks",
                                                                            "html": "<a name=\"componentsCallbacks\"></a> callbacks"
                                                                        },
                                                                        {
                                                                            "text": "Map[string, Callback Object | Reference Object]",
                                                                            "html": "Map[<code>string</code>, <a href=\"#callbackObject\">Callback Object</a> | <a href=\"#referenceObject\">Reference Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "An object to hold reusable Callback Objects.",
                                                                            "html": "An object to hold reusable <a href=\"#callbackObject\">Callback Objects</a>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "componentsPathItems",
                                                                    "values": [
                                                                        {
                                                                            "text": " pathItems",
                                                                            "html": "<a name=\"componentsPathItems\"></a> pathItems"
                                                                        },
                                                                        {
                                                                            "text": "Map[string, Path Item Object | Reference Object]",
                                                                            "html": "Map[<code>string</code>, <a href=\"#pathItemObject\">Path Item Object</a> | <a href=\"#referenceObject\">Reference Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "An object to hold reusable Path Item Object.",
                                                                            "html": "An object to hold reusable <a href=\"#pathItemObject\">Path Item Object</a>."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "All the fixed fields declared above are objects that MUST use keys that match the regular expression: ^[a-zA-Z0-9\\.\\-_]+$.",
                                                        "html": "<p>All the fixed fields declared above are objects that MUST use keys that match the regular expression: <code>^[a-zA-Z0-9\\.\\-_]+$</code>.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "Field Name Examples:",
                                                        "html": "<p>Field Name Examples:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "User\nUser_1\nUser_Name\nuser-name\nmy.org.User\n",
                                                        "html": "<pre><code>User\nUser_1\nUser_Name\nuser-name\nmy.org.User\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": null,
                                                            "text": "User\nUser_1\nUser_Name\nuser-name\nmy.org.User\n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_6",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Components Object Example",
                                                "html": "<h5 id=\"components-object-example\">Components Object Example</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "\"components\": {\n  \"schemas\": {\n    \"GeneralError\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"code\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        },\n        \"message\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Category\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Tag\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  },\n  \"parameters\": {\n    \"skipParam\": {\n      \"name\": \"skip\",\n      \"in\": \"query\",\n      \"description\": \"number of items to skip\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    },\n    \"limitParam\": {\n      \"name\": \"limit\",\n      \"in\": \"query\",\n      \"description\": \"max records to return\",\n      \"required\": true,\n      \"schema\" : {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    }\n  },\n  \"responses\": {\n    \"NotFound\": {\n      \"description\": \"Entity not found.\"\n    },\n    \"IllegalInput\": {\n      \"description\": \"Illegal input for operation.\"\n    },\n    \"GeneralError\": {\n      \"description\": \"General Error\",\n      \"content\": {\n        \"application/json\": {\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/GeneralError\"\n          }\n        }\n      }\n    }\n  },\n  \"securitySchemes\": {\n    \"api_key\": {\n      \"type\": \"apiKey\",\n      \"name\": \"api_key\",\n      \"in\": \"header\"\n    },\n    \"petstore_auth\": {\n      \"type\": \"oauth2\",\n      \"flows\": {\n        \"implicit\": {\n          \"authorizationUrl\": \"https://example.org/api/oauth/dialog\",\n          \"scopes\": {\n            \"write:pets\": \"modify pets in your account\",\n            \"read:pets\": \"read your pets\"\n          }\n        }\n      }\n    }\n  }\n}\n",
                                                        "html": "<pre><code class=\"language-json\">\"components\": {\n  \"schemas\": {\n    \"GeneralError\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"code\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        },\n        \"message\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Category\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Tag\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  },\n  \"parameters\": {\n    \"skipParam\": {\n      \"name\": \"skip\",\n      \"in\": \"query\",\n      \"description\": \"number of items to skip\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    },\n    \"limitParam\": {\n      \"name\": \"limit\",\n      \"in\": \"query\",\n      \"description\": \"max records to return\",\n      \"required\": true,\n      \"schema\" : {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    }\n  },\n  \"responses\": {\n    \"NotFound\": {\n      \"description\": \"Entity not found.\"\n    },\n    \"IllegalInput\": {\n      \"description\": \"Illegal input for operation.\"\n    },\n    \"GeneralError\": {\n      \"description\": \"General Error\",\n      \"content\": {\n        \"application/json\": {\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/GeneralError\"\n          }\n        }\n      }\n    }\n  },\n  \"securitySchemes\": {\n    \"api_key\": {\n      \"type\": \"apiKey\",\n      \"name\": \"api_key\",\n      \"in\": \"header\"\n    },\n    \"petstore_auth\": {\n      \"type\": \"oauth2\",\n      \"flows\": {\n        \"implicit\": {\n          \"authorizationUrl\": \"https://example.org/api/oauth/dialog\",\n          \"scopes\": {\n            \"write:pets\": \"modify pets in your account\",\n            \"read:pets\": \"read your pets\"\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "\"components\": {\n  \"schemas\": {\n    \"GeneralError\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"code\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        },\n        \"message\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Category\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Tag\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  },\n  \"parameters\": {\n    \"skipParam\": {\n      \"name\": \"skip\",\n      \"in\": \"query\",\n      \"description\": \"number of items to skip\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    },\n    \"limitParam\": {\n      \"name\": \"limit\",\n      \"in\": \"query\",\n      \"description\": \"max records to return\",\n      \"required\": true,\n      \"schema\" : {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    }\n  },\n  \"responses\": {\n    \"NotFound\": {\n      \"description\": \"Entity not found.\"\n    },\n    \"IllegalInput\": {\n      \"description\": \"Illegal input for operation.\"\n    },\n    \"GeneralError\": {\n      \"description\": \"General Error\",\n      \"content\": {\n        \"application/json\": {\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/GeneralError\"\n          }\n        }\n      }\n    }\n  },\n  \"securitySchemes\": {\n    \"api_key\": {\n      \"type\": \"apiKey\",\n      \"name\": \"api_key\",\n      \"in\": \"header\"\n    },\n    \"petstore_auth\": {\n      \"type\": \"oauth2\",\n      \"flows\": {\n        \"implicit\": {\n          \"authorizationUrl\": \"https://example.org/api/oauth/dialog\",\n          \"scopes\": {\n            \"write:pets\": \"modify pets in your account\",\n            \"read:pets\": \"read your pets\"\n          }\n        }\n      }\n    }\n  }\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "components:\n  schemas:\n    GeneralError:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n  parameters:\n    skipParam:\n      name: skip\n      in: query\n      description: number of items to skip\n      required: true\n      schema:\n        type: integer\n        format: int32\n    limitParam:\n      name: limit\n      in: query\n      description: max records to return\n      required: true\n      schema:\n        type: integer\n        format: int32\n  responses:\n    NotFound:\n      description: Entity not found.\n    IllegalInput:\n      description: Illegal input for operation.\n    GeneralError:\n      description: General Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GeneralError'\n  securitySchemes:\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n    petstore_auth:\n      type: oauth2\n      flows: \n        implicit:\n          authorizationUrl: https://example.org/api/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n",
                                                        "html": "<pre><code class=\"language-yaml\">components:\n  schemas:\n    GeneralError:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n  parameters:\n    skipParam:\n      name: skip\n      in: query\n      description: number of items to skip\n      required: true\n      schema:\n        type: integer\n        format: int32\n    limitParam:\n      name: limit\n      in: query\n      description: max records to return\n      required: true\n      schema:\n        type: integer\n        format: int32\n  responses:\n    NotFound:\n      description: Entity not found.\n    IllegalInput:\n      description: Illegal input for operation.\n    GeneralError:\n      description: General Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GeneralError'\n  securitySchemes:\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n    petstore_auth:\n      type: oauth2\n      flows: \n        implicit:\n          authorizationUrl: https://example.org/api/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "components:\n  schemas:\n    GeneralError:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n  parameters:\n    skipParam:\n      name: skip\n      in: query\n      description: number of items to skip\n      required: true\n      schema:\n        type: integer\n        format: int32\n    limitParam:\n      name: limit\n      in: query\n      description: max records to return\n      required: true\n      schema:\n        type: integer\n        format: int32\n  responses:\n    NotFound:\n      description: Entity not found.\n    IllegalInput:\n      description: Illegal input for operation.\n    GeneralError:\n      description: General Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GeneralError'\n  securitySchemes:\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n    petstore_auth:\n      type: oauth2\n      flows: \n        implicit:\n          authorizationUrl: https://example.org/api/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "components-object-example",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "components-object",
                                            "anchor": "componentsObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "Paths Object",
                                        "html": "<h4 id=\"paths-object\"><a name=\"pathsObject\"></a>Paths Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "Holds the relative paths to the individual endpoints and their operations.\nThe path is appended to the URL from the Server Object in order to construct the full URL.  The Paths MAY be empty, due to Access Control List (ACL) constraints.",
                                                "html": "<p>Holds the relative paths to the individual endpoints and their operations.\nThe path is appended to the URL from the <a href=\"#serverObject\"><code>Server Object</code></a> in order to construct the full URL.  The Paths MAY be empty, due to <a href=\"#securityFiltering\">Access Control List (ACL) constraints</a>.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Patterned Fields",
                                                "html": "<h5 id=\"patterned-fields\">Patterned Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Pattern\nType\nDescription\n\n\n\n\n/{path}\nPath Item Object\nA relative path to an individual endpoint. The field name MUST begin with a forward slash (/). The path is appended (no relative URL resolution) to the expanded URL from the Server Object's url field in order to construct the full URL. Path templating is allowed. When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts. Templated paths with the same hierarchy but different templated names MUST NOT exist as they are identical. In case of ambiguous matching, it's up to the tooling to decide which one to use.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Pattern</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"pathsPath\"></a>/{path}</td>\n<td style=\"text-align: center;\"><a href=\"#pathItemObject\">Path Item Object</a></td>\n<td>A relative path to an individual endpoint. The field name MUST begin with a forward slash (<code>/</code>). The path is <strong>appended</strong> (no relative URL resolution) to the expanded URL from the <a href=\"#serverObject\"><code>Server Object</code></a>'s <code>url</code> field in order to construct the full URL. <a href=\"#pathTemplating\">Path templating</a> is allowed. When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts. Templated paths with the same hierarchy but different templated names MUST NOT exist as they are identical. In case of ambiguous matching, it's up to the tooling to decide which one to use.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Pattern",
                                                                    "html": "Field Pattern"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "pathsPath",
                                                                    "values": [
                                                                        {
                                                                            "text": "/{path}",
                                                                            "html": "<a name=\"pathsPath\"></a>/{path}"
                                                                        },
                                                                        {
                                                                            "text": "Path Item Object",
                                                                            "html": "<a href=\"#pathItemObject\">Path Item Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "A relative path to an individual endpoint. The field name MUST begin with a forward slash (/). The path is appended (no relative URL resolution) to the expanded URL from the Server Object's url field in order to construct the full URL. Path templating is allowed. When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts. Templated paths with the same hierarchy but different templated names MUST NOT exist as they are identical. In case of ambiguous matching, it's up to the tooling to decide which one to use.",
                                                                            "html": "A relative path to an individual endpoint. The field name MUST begin with a forward slash (<code>/</code>). The path is <strong>appended</strong> (no relative URL resolution) to the expanded URL from the <a href=\"#serverObject\"><code>Server Object</code></a>'s <code>url</code> field in order to construct the full URL. <a href=\"#pathTemplating\">Path templating</a> is allowed. When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts. Templated paths with the same hierarchy but different templated names MUST NOT exist as they are identical. In case of ambiguous matching, it's up to the tooling to decide which one to use."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "patterned-fields",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Path Templating Matching",
                                                "html": "<h5 id=\"path-templating-matching\">Path Templating Matching</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "Assuming the following paths, the concrete definition, /pets/mine, will be matched first if used:",
                                                        "html": "<p>Assuming the following paths, the concrete definition, <code>/pets/mine</code>, will be matched first if used:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "  /pets/{petId}\n  /pets/mine\n",
                                                        "html": "<pre><code>  /pets/{petId}\n  /pets/mine\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": null,
                                                            "text": "  /pets/{petId}\n  /pets/mine\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "The following paths are considered identical and invalid:",
                                                        "html": "<p>The following paths are considered identical and invalid:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "  /pets/{petId}\n  /pets/{name}\n",
                                                        "html": "<pre><code>  /pets/{petId}\n  /pets/{name}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": null,
                                                            "text": "  /pets/{petId}\n  /pets/{name}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "The following may lead to ambiguous resolution:",
                                                        "html": "<p>The following may lead to ambiguous resolution:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "  /{entity}/me\n  /books/{id}\n",
                                                        "html": "<pre><code>  /{entity}/me\n  /books/{id}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": null,
                                                            "text": "  /{entity}/me\n  /books/{id}\n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "path-templating-matching",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Paths Object Example",
                                                "html": "<h5 id=\"paths-object-example\">Paths Object Example</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"/pets\": {\n    \"get\": {\n      \"description\": \"Returns all pets from the system that the user has access to\",\n      \"responses\": {\n        \"200\": {          \n          \"description\": \"A list of pets.\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/pet\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"/pets\": {\n    \"get\": {\n      \"description\": \"Returns all pets from the system that the user has access to\",\n      \"responses\": {\n        \"200\": {          \n          \"description\": \"A list of pets.\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/pet\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"/pets\": {\n    \"get\": {\n      \"description\": \"Returns all pets from the system that the user has access to\",\n      \"responses\": {\n        \"200\": {          \n          \"description\": \"A list of pets.\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/pet\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "/pets:\n  get:\n    description: Returns all pets from the system that the user has access to\n    responses:\n      '200':\n        description: A list of pets.\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/pet'\n",
                                                        "html": "<pre><code class=\"language-yaml\">/pets:\n  get:\n    description: Returns all pets from the system that the user has access to\n    responses:\n      '200':\n        description: A list of pets.\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/pet'\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "/pets:\n  get:\n    description: Returns all pets from the system that the user has access to\n    responses:\n      '200':\n        description: A list of pets.\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/pet'\n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "paths-object-example",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "paths-object",
                                            "anchor": "pathsObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "Path Item Object",
                                        "html": "<h4 id=\"path-item-object\"><a name=\"pathItemObject\"></a>Path Item Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "Describes the operations available on a single path.\nA Path Item MAY be empty, due to ACL constraints.\nThe path itself is still exposed to the documentation viewer but they will not know which operations and parameters are available.",
                                                "html": "<p>Describes the operations available on a single path.\nA Path Item MAY be empty, due to <a href=\"#securityFiltering\">ACL constraints</a>.\nThe path itself is still exposed to the documentation viewer but they will not know which operations and parameters are available.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_7\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\n$ref\nstring\nAllows for a referenced definition of this path item. The referenced structure MUST be in the form of a Path Item Object.  In case a Path Item Object field appears both in the defined object and the referenced object, the behavior is undefined. See the rules for resolving Relative References.\n\n\nsummary\nstring\nAn optional, string summary, intended to apply to all operations in this path.\n\n\ndescription\nstring\nAn optional, string description, intended to apply to all operations in this path. CommonMark syntax MAY be used for rich text representation.\n\n\nget\nOperation Object\nA definition of a GET operation on this path.\n\n\nput\nOperation Object\nA definition of a PUT operation on this path.\n\n\npost\nOperation Object\nA definition of a POST operation on this path.\n\n\ndelete\nOperation Object\nA definition of a DELETE operation on this path.\n\n\noptions\nOperation Object\nA definition of a OPTIONS operation on this path.\n\n\nhead\nOperation Object\nA definition of a HEAD operation on this path.\n\n\npatch\nOperation Object\nA definition of a PATCH operation on this path.\n\n\ntrace\nOperation Object\nA definition of a TRACE operation on this path.\n\n\nservers\n[Server Object]\nAn alternative server array to service all operations in this path.\n\n\nparameters\n[Parameter Object | Reference Object]\nA list of parameters that are applicable for all the operations described under this path. These parameters can be overridden at the operation level, but cannot be removed there. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a name and location. The list can use the Reference Object to link to parameters that are defined at the OpenAPI Object's components/parameters.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"pathItemRef\"></a>$ref</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>Allows for a referenced definition of this path item. The referenced structure MUST be in the form of a <a href=\"#pathItemObject\">Path Item Object</a>.  In case a Path Item Object field appears both in the defined object and the referenced object, the behavior is undefined. See the rules for resolving <a href=\"#relativeReferencesURI\">Relative References</a>.</td>\n</tr>\n<tr>\n<td><a name=\"pathItemSummary\"></a>summary</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>An optional, string summary, intended to apply to all operations in this path.</td>\n</tr>\n<tr>\n<td><a name=\"pathItemDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>An optional, string description, intended to apply to all operations in this path. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n<tr>\n<td><a name=\"pathItemGet\"></a>get</td>\n<td style=\"text-align: center;\"><a href=\"#operationObject\">Operation Object</a></td>\n<td>A definition of a GET operation on this path.</td>\n</tr>\n<tr>\n<td><a name=\"pathItemPut\"></a>put</td>\n<td style=\"text-align: center;\"><a href=\"#operationObject\">Operation Object</a></td>\n<td>A definition of a PUT operation on this path.</td>\n</tr>\n<tr>\n<td><a name=\"pathItemPost\"></a>post</td>\n<td style=\"text-align: center;\"><a href=\"#operationObject\">Operation Object</a></td>\n<td>A definition of a POST operation on this path.</td>\n</tr>\n<tr>\n<td><a name=\"pathItemDelete\"></a>delete</td>\n<td style=\"text-align: center;\"><a href=\"#operationObject\">Operation Object</a></td>\n<td>A definition of a DELETE operation on this path.</td>\n</tr>\n<tr>\n<td><a name=\"pathItemOptions\"></a>options</td>\n<td style=\"text-align: center;\"><a href=\"#operationObject\">Operation Object</a></td>\n<td>A definition of a OPTIONS operation on this path.</td>\n</tr>\n<tr>\n<td><a name=\"pathItemHead\"></a>head</td>\n<td style=\"text-align: center;\"><a href=\"#operationObject\">Operation Object</a></td>\n<td>A definition of a HEAD operation on this path.</td>\n</tr>\n<tr>\n<td><a name=\"pathItemPatch\"></a>patch</td>\n<td style=\"text-align: center;\"><a href=\"#operationObject\">Operation Object</a></td>\n<td>A definition of a PATCH operation on this path.</td>\n</tr>\n<tr>\n<td><a name=\"pathItemTrace\"></a>trace</td>\n<td style=\"text-align: center;\"><a href=\"#operationObject\">Operation Object</a></td>\n<td>A definition of a TRACE operation on this path.</td>\n</tr>\n<tr>\n<td><a name=\"pathItemServers\"></a>servers</td>\n<td style=\"text-align: center;\">[<a href=\"#serverObject\">Server Object</a>]</td>\n<td>An alternative <code>server</code> array to service all operations in this path.</td>\n</tr>\n<tr>\n<td><a name=\"pathItemParameters\"></a>parameters</td>\n<td style=\"text-align: center;\">[<a href=\"#parameterObject\">Parameter Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>A list of parameters that are applicable for all the operations described under this path. These parameters can be overridden at the operation level, but cannot be removed there. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a <a href=\"#parameterName\">name</a> and <a href=\"#parameterIn\">location</a>. The list can use the <a href=\"#referenceObject\">Reference Object</a> to link to parameters that are defined at the <a href=\"#componentsParameters\">OpenAPI Object's components/parameters</a>.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "pathItemRef",
                                                                    "values": [
                                                                        {
                                                                            "text": "$ref",
                                                                            "html": "<a name=\"pathItemRef\"></a>$ref"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "Allows for a referenced definition of this path item. The referenced structure MUST be in the form of a Path Item Object.  In case a Path Item Object field appears both in the defined object and the referenced object, the behavior is undefined. See the rules for resolving Relative References.",
                                                                            "html": "Allows for a referenced definition of this path item. The referenced structure MUST be in the form of a <a href=\"#pathItemObject\">Path Item Object</a>.  In case a Path Item Object field appears both in the defined object and the referenced object, the behavior is undefined. See the rules for resolving <a href=\"#relativeReferencesURI\">Relative References</a>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "pathItemSummary",
                                                                    "values": [
                                                                        {
                                                                            "text": "summary",
                                                                            "html": "<a name=\"pathItemSummary\"></a>summary"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "An optional, string summary, intended to apply to all operations in this path.",
                                                                            "html": "An optional, string summary, intended to apply to all operations in this path."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "pathItemDescription",
                                                                    "values": [
                                                                        {
                                                                            "text": "description",
                                                                            "html": "<a name=\"pathItemDescription\"></a>description"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "An optional, string description, intended to apply to all operations in this path. CommonMark syntax MAY be used for rich text representation.",
                                                                            "html": "An optional, string description, intended to apply to all operations in this path. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "pathItemGet",
                                                                    "values": [
                                                                        {
                                                                            "text": "get",
                                                                            "html": "<a name=\"pathItemGet\"></a>get"
                                                                        },
                                                                        {
                                                                            "text": "Operation Object",
                                                                            "html": "<a href=\"#operationObject\">Operation Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "A definition of a GET operation on this path.",
                                                                            "html": "A definition of a GET operation on this path."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "pathItemPut",
                                                                    "values": [
                                                                        {
                                                                            "text": "put",
                                                                            "html": "<a name=\"pathItemPut\"></a>put"
                                                                        },
                                                                        {
                                                                            "text": "Operation Object",
                                                                            "html": "<a href=\"#operationObject\">Operation Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "A definition of a PUT operation on this path.",
                                                                            "html": "A definition of a PUT operation on this path."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "pathItemPost",
                                                                    "values": [
                                                                        {
                                                                            "text": "post",
                                                                            "html": "<a name=\"pathItemPost\"></a>post"
                                                                        },
                                                                        {
                                                                            "text": "Operation Object",
                                                                            "html": "<a href=\"#operationObject\">Operation Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "A definition of a POST operation on this path.",
                                                                            "html": "A definition of a POST operation on this path."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "pathItemDelete",
                                                                    "values": [
                                                                        {
                                                                            "text": "delete",
                                                                            "html": "<a name=\"pathItemDelete\"></a>delete"
                                                                        },
                                                                        {
                                                                            "text": "Operation Object",
                                                                            "html": "<a href=\"#operationObject\">Operation Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "A definition of a DELETE operation on this path.",
                                                                            "html": "A definition of a DELETE operation on this path."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "pathItemOptions",
                                                                    "values": [
                                                                        {
                                                                            "text": "options",
                                                                            "html": "<a name=\"pathItemOptions\"></a>options"
                                                                        },
                                                                        {
                                                                            "text": "Operation Object",
                                                                            "html": "<a href=\"#operationObject\">Operation Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "A definition of a OPTIONS operation on this path.",
                                                                            "html": "A definition of a OPTIONS operation on this path."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "pathItemHead",
                                                                    "values": [
                                                                        {
                                                                            "text": "head",
                                                                            "html": "<a name=\"pathItemHead\"></a>head"
                                                                        },
                                                                        {
                                                                            "text": "Operation Object",
                                                                            "html": "<a href=\"#operationObject\">Operation Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "A definition of a HEAD operation on this path.",
                                                                            "html": "A definition of a HEAD operation on this path."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "pathItemPatch",
                                                                    "values": [
                                                                        {
                                                                            "text": "patch",
                                                                            "html": "<a name=\"pathItemPatch\"></a>patch"
                                                                        },
                                                                        {
                                                                            "text": "Operation Object",
                                                                            "html": "<a href=\"#operationObject\">Operation Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "A definition of a PATCH operation on this path.",
                                                                            "html": "A definition of a PATCH operation on this path."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "pathItemTrace",
                                                                    "values": [
                                                                        {
                                                                            "text": "trace",
                                                                            "html": "<a name=\"pathItemTrace\"></a>trace"
                                                                        },
                                                                        {
                                                                            "text": "Operation Object",
                                                                            "html": "<a href=\"#operationObject\">Operation Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "A definition of a TRACE operation on this path.",
                                                                            "html": "A definition of a TRACE operation on this path."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "pathItemServers",
                                                                    "values": [
                                                                        {
                                                                            "text": "servers",
                                                                            "html": "<a name=\"pathItemServers\"></a>servers"
                                                                        },
                                                                        {
                                                                            "text": "[Server Object]",
                                                                            "html": "[<a href=\"#serverObject\">Server Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "An alternative server array to service all operations in this path.",
                                                                            "html": "An alternative <code>server</code> array to service all operations in this path."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "pathItemParameters",
                                                                    "values": [
                                                                        {
                                                                            "text": "parameters",
                                                                            "html": "<a name=\"pathItemParameters\"></a>parameters"
                                                                        },
                                                                        {
                                                                            "text": "[Parameter Object | Reference Object]",
                                                                            "html": "[<a href=\"#parameterObject\">Parameter Object</a> | <a href=\"#referenceObject\">Reference Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "A list of parameters that are applicable for all the operations described under this path. These parameters can be overridden at the operation level, but cannot be removed there. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a name and location. The list can use the Reference Object to link to parameters that are defined at the OpenAPI Object's components/parameters.",
                                                                            "html": "A list of parameters that are applicable for all the operations described under this path. These parameters can be overridden at the operation level, but cannot be removed there. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a <a href=\"#parameterName\">name</a> and <a href=\"#parameterIn\">location</a>. The list can use the <a href=\"#referenceObject\">Reference Object</a> to link to parameters that are defined at the <a href=\"#componentsParameters\">OpenAPI Object's components/parameters</a>."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_7",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Path Item Object Example",
                                                "html": "<h5 id=\"path-item-object-example\">Path Item Object Example</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"get\": {\n    \"description\": \"Returns pets based on ID\",\n    \"summary\": \"Find pets by ID\",\n    \"operationId\": \"getPetsById\",\n    \"responses\": {\n      \"200\": {\n        \"description\": \"pet response\",\n        \"content\": {\n          \"*/*\": {\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"$ref\": \"#/components/schemas/Pet\"\n              }\n            }\n          }\n        }\n      },\n      \"default\": {\n        \"description\": \"error payload\",\n        \"content\": {\n          \"text/html\": {\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/ErrorModel\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \"parameters\": [\n    {\n      \"name\": \"id\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet to use\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"style\": \"simple\"\n    }\n  ]\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"get\": {\n    \"description\": \"Returns pets based on ID\",\n    \"summary\": \"Find pets by ID\",\n    \"operationId\": \"getPetsById\",\n    \"responses\": {\n      \"200\": {\n        \"description\": \"pet response\",\n        \"content\": {\n          \"*/*\": {\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"$ref\": \"#/components/schemas/Pet\"\n              }\n            }\n          }\n        }\n      },\n      \"default\": {\n        \"description\": \"error payload\",\n        \"content\": {\n          \"text/html\": {\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/ErrorModel\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \"parameters\": [\n    {\n      \"name\": \"id\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet to use\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"style\": \"simple\"\n    }\n  ]\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"get\": {\n    \"description\": \"Returns pets based on ID\",\n    \"summary\": \"Find pets by ID\",\n    \"operationId\": \"getPetsById\",\n    \"responses\": {\n      \"200\": {\n        \"description\": \"pet response\",\n        \"content\": {\n          \"*/*\": {\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"$ref\": \"#/components/schemas/Pet\"\n              }\n            }\n          }\n        }\n      },\n      \"default\": {\n        \"description\": \"error payload\",\n        \"content\": {\n          \"text/html\": {\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/ErrorModel\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \"parameters\": [\n    {\n      \"name\": \"id\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet to use\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"style\": \"simple\"\n    }\n  ]\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "get:\n  description: Returns pets based on ID\n  summary: Find pets by ID\n  operationId: getPetsById\n  responses:\n    '200':\n      description: pet response\n      content:\n        '*/*' :\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/Pet'\n    default:\n      description: error payload\n      content:\n        'text/html':\n          schema:\n            $ref: '#/components/schemas/ErrorModel'\nparameters:\n- name: id\n  in: path\n  description: ID of pet to use\n  required: true\n  schema:\n    type: array\n    items:\n      type: string  \n  style: simple\n",
                                                        "html": "<pre><code class=\"language-yaml\">get:\n  description: Returns pets based on ID\n  summary: Find pets by ID\n  operationId: getPetsById\n  responses:\n    '200':\n      description: pet response\n      content:\n        '*/*' :\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/Pet'\n    default:\n      description: error payload\n      content:\n        'text/html':\n          schema:\n            $ref: '#/components/schemas/ErrorModel'\nparameters:\n- name: id\n  in: path\n  description: ID of pet to use\n  required: true\n  schema:\n    type: array\n    items:\n      type: string  \n  style: simple\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "get:\n  description: Returns pets based on ID\n  summary: Find pets by ID\n  operationId: getPetsById\n  responses:\n    '200':\n      description: pet response\n      content:\n        '*/*' :\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/Pet'\n    default:\n      description: error payload\n      content:\n        'text/html':\n          schema:\n            $ref: '#/components/schemas/ErrorModel'\nparameters:\n- name: id\n  in: path\n  description: ID of pet to use\n  required: true\n  schema:\n    type: array\n    items:\n      type: string  \n  style: simple\n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "path-item-object-example",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "path-item-object",
                                            "anchor": "pathItemObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "Operation Object",
                                        "html": "<h4 id=\"operation-object\"><a name=\"operationObject\"></a>Operation Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "Describes a single API operation on a path.",
                                                "html": "<p>Describes a single API operation on a path.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_8\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\ntags\n[string]\nA list of tags for API documentation control. Tags can be used for logical grouping of operations by resources or any other qualifier.\n\n\nsummary\nstring\nA short summary of what the operation does.\n\n\ndescription\nstring\nA verbose explanation of the operation behavior. CommonMark syntax MAY be used for rich text representation.\n\n\nexternalDocs\nExternal Documentation Object\nAdditional external documentation for this operation.\n\n\noperationId\nstring\nUnique string used to identify the operation. The id MUST be unique among all operations described in the API. The operationId value is case-sensitive. Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is RECOMMENDED to follow common programming naming conventions.\n\n\nparameters\n[Parameter Object | Reference Object]\nA list of parameters that are applicable for this operation. If a parameter is already defined at the Path Item, the new definition will override it but can never remove it. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a name and location. The list can use the Reference Object to link to parameters that are defined at the OpenAPI Object's components/parameters.\n\n\nrequestBody\nRequest Body Object | Reference Object\nThe request body applicable for this operation.  The requestBody is fully supported in HTTP methods where the HTTP 1.1 specification RFC7231 has explicitly defined semantics for request bodies.  In other cases where the HTTP spec is vague (such as GET, HEAD and DELETE), requestBody is permitted but does not have well-defined semantics and SHOULD be avoided if possible.\n\n\nresponses\nResponses Object\nThe list of possible responses as they are returned from executing this operation.\n\n\ncallbacks\nMap[string, Callback Object | Reference Object]\nA map of possible out-of band callbacks related to the parent operation. The key is a unique identifier for the Callback Object. Each value in the map is a Callback Object that describes a request that may be initiated by the API provider and the expected responses.\n\n\ndeprecated\nboolean\nDeclares this operation to be deprecated. Consumers SHOULD refrain from usage of the declared operation. Default value is false.\n\n\nsecurity\n[Security Requirement Object]\nA declaration of which security mechanisms can be used for this operation. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. To make security optional, an empty security requirement ({}) can be included in the array. This definition overrides any declared top-level security. To remove a top-level security declaration, an empty array can be used.\n\n\nservers\n[Server Object]\nAn alternative server array to service this operation. If an alternative server object is specified at the Path Item Object or Root level, it will be overridden by this value.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"operationTags\"></a>tags</td>\n<td style=\"text-align: center;\">[<code>string</code>]</td>\n<td>A list of tags for API documentation control. Tags can be used for logical grouping of operations by resources or any other qualifier.</td>\n</tr>\n<tr>\n<td><a name=\"operationSummary\"></a>summary</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A short summary of what the operation does.</td>\n</tr>\n<tr>\n<td><a name=\"operationDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A verbose explanation of the operation behavior. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n<tr>\n<td><a name=\"operationExternalDocs\"></a>externalDocs</td>\n<td style=\"text-align: center;\"><a href=\"#externalDocumentationObject\">External Documentation Object</a></td>\n<td>Additional external documentation for this operation.</td>\n</tr>\n<tr>\n<td><a name=\"operationId\"></a>operationId</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>Unique string used to identify the operation. The id MUST be unique among all operations described in the API. The operationId value is <strong>case-sensitive</strong>. Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is RECOMMENDED to follow common programming naming conventions.</td>\n</tr>\n<tr>\n<td><a name=\"operationParameters\"></a>parameters</td>\n<td style=\"text-align: center;\">[<a href=\"#parameterObject\">Parameter Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>A list of parameters that are applicable for this operation. If a parameter is already defined at the <a href=\"#pathItemParameters\">Path Item</a>, the new definition will override it but can never remove it. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a <a href=\"#parameterName\">name</a> and <a href=\"#parameterIn\">location</a>. The list can use the <a href=\"#referenceObject\">Reference Object</a> to link to parameters that are defined at the <a href=\"#componentsParameters\">OpenAPI Object's components/parameters</a>.</td>\n</tr>\n<tr>\n<td><a name=\"operationRequestBody\"></a>requestBody</td>\n<td style=\"text-align: center;\"><a href=\"#requestBodyObject\">Request Body Object</a> | <a href=\"#referenceObject\">Reference Object</a></td>\n<td>The request body applicable for this operation.  The <code>requestBody</code> is fully supported in HTTP methods where the HTTP 1.1 specification <a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.1\">RFC7231</a> has explicitly defined semantics for request bodies.  In other cases where the HTTP spec is vague (such as <a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.1\">GET</a>, <a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.2\">HEAD</a> and <a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.5\">DELETE</a>), <code>requestBody</code> is permitted but does not have well-defined semantics and SHOULD be avoided if possible.</td>\n</tr>\n<tr>\n<td><a name=\"operationResponses\"></a>responses</td>\n<td style=\"text-align: center;\"><a href=\"#responsesObject\">Responses Object</a></td>\n<td>The list of possible responses as they are returned from executing this operation.</td>\n</tr>\n<tr>\n<td><a name=\"operationCallbacks\"></a>callbacks</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, <a href=\"#callbackObject\">Callback Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>A map of possible out-of band callbacks related to the parent operation. The key is a unique identifier for the Callback Object. Each value in the map is a <a href=\"#callbackObject\">Callback Object</a> that describes a request that may be initiated by the API provider and the expected responses.</td>\n</tr>\n<tr>\n<td><a name=\"operationDeprecated\"></a>deprecated</td>\n<td style=\"text-align: center;\"><code>boolean</code></td>\n<td>Declares this operation to be deprecated. Consumers SHOULD refrain from usage of the declared operation. Default value is <code>false</code>.</td>\n</tr>\n<tr>\n<td><a name=\"operationSecurity\"></a>security</td>\n<td style=\"text-align: center;\">[<a href=\"#securityRequirementObject\">Security Requirement Object</a>]</td>\n<td>A declaration of which security mechanisms can be used for this operation. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. To make security optional, an empty security requirement (<code>{}</code>) can be included in the array. This definition overrides any declared top-level <a href=\"#oasSecurity\"><code>security</code></a>. To remove a top-level security declaration, an empty array can be used.</td>\n</tr>\n<tr>\n<td><a name=\"operationServers\"></a>servers</td>\n<td style=\"text-align: center;\">[<a href=\"#serverObject\">Server Object</a>]</td>\n<td>An alternative <code>server</code> array to service this operation. If an alternative <code>server</code> object is specified at the Path Item Object or Root level, it will be overridden by this value.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "operationTags",
                                                                    "values": [
                                                                        {
                                                                            "text": "tags",
                                                                            "html": "<a name=\"operationTags\"></a>tags"
                                                                        },
                                                                        {
                                                                            "text": "[string]",
                                                                            "html": "[<code>string</code>]"
                                                                        },
                                                                        {
                                                                            "text": "A list of tags for API documentation control. Tags can be used for logical grouping of operations by resources or any other qualifier.",
                                                                            "html": "A list of tags for API documentation control. Tags can be used for logical grouping of operations by resources or any other qualifier."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "operationSummary",
                                                                    "values": [
                                                                        {
                                                                            "text": "summary",
                                                                            "html": "<a name=\"operationSummary\"></a>summary"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "A short summary of what the operation does.",
                                                                            "html": "A short summary of what the operation does."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "operationDescription",
                                                                    "values": [
                                                                        {
                                                                            "text": "description",
                                                                            "html": "<a name=\"operationDescription\"></a>description"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "A verbose explanation of the operation behavior. CommonMark syntax MAY be used for rich text representation.",
                                                                            "html": "A verbose explanation of the operation behavior. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "operationExternalDocs",
                                                                    "values": [
                                                                        {
                                                                            "text": "externalDocs",
                                                                            "html": "<a name=\"operationExternalDocs\"></a>externalDocs"
                                                                        },
                                                                        {
                                                                            "text": "External Documentation Object",
                                                                            "html": "<a href=\"#externalDocumentationObject\">External Documentation Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "Additional external documentation for this operation.",
                                                                            "html": "Additional external documentation for this operation."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "operationId",
                                                                    "values": [
                                                                        {
                                                                            "text": "operationId",
                                                                            "html": "<a name=\"operationId\"></a>operationId"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "Unique string used to identify the operation. The id MUST be unique among all operations described in the API. The operationId value is case-sensitive. Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is RECOMMENDED to follow common programming naming conventions.",
                                                                            "html": "Unique string used to identify the operation. The id MUST be unique among all operations described in the API. The operationId value is <strong>case-sensitive</strong>. Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is RECOMMENDED to follow common programming naming conventions."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "operationParameters",
                                                                    "values": [
                                                                        {
                                                                            "text": "parameters",
                                                                            "html": "<a name=\"operationParameters\"></a>parameters"
                                                                        },
                                                                        {
                                                                            "text": "[Parameter Object | Reference Object]",
                                                                            "html": "[<a href=\"#parameterObject\">Parameter Object</a> | <a href=\"#referenceObject\">Reference Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "A list of parameters that are applicable for this operation. If a parameter is already defined at the Path Item, the new definition will override it but can never remove it. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a name and location. The list can use the Reference Object to link to parameters that are defined at the OpenAPI Object's components/parameters.",
                                                                            "html": "A list of parameters that are applicable for this operation. If a parameter is already defined at the <a href=\"#pathItemParameters\">Path Item</a>, the new definition will override it but can never remove it. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a <a href=\"#parameterName\">name</a> and <a href=\"#parameterIn\">location</a>. The list can use the <a href=\"#referenceObject\">Reference Object</a> to link to parameters that are defined at the <a href=\"#componentsParameters\">OpenAPI Object's components/parameters</a>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "operationRequestBody",
                                                                    "values": [
                                                                        {
                                                                            "text": "requestBody",
                                                                            "html": "<a name=\"operationRequestBody\"></a>requestBody"
                                                                        },
                                                                        {
                                                                            "text": "Request Body Object | Reference Object",
                                                                            "html": "<a href=\"#requestBodyObject\">Request Body Object</a> | <a href=\"#referenceObject\">Reference Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "The request body applicable for this operation.  The requestBody is fully supported in HTTP methods where the HTTP 1.1 specification RFC7231 has explicitly defined semantics for request bodies.  In other cases where the HTTP spec is vague (such as GET, HEAD and DELETE), requestBody is permitted but does not have well-defined semantics and SHOULD be avoided if possible.",
                                                                            "html": "The request body applicable for this operation.  The <code>requestBody</code> is fully supported in HTTP methods where the HTTP 1.1 specification <a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.1\">RFC7231</a> has explicitly defined semantics for request bodies.  In other cases where the HTTP spec is vague (such as <a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.1\">GET</a>, <a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.2\">HEAD</a> and <a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.5\">DELETE</a>), <code>requestBody</code> is permitted but does not have well-defined semantics and SHOULD be avoided if possible."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "operationResponses",
                                                                    "values": [
                                                                        {
                                                                            "text": "responses",
                                                                            "html": "<a name=\"operationResponses\"></a>responses"
                                                                        },
                                                                        {
                                                                            "text": "Responses Object",
                                                                            "html": "<a href=\"#responsesObject\">Responses Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "The list of possible responses as they are returned from executing this operation.",
                                                                            "html": "The list of possible responses as they are returned from executing this operation."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "operationCallbacks",
                                                                    "values": [
                                                                        {
                                                                            "text": "callbacks",
                                                                            "html": "<a name=\"operationCallbacks\"></a>callbacks"
                                                                        },
                                                                        {
                                                                            "text": "Map[string, Callback Object | Reference Object]",
                                                                            "html": "Map[<code>string</code>, <a href=\"#callbackObject\">Callback Object</a> | <a href=\"#referenceObject\">Reference Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "A map of possible out-of band callbacks related to the parent operation. The key is a unique identifier for the Callback Object. Each value in the map is a Callback Object that describes a request that may be initiated by the API provider and the expected responses.",
                                                                            "html": "A map of possible out-of band callbacks related to the parent operation. The key is a unique identifier for the Callback Object. Each value in the map is a <a href=\"#callbackObject\">Callback Object</a> that describes a request that may be initiated by the API provider and the expected responses."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "operationDeprecated",
                                                                    "values": [
                                                                        {
                                                                            "text": "deprecated",
                                                                            "html": "<a name=\"operationDeprecated\"></a>deprecated"
                                                                        },
                                                                        {
                                                                            "text": "boolean",
                                                                            "html": "<code>boolean</code>"
                                                                        },
                                                                        {
                                                                            "text": "Declares this operation to be deprecated. Consumers SHOULD refrain from usage of the declared operation. Default value is false.",
                                                                            "html": "Declares this operation to be deprecated. Consumers SHOULD refrain from usage of the declared operation. Default value is <code>false</code>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "operationSecurity",
                                                                    "values": [
                                                                        {
                                                                            "text": "security",
                                                                            "html": "<a name=\"operationSecurity\"></a>security"
                                                                        },
                                                                        {
                                                                            "text": "[Security Requirement Object]",
                                                                            "html": "[<a href=\"#securityRequirementObject\">Security Requirement Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "A declaration of which security mechanisms can be used for this operation. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. To make security optional, an empty security requirement ({}) can be included in the array. This definition overrides any declared top-level security. To remove a top-level security declaration, an empty array can be used.",
                                                                            "html": "A declaration of which security mechanisms can be used for this operation. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. To make security optional, an empty security requirement (<code>{}</code>) can be included in the array. This definition overrides any declared top-level <a href=\"#oasSecurity\"><code>security</code></a>. To remove a top-level security declaration, an empty array can be used."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "operationServers",
                                                                    "values": [
                                                                        {
                                                                            "text": "servers",
                                                                            "html": "<a name=\"operationServers\"></a>servers"
                                                                        },
                                                                        {
                                                                            "text": "[Server Object]",
                                                                            "html": "[<a href=\"#serverObject\">Server Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "An alternative server array to service this operation. If an alternative server object is specified at the Path Item Object or Root level, it will be overridden by this value.",
                                                                            "html": "An alternative <code>server</code> array to service this operation. If an alternative <code>server</code> object is specified at the Path Item Object or Root level, it will be overridden by this value."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_8",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Operation Object Example",
                                                "html": "<h5 id=\"operation-object-example\">Operation Object Example</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"tags\": [\n    \"pet\"\n  ],\n  \"summary\": \"Updates a pet in the store with form data\",\n  \"operationId\": \"updatePetWithForm\",\n  \"parameters\": [\n    {\n      \"name\": \"petId\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet that needs to be updated\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  ],\n  \"requestBody\": {\n    \"content\": {\n      \"application/x-www-form-urlencoded\": {\n        \"schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"name\": { \n              \"description\": \"Updated name of the pet\",\n              \"type\": \"string\"\n            },\n            \"status\": {\n              \"description\": \"Updated status of the pet\",\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\"status\"] \n        }\n      }\n    }\n  },\n  \"responses\": {\n    \"200\": {\n      \"description\": \"Pet updated.\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    },\n    \"405\": {\n      \"description\": \"Method Not Allowed\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    }\n  },\n  \"security\": [\n    {\n      \"petstore_auth\": [\n        \"write:pets\",\n        \"read:pets\"\n      ]\n    }\n  ]\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"tags\": [\n    \"pet\"\n  ],\n  \"summary\": \"Updates a pet in the store with form data\",\n  \"operationId\": \"updatePetWithForm\",\n  \"parameters\": [\n    {\n      \"name\": \"petId\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet that needs to be updated\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  ],\n  \"requestBody\": {\n    \"content\": {\n      \"application/x-www-form-urlencoded\": {\n        \"schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"name\": { \n              \"description\": \"Updated name of the pet\",\n              \"type\": \"string\"\n            },\n            \"status\": {\n              \"description\": \"Updated status of the pet\",\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\"status\"] \n        }\n      }\n    }\n  },\n  \"responses\": {\n    \"200\": {\n      \"description\": \"Pet updated.\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    },\n    \"405\": {\n      \"description\": \"Method Not Allowed\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    }\n  },\n  \"security\": [\n    {\n      \"petstore_auth\": [\n        \"write:pets\",\n        \"read:pets\"\n      ]\n    }\n  ]\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"tags\": [\n    \"pet\"\n  ],\n  \"summary\": \"Updates a pet in the store with form data\",\n  \"operationId\": \"updatePetWithForm\",\n  \"parameters\": [\n    {\n      \"name\": \"petId\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet that needs to be updated\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  ],\n  \"requestBody\": {\n    \"content\": {\n      \"application/x-www-form-urlencoded\": {\n        \"schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"name\": { \n              \"description\": \"Updated name of the pet\",\n              \"type\": \"string\"\n            },\n            \"status\": {\n              \"description\": \"Updated status of the pet\",\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\"status\"] \n        }\n      }\n    }\n  },\n  \"responses\": {\n    \"200\": {\n      \"description\": \"Pet updated.\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    },\n    \"405\": {\n      \"description\": \"Method Not Allowed\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    }\n  },\n  \"security\": [\n    {\n      \"petstore_auth\": [\n        \"write:pets\",\n        \"read:pets\"\n      ]\n    }\n  ]\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "tags:\n- pet\nsummary: Updates a pet in the store with form data\noperationId: updatePetWithForm\nparameters:\n- name: petId\n  in: path\n  description: ID of pet that needs to be updated\n  required: true\n  schema:\n    type: string\nrequestBody:\n  content:\n    'application/x-www-form-urlencoded':\n      schema:\n       type: object\n       properties:\n          name: \n            description: Updated name of the pet\n            type: string\n          status:\n            description: Updated status of the pet\n            type: string\n       required:\n         - status\nresponses:\n  '200':\n    description: Pet updated.\n    content: \n      'application/json': {}\n      'application/xml': {}\n  '405':\n    description: Method Not Allowed\n    content: \n      'application/json': {}\n      'application/xml': {}\nsecurity:\n- petstore_auth:\n  - write:pets\n  - read:pets\n",
                                                        "html": "<pre><code class=\"language-yaml\">tags:\n- pet\nsummary: Updates a pet in the store with form data\noperationId: updatePetWithForm\nparameters:\n- name: petId\n  in: path\n  description: ID of pet that needs to be updated\n  required: true\n  schema:\n    type: string\nrequestBody:\n  content:\n    'application/x-www-form-urlencoded':\n      schema:\n       type: object\n       properties:\n          name: \n            description: Updated name of the pet\n            type: string\n          status:\n            description: Updated status of the pet\n            type: string\n       required:\n         - status\nresponses:\n  '200':\n    description: Pet updated.\n    content: \n      'application/json': {}\n      'application/xml': {}\n  '405':\n    description: Method Not Allowed\n    content: \n      'application/json': {}\n      'application/xml': {}\nsecurity:\n- petstore_auth:\n  - write:pets\n  - read:pets\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "tags:\n- pet\nsummary: Updates a pet in the store with form data\noperationId: updatePetWithForm\nparameters:\n- name: petId\n  in: path\n  description: ID of pet that needs to be updated\n  required: true\n  schema:\n    type: string\nrequestBody:\n  content:\n    'application/x-www-form-urlencoded':\n      schema:\n       type: object\n       properties:\n          name: \n            description: Updated name of the pet\n            type: string\n          status:\n            description: Updated status of the pet\n            type: string\n       required:\n         - status\nresponses:\n  '200':\n    description: Pet updated.\n    content: \n      'application/json': {}\n      'application/xml': {}\n  '405':\n    description: Method Not Allowed\n    content: \n      'application/json': {}\n      'application/xml': {}\nsecurity:\n- petstore_auth:\n  - write:pets\n  - read:pets\n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "operation-object-example",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "operation-object",
                                            "anchor": "operationObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "External Documentation Object",
                                        "html": "<h4 id=\"external-documentation-object\"><a name=\"externalDocumentationObject\"></a>External Documentation Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "Allows referencing an external resource for extended documentation.",
                                                "html": "<p>Allows referencing an external resource for extended documentation.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_9\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\ndescription\nstring\nA description of the target documentation. CommonMark syntax MAY be used for rich text representation.\n\n\nurl\nstring\nREQUIRED. The URL for the target documentation. This MUST be in the form of a URL.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"externalDocDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A description of the target documentation. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n<tr>\n<td><a name=\"externalDocUrl\"></a>url</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. The URL for the target documentation. This MUST be in the form of a URL.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "externalDocDescription",
                                                                    "values": [
                                                                        {
                                                                            "text": "description",
                                                                            "html": "<a name=\"externalDocDescription\"></a>description"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "A description of the target documentation. CommonMark syntax MAY be used for rich text representation.",
                                                                            "html": "A description of the target documentation. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "externalDocUrl",
                                                                    "values": [
                                                                        {
                                                                            "text": "url",
                                                                            "html": "<a name=\"externalDocUrl\"></a>url"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "REQUIRED. The URL for the target documentation. This MUST be in the form of a URL.",
                                                                            "html": "<strong>REQUIRED</strong>. The URL for the target documentation. This MUST be in the form of a URL."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_9",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "External Documentation Object Example",
                                                "html": "<h5 id=\"external-documentation-object-example\">External Documentation Object Example</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"description\": \"Find more info here\",\n  \"url\": \"https://example.com\"\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"description\": \"Find more info here\",\n  \"url\": \"https://example.com\"\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"description\": \"Find more info here\",\n  \"url\": \"https://example.com\"\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "description: Find more info here\nurl: https://example.com\n",
                                                        "html": "<pre><code class=\"language-yaml\">description: Find more info here\nurl: https://example.com\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "description: Find more info here\nurl: https://example.com\n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "external-documentation-object-example",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "external-documentation-object",
                                            "anchor": "externalDocumentationObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "Parameter Object",
                                        "html": "<h4 id=\"parameter-object\"><a name=\"parameterObject\"></a>Parameter Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "Describes a single operation parameter.",
                                                "html": "<p>Describes a single operation parameter.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "A unique parameter is defined by a combination of a name and location.",
                                                "html": "<p>A unique parameter is defined by a combination of a <a href=\"#parameterName\">name</a> and <a href=\"#parameterIn\">location</a>.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Parameter Locations",
                                                "html": "<h5 id=\"parameter-locations\">Parameter Locations</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "There are four possible parameter locations specified by the in field:\n* path - Used together with Path Templating, where the parameter value is actually part of the operation's URL. This does not include the host or base path of the API. For example, in /items/{itemId}, the path parameter is itemId.\n* query - Parameters that are appended to the URL. For example, in /items?id=###, the query parameter is id.\n* header - Custom headers that are expected as part of the request. Note that RFC7230 states header names are case insensitive.\n* cookie - Used to pass a specific cookie value to the API.",
                                                        "html": "<p>There are four possible parameter locations specified by the <code>in</code> field:\n* path - Used together with <a href=\"#pathTemplating\">Path Templating</a>, where the parameter value is actually part of the operation's URL. This does not include the host or base path of the API. For example, in <code>/items/{itemId}</code>, the path parameter is <code>itemId</code>.\n* query - Parameters that are appended to the URL. For example, in <code>/items?id=###</code>, the query parameter is <code>id</code>.\n* header - Custom headers that are expected as part of the request. Note that <a href=\"https://tools.ietf.org/html/rfc7230#page-22\">RFC7230</a> states header names are case insensitive.\n* cookie - Used to pass a specific cookie value to the API.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "parameter-locations",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_10\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\nname\nstring\nREQUIRED. The name of the parameter. Parameter names are case sensitive. If in is \"path\", the name field MUST correspond to a template expression occurring within the path field in the Paths Object. See Path Templating for further information.If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.For all other cases, the name corresponds to the parameter name used by the in property.\n\n\nin\nstring\nREQUIRED. The location of the parameter. Possible values are \"query\", \"header\", \"path\" or \"cookie\".\n\n\ndescription\nstring\nA brief description of the parameter. This could contain examples of use. CommonMark syntax MAY be used for rich text representation.\n\n\nrequired\nboolean\nDetermines whether this parameter is mandatory. If the parameter location is \"path\", this property is REQUIRED and its value MUST be true. Otherwise, the property MAY be included and its default value is false.\n\n\n deprecated\nboolean\nSpecifies that a parameter is deprecated and SHOULD be transitioned out of usage. Default value is false.\n\n\n allowEmptyValue\nboolean\nSets the ability to pass empty-valued parameters. This is valid only for query parameters and allows sending a parameter with an empty value. Default value is false. If style is used, and if behavior is n/a (cannot be serialized), the value of allowEmptyValue SHALL be ignored. Use of this property is NOT RECOMMENDED, as it is likely to be removed in a later revision.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"parameterName\"></a>name</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. The name of the parameter. Parameter names are <em>case sensitive</em>. <ul><li>If <a href=\"#parameterIn\"><code>in</code></a> is <code>\"path\"</code>, the <code>name</code> field MUST correspond to a template expression occurring within the <a href=\"#pathsPath\">path</a> field in the <a href=\"#pathsObject\">Paths Object</a>. See <a href=\"#pathTemplating\">Path Templating</a> for further information.<li>If <a href=\"#parameterIn\"><code>in</code></a> is <code>\"header\"</code> and the <code>name</code> field is <code>\"Accept\"</code>, <code>\"Content-Type\"</code> or <code>\"Authorization\"</code>, the parameter definition SHALL be ignored.<li>For all other cases, the <code>name</code> corresponds to the parameter name used by the <a href=\"#parameterIn\"><code>in</code></a> property.</li></li></li></ul></td>\n</tr>\n<tr>\n<td><a name=\"parameterIn\"></a>in</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. The location of the parameter. Possible values are <code>\"query\"</code>, <code>\"header\"</code>, <code>\"path\"</code> or <code>\"cookie\"</code>.</td>\n</tr>\n<tr>\n<td><a name=\"parameterDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A brief description of the parameter. This could contain examples of use. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n<tr>\n<td><a name=\"parameterRequired\"></a>required</td>\n<td style=\"text-align: center;\"><code>boolean</code></td>\n<td>Determines whether this parameter is mandatory. If the <a href=\"#parameterIn\">parameter location</a> is <code>\"path\"</code>, this property is <strong>REQUIRED</strong> and its value MUST be <code>true</code>. Otherwise, the property MAY be included and its default value is <code>false</code>.</td>\n</tr>\n<tr>\n<td><a name=\"parameterDeprecated\"></a> deprecated</td>\n<td style=\"text-align: center;\"><code>boolean</code></td>\n<td>Specifies that a parameter is deprecated and SHOULD be transitioned out of usage. Default value is <code>false</code>.</td>\n</tr>\n<tr>\n<td><a name=\"parameterAllowEmptyValue\"></a> allowEmptyValue</td>\n<td style=\"text-align: center;\"><code>boolean</code></td>\n<td>Sets the ability to pass empty-valued parameters. This is valid only for <code>query</code> parameters and allows sending a parameter with an empty value. Default value is <code>false</code>. If <a href=\"#parameterStyle\"><code>style</code></a> is used, and if behavior is <code>n/a</code> (cannot be serialized), the value of <code>allowEmptyValue</code> SHALL be ignored. Use of this property is NOT RECOMMENDED, as it is likely to be removed in a later revision.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "parameterName",
                                                                    "values": [
                                                                        {
                                                                            "text": "name",
                                                                            "html": "<a name=\"parameterName\"></a>name"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "REQUIRED. The name of the parameter. Parameter names are case sensitive. If in is \"path\", the name field MUST correspond to a template expression occurring within the path field in the Paths Object. See Path Templating for further information.If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.For all other cases, the name corresponds to the parameter name used by the in property.",
                                                                            "html": "<strong>REQUIRED</strong>. The name of the parameter. Parameter names are <em>case sensitive</em>. <ul><li>If <a href=\"#parameterIn\"><code>in</code></a> is <code>\"path\"</code>, the <code>name</code> field MUST correspond to a template expression occurring within the <a href=\"#pathsPath\">path</a> field in the <a href=\"#pathsObject\">Paths Object</a>. See <a href=\"#pathTemplating\">Path Templating</a> for further information.<li>If <a href=\"#parameterIn\"><code>in</code></a> is <code>\"header\"</code> and the <code>name</code> field is <code>\"Accept\"</code>, <code>\"Content-Type\"</code> or <code>\"Authorization\"</code>, the parameter definition SHALL be ignored.<li>For all other cases, the <code>name</code> corresponds to the parameter name used by the <a href=\"#parameterIn\"><code>in</code></a> property.</li></li></li></ul>"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "parameterIn",
                                                                    "values": [
                                                                        {
                                                                            "text": "in",
                                                                            "html": "<a name=\"parameterIn\"></a>in"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "REQUIRED. The location of the parameter. Possible values are \"query\", \"header\", \"path\" or \"cookie\".",
                                                                            "html": "<strong>REQUIRED</strong>. The location of the parameter. Possible values are <code>\"query\"</code>, <code>\"header\"</code>, <code>\"path\"</code> or <code>\"cookie\"</code>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "parameterDescription",
                                                                    "values": [
                                                                        {
                                                                            "text": "description",
                                                                            "html": "<a name=\"parameterDescription\"></a>description"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "A brief description of the parameter. This could contain examples of use. CommonMark syntax MAY be used for rich text representation.",
                                                                            "html": "A brief description of the parameter. This could contain examples of use. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "parameterRequired",
                                                                    "values": [
                                                                        {
                                                                            "text": "required",
                                                                            "html": "<a name=\"parameterRequired\"></a>required"
                                                                        },
                                                                        {
                                                                            "text": "boolean",
                                                                            "html": "<code>boolean</code>"
                                                                        },
                                                                        {
                                                                            "text": "Determines whether this parameter is mandatory. If the parameter location is \"path\", this property is REQUIRED and its value MUST be true. Otherwise, the property MAY be included and its default value is false.",
                                                                            "html": "Determines whether this parameter is mandatory. If the <a href=\"#parameterIn\">parameter location</a> is <code>\"path\"</code>, this property is <strong>REQUIRED</strong> and its value MUST be <code>true</code>. Otherwise, the property MAY be included and its default value is <code>false</code>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "parameterDeprecated",
                                                                    "values": [
                                                                        {
                                                                            "text": " deprecated",
                                                                            "html": "<a name=\"parameterDeprecated\"></a> deprecated"
                                                                        },
                                                                        {
                                                                            "text": "boolean",
                                                                            "html": "<code>boolean</code>"
                                                                        },
                                                                        {
                                                                            "text": "Specifies that a parameter is deprecated and SHOULD be transitioned out of usage. Default value is false.",
                                                                            "html": "Specifies that a parameter is deprecated and SHOULD be transitioned out of usage. Default value is <code>false</code>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "parameterAllowEmptyValue",
                                                                    "values": [
                                                                        {
                                                                            "text": " allowEmptyValue",
                                                                            "html": "<a name=\"parameterAllowEmptyValue\"></a> allowEmptyValue"
                                                                        },
                                                                        {
                                                                            "text": "boolean",
                                                                            "html": "<code>boolean</code>"
                                                                        },
                                                                        {
                                                                            "text": "Sets the ability to pass empty-valued parameters. This is valid only for query parameters and allows sending a parameter with an empty value. Default value is false. If style is used, and if behavior is n/a (cannot be serialized), the value of allowEmptyValue SHALL be ignored. Use of this property is NOT RECOMMENDED, as it is likely to be removed in a later revision.",
                                                                            "html": "Sets the ability to pass empty-valued parameters. This is valid only for <code>query</code> parameters and allows sending a parameter with an empty value. Default value is <code>false</code>. If <a href=\"#parameterStyle\"><code>style</code></a> is used, and if behavior is <code>n/a</code> (cannot be serialized), the value of <code>allowEmptyValue</code> SHALL be ignored. Use of this property is NOT RECOMMENDED, as it is likely to be removed in a later revision."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "The rules for serialization of the parameter are specified in one of two ways.\nFor simpler scenarios, a schema and style can describe the structure and syntax of the parameter.",
                                                        "html": "<p>The rules for serialization of the parameter are specified in one of two ways.\nFor simpler scenarios, a <a href=\"#parameterSchema\"><code>schema</code></a> and <a href=\"#parameterStyle\"><code>style</code></a> can describe the structure and syntax of the parameter.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\nstyle\nstring\nDescribes how the parameter value will be serialized depending on the type of the parameter value. Default values (based on value of in): for query - form; for path - simple; for header - simple; for cookie - form.\n\n\nexplode\nboolean\nWhen this is true, parameter values of type array or object generate separate parameters for each value of the array or key-value pair of the map. For other types of parameters this property has no effect. When style is form, the default value is true. For all other styles, the default value is false.\n\n\nallowReserved\nboolean\nDetermines whether the parameter value SHOULD allow reserved characters, as defined by RFC3986 :/?#[]@!$&'()*+,;= to be included without percent-encoding. This property only applies to parameters with an in value of query. The default value is false.\n\n\nschema\nSchema Object\nThe schema defining the type used for the parameter.\n\n\nexample\nAny\nExample of the parameter's potential value. The example SHOULD match the specified schema and encoding properties if present. The example field is mutually exclusive of the examples field. Furthermore, if referencing a schema that contains an example, the example value SHALL override the example provided by the schema. To represent examples of media types that cannot naturally be represented in JSON or YAML, a string value can contain the example with escaping where necessary.\n\n\nexamples\nMap[ string, Example Object | Reference Object]\nExamples of the parameter's potential value. Each example SHOULD contain a value in the correct format as specified in the parameter encoding. The examples field is mutually exclusive of the example field. Furthermore, if referencing a schema that contains an example, the examples value SHALL override the example provided by the schema.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"parameterStyle\"></a>style</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>Describes how the parameter value will be serialized depending on the type of the parameter value. Default values (based on value of <code>in</code>): for <code>query</code> - <code>form</code>; for <code>path</code> - <code>simple</code>; for <code>header</code> - <code>simple</code>; for <code>cookie</code> - <code>form</code>.</td>\n</tr>\n<tr>\n<td><a name=\"parameterExplode\"></a>explode</td>\n<td style=\"text-align: center;\"><code>boolean</code></td>\n<td>When this is true, parameter values of type <code>array</code> or <code>object</code> generate separate parameters for each value of the array or key-value pair of the map. For other types of parameters this property has no effect. When <a href=\"#parameterStyle\"><code>style</code></a> is <code>form</code>, the default value is <code>true</code>. For all other styles, the default value is <code>false</code>.</td>\n</tr>\n<tr>\n<td><a name=\"parameterAllowReserved\"></a>allowReserved</td>\n<td style=\"text-align: center;\"><code>boolean</code></td>\n<td>Determines whether the parameter value SHOULD allow reserved characters, as defined by <a href=\"https://tools.ietf.org/html/rfc3986#section-2.2\">RFC3986</a> <code>:/?#[]@!$&amp;'()*+,;=</code> to be included without percent-encoding. This property only applies to parameters with an <code>in</code> value of <code>query</code>. The default value is <code>false</code>.</td>\n</tr>\n<tr>\n<td><a name=\"parameterSchema\"></a>schema</td>\n<td style=\"text-align: center;\"><a href=\"#schemaObject\">Schema Object</a></td>\n<td>The schema defining the type used for the parameter.</td>\n</tr>\n<tr>\n<td><a name=\"parameterExample\"></a>example</td>\n<td style=\"text-align: center;\">Any</td>\n<td>Example of the parameter's potential value. The example SHOULD match the specified schema and encoding properties if present. The <code>example</code> field is mutually exclusive of the <code>examples</code> field. Furthermore, if referencing a <code>schema</code> that contains an example, the <code>example</code> value SHALL <em>override</em> the example provided by the schema. To represent examples of media types that cannot naturally be represented in JSON or YAML, a string value can contain the example with escaping where necessary.</td>\n</tr>\n<tr>\n<td><a name=\"parameterExamples\"></a>examples</td>\n<td style=\"text-align: center;\">Map[ <code>string</code>, <a href=\"#exampleObject\">Example Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>Examples of the parameter's potential value. Each example SHOULD contain a value in the correct format as specified in the parameter encoding. The <code>examples</code> field is mutually exclusive of the <code>example</code> field. Furthermore, if referencing a <code>schema</code> that contains an example, the <code>examples</code> value SHALL <em>override</em> the example provided by the schema.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "parameterStyle",
                                                                    "values": [
                                                                        {
                                                                            "text": "style",
                                                                            "html": "<a name=\"parameterStyle\"></a>style"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "Describes how the parameter value will be serialized depending on the type of the parameter value. Default values (based on value of in): for query - form; for path - simple; for header - simple; for cookie - form.",
                                                                            "html": "Describes how the parameter value will be serialized depending on the type of the parameter value. Default values (based on value of <code>in</code>): for <code>query</code> - <code>form</code>; for <code>path</code> - <code>simple</code>; for <code>header</code> - <code>simple</code>; for <code>cookie</code> - <code>form</code>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "parameterExplode",
                                                                    "values": [
                                                                        {
                                                                            "text": "explode",
                                                                            "html": "<a name=\"parameterExplode\"></a>explode"
                                                                        },
                                                                        {
                                                                            "text": "boolean",
                                                                            "html": "<code>boolean</code>"
                                                                        },
                                                                        {
                                                                            "text": "When this is true, parameter values of type array or object generate separate parameters for each value of the array or key-value pair of the map. For other types of parameters this property has no effect. When style is form, the default value is true. For all other styles, the default value is false.",
                                                                            "html": "When this is true, parameter values of type <code>array</code> or <code>object</code> generate separate parameters for each value of the array or key-value pair of the map. For other types of parameters this property has no effect. When <a href=\"#parameterStyle\"><code>style</code></a> is <code>form</code>, the default value is <code>true</code>. For all other styles, the default value is <code>false</code>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "parameterAllowReserved",
                                                                    "values": [
                                                                        {
                                                                            "text": "allowReserved",
                                                                            "html": "<a name=\"parameterAllowReserved\"></a>allowReserved"
                                                                        },
                                                                        {
                                                                            "text": "boolean",
                                                                            "html": "<code>boolean</code>"
                                                                        },
                                                                        {
                                                                            "text": "Determines whether the parameter value SHOULD allow reserved characters, as defined by RFC3986 :/?#[]@!$&'()*+,;= to be included without percent-encoding. This property only applies to parameters with an in value of query. The default value is false.",
                                                                            "html": "Determines whether the parameter value SHOULD allow reserved characters, as defined by <a href=\"https://tools.ietf.org/html/rfc3986#section-2.2\">RFC3986</a> <code>:/?#[]@!$&amp;'()*+,;=</code> to be included without percent-encoding. This property only applies to parameters with an <code>in</code> value of <code>query</code>. The default value is <code>false</code>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "parameterSchema",
                                                                    "values": [
                                                                        {
                                                                            "text": "schema",
                                                                            "html": "<a name=\"parameterSchema\"></a>schema"
                                                                        },
                                                                        {
                                                                            "text": "Schema Object",
                                                                            "html": "<a href=\"#schemaObject\">Schema Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "The schema defining the type used for the parameter.",
                                                                            "html": "The schema defining the type used for the parameter."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "parameterExample",
                                                                    "values": [
                                                                        {
                                                                            "text": "example",
                                                                            "html": "<a name=\"parameterExample\"></a>example"
                                                                        },
                                                                        {
                                                                            "text": "Any",
                                                                            "html": "Any"
                                                                        },
                                                                        {
                                                                            "text": "Example of the parameter's potential value. The example SHOULD match the specified schema and encoding properties if present. The example field is mutually exclusive of the examples field. Furthermore, if referencing a schema that contains an example, the example value SHALL override the example provided by the schema. To represent examples of media types that cannot naturally be represented in JSON or YAML, a string value can contain the example with escaping where necessary.",
                                                                            "html": "Example of the parameter's potential value. The example SHOULD match the specified schema and encoding properties if present. The <code>example</code> field is mutually exclusive of the <code>examples</code> field. Furthermore, if referencing a <code>schema</code> that contains an example, the <code>example</code> value SHALL <em>override</em> the example provided by the schema. To represent examples of media types that cannot naturally be represented in JSON or YAML, a string value can contain the example with escaping where necessary."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "parameterExamples",
                                                                    "values": [
                                                                        {
                                                                            "text": "examples",
                                                                            "html": "<a name=\"parameterExamples\"></a>examples"
                                                                        },
                                                                        {
                                                                            "text": "Map[ string, Example Object | Reference Object]",
                                                                            "html": "Map[ <code>string</code>, <a href=\"#exampleObject\">Example Object</a> | <a href=\"#referenceObject\">Reference Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "Examples of the parameter's potential value. Each example SHOULD contain a value in the correct format as specified in the parameter encoding. The examples field is mutually exclusive of the example field. Furthermore, if referencing a schema that contains an example, the examples value SHALL override the example provided by the schema.",
                                                                            "html": "Examples of the parameter's potential value. Each example SHOULD contain a value in the correct format as specified in the parameter encoding. The <code>examples</code> field is mutually exclusive of the <code>example</code> field. Furthermore, if referencing a <code>schema</code> that contains an example, the <code>examples</code> value SHALL <em>override</em> the example provided by the schema."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "For more complex scenarios, the content property can define the media type and schema of the parameter.\nA parameter MUST contain either a schema property, or a content property, but not both.\nWhen example or examples are provided in conjunction with the schema object, the example MUST follow the prescribed serialization strategy for the parameter.",
                                                        "html": "<p>For more complex scenarios, the <a href=\"#parameterContent\"><code>content</code></a> property can define the media type and schema of the parameter.\nA parameter MUST contain either a <code>schema</code> property, or a <code>content</code> property, but not both.\nWhen <code>example</code> or <code>examples</code> are provided in conjunction with the <code>schema</code> object, the example MUST follow the prescribed serialization strategy for the parameter.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\ncontent\nMap[string, Media Type Object]\nA map containing the representations for the parameter. The key is the media type and the value describes it. The map MUST only contain one entry.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"parameterContent\"></a>content</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, <a href=\"#mediaTypeObject\">Media Type Object</a>]</td>\n<td>A map containing the representations for the parameter. The key is the media type and the value describes it. The map MUST only contain one entry.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "parameterContent",
                                                                    "values": [
                                                                        {
                                                                            "text": "content",
                                                                            "html": "<a name=\"parameterContent\"></a>content"
                                                                        },
                                                                        {
                                                                            "text": "Map[string, Media Type Object]",
                                                                            "html": "Map[<code>string</code>, <a href=\"#mediaTypeObject\">Media Type Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "A map containing the representations for the parameter. The key is the media type and the value describes it. The map MUST only contain one entry.",
                                                                            "html": "A map containing the representations for the parameter. The key is the media type and the value describes it. The map MUST only contain one entry."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_10",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Style Values",
                                                "html": "<h5 id=\"style-values\"><a name=\"styleValues\"></a>Style Values</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "In order to support common ways of serializing simple parameters, a set of style values are defined.",
                                                        "html": "<p>In order to support common ways of serializing simple parameters, a set of <code>style</code> values are defined.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nstyle\ntype\nin\nComments\n\n\n\n\nmatrix\nprimitive, array, object\npath\nPath-style parameters defined by RFC6570\n\n\nlabel\nprimitive, array, object\npath\nLabel style parameters defined by RFC6570\n\n\nform\nprimitive, array, object\nquery, cookie\nForm style parameters defined by RFC6570. This option replaces collectionFormat with a csv (when explode is false) or multi (when explode is true) value from OpenAPI 2.0.\n\n\nsimple\narray\npath, header\nSimple style parameters defined by RFC6570.  This option replaces collectionFormat with a csv value from OpenAPI 2.0.\n\n\nspaceDelimited\narray, object\nquery\nSpace separated array or object values. This option replaces collectionFormat equal to ssv from OpenAPI 2.0.\n\n\npipeDelimited\narray, object\nquery\nPipe separated array or object values. This option replaces collectionFormat equal to pipes from OpenAPI 2.0.\n\n\ndeepObject\nobject\nquery\nProvides a simple way of rendering nested objects using form parameters.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th><code>style</code></th>\n<th><a href=\"#dataTypes\"><code>type</code></a></th>\n<th><code>in</code></th>\n<th>Comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>matrix</td>\n<td><code>primitive</code>, <code>array</code>, <code>object</code></td>\n<td><code>path</code></td>\n<td>Path-style parameters defined by <a href=\"https://tools.ietf.org/html/rfc6570#section-3.2.7\">RFC6570</a></td>\n</tr>\n<tr>\n<td>label</td>\n<td><code>primitive</code>, <code>array</code>, <code>object</code></td>\n<td><code>path</code></td>\n<td>Label style parameters defined by <a href=\"https://tools.ietf.org/html/rfc6570#section-3.2.5\">RFC6570</a></td>\n</tr>\n<tr>\n<td>form</td>\n<td><code>primitive</code>, <code>array</code>, <code>object</code></td>\n<td><code>query</code>, <code>cookie</code></td>\n<td>Form style parameters defined by <a href=\"https://tools.ietf.org/html/rfc6570#section-3.2.8\">RFC6570</a>. This option replaces <code>collectionFormat</code> with a <code>csv</code> (when <code>explode</code> is false) or <code>multi</code> (when <code>explode</code> is true) value from OpenAPI 2.0.</td>\n</tr>\n<tr>\n<td>simple</td>\n<td><code>array</code></td>\n<td><code>path</code>, <code>header</code></td>\n<td>Simple style parameters defined by <a href=\"https://tools.ietf.org/html/rfc6570#section-3.2.2\">RFC6570</a>.  This option replaces <code>collectionFormat</code> with a <code>csv</code> value from OpenAPI 2.0.</td>\n</tr>\n<tr>\n<td>spaceDelimited</td>\n<td><code>array</code>, <code>object</code></td>\n<td><code>query</code></td>\n<td>Space separated array or object values. This option replaces <code>collectionFormat</code> equal to <code>ssv</code> from OpenAPI 2.0.</td>\n</tr>\n<tr>\n<td>pipeDelimited</td>\n<td><code>array</code>, <code>object</code></td>\n<td><code>query</code></td>\n<td>Pipe separated array or object values. This option replaces <code>collectionFormat</code> equal to <code>pipes</code> from OpenAPI 2.0.</td>\n</tr>\n<tr>\n<td>deepObject</td>\n<td><code>object</code></td>\n<td><code>query</code></td>\n<td>Provides a simple way of rendering nested objects using form parameters.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "style",
                                                                    "html": "<code>style</code>"
                                                                },
                                                                {
                                                                    "text": "type",
                                                                    "html": "<a href=\"#dataTypes\"><code>type</code></a>"
                                                                },
                                                                {
                                                                    "text": "in",
                                                                    "html": "<code>in</code>"
                                                                },
                                                                {
                                                                    "text": "Comments",
                                                                    "html": "Comments"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "matrix",
                                                                            "html": "matrix"
                                                                        },
                                                                        {
                                                                            "text": "primitive, array, object",
                                                                            "html": "<code>primitive</code>, <code>array</code>, <code>object</code>"
                                                                        },
                                                                        {
                                                                            "text": "path",
                                                                            "html": "<code>path</code>"
                                                                        },
                                                                        {
                                                                            "text": "Path-style parameters defined by RFC6570",
                                                                            "html": "Path-style parameters defined by <a href=\"https://tools.ietf.org/html/rfc6570#section-3.2.7\">RFC6570</a>"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "label",
                                                                            "html": "label"
                                                                        },
                                                                        {
                                                                            "text": "primitive, array, object",
                                                                            "html": "<code>primitive</code>, <code>array</code>, <code>object</code>"
                                                                        },
                                                                        {
                                                                            "text": "path",
                                                                            "html": "<code>path</code>"
                                                                        },
                                                                        {
                                                                            "text": "Label style parameters defined by RFC6570",
                                                                            "html": "Label style parameters defined by <a href=\"https://tools.ietf.org/html/rfc6570#section-3.2.5\">RFC6570</a>"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "form",
                                                                            "html": "form"
                                                                        },
                                                                        {
                                                                            "text": "primitive, array, object",
                                                                            "html": "<code>primitive</code>, <code>array</code>, <code>object</code>"
                                                                        },
                                                                        {
                                                                            "text": "query, cookie",
                                                                            "html": "<code>query</code>, <code>cookie</code>"
                                                                        },
                                                                        {
                                                                            "text": "Form style parameters defined by RFC6570. This option replaces collectionFormat with a csv (when explode is false) or multi (when explode is true) value from OpenAPI 2.0.",
                                                                            "html": "Form style parameters defined by <a href=\"https://tools.ietf.org/html/rfc6570#section-3.2.8\">RFC6570</a>. This option replaces <code>collectionFormat</code> with a <code>csv</code> (when <code>explode</code> is false) or <code>multi</code> (when <code>explode</code> is true) value from OpenAPI 2.0."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "simple",
                                                                            "html": "simple"
                                                                        },
                                                                        {
                                                                            "text": "array",
                                                                            "html": "<code>array</code>"
                                                                        },
                                                                        {
                                                                            "text": "path, header",
                                                                            "html": "<code>path</code>, <code>header</code>"
                                                                        },
                                                                        {
                                                                            "text": "Simple style parameters defined by RFC6570.  This option replaces collectionFormat with a csv value from OpenAPI 2.0.",
                                                                            "html": "Simple style parameters defined by <a href=\"https://tools.ietf.org/html/rfc6570#section-3.2.2\">RFC6570</a>.  This option replaces <code>collectionFormat</code> with a <code>csv</code> value from OpenAPI 2.0."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "spaceDelimited",
                                                                            "html": "spaceDelimited"
                                                                        },
                                                                        {
                                                                            "text": "array, object",
                                                                            "html": "<code>array</code>, <code>object</code>"
                                                                        },
                                                                        {
                                                                            "text": "query",
                                                                            "html": "<code>query</code>"
                                                                        },
                                                                        {
                                                                            "text": "Space separated array or object values. This option replaces collectionFormat equal to ssv from OpenAPI 2.0.",
                                                                            "html": "Space separated array or object values. This option replaces <code>collectionFormat</code> equal to <code>ssv</code> from OpenAPI 2.0."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "pipeDelimited",
                                                                            "html": "pipeDelimited"
                                                                        },
                                                                        {
                                                                            "text": "array, object",
                                                                            "html": "<code>array</code>, <code>object</code>"
                                                                        },
                                                                        {
                                                                            "text": "query",
                                                                            "html": "<code>query</code>"
                                                                        },
                                                                        {
                                                                            "text": "Pipe separated array or object values. This option replaces collectionFormat equal to pipes from OpenAPI 2.0.",
                                                                            "html": "Pipe separated array or object values. This option replaces <code>collectionFormat</code> equal to <code>pipes</code> from OpenAPI 2.0."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "deepObject",
                                                                            "html": "deepObject"
                                                                        },
                                                                        {
                                                                            "text": "object",
                                                                            "html": "<code>object</code>"
                                                                        },
                                                                        {
                                                                            "text": "query",
                                                                            "html": "<code>query</code>"
                                                                        },
                                                                        {
                                                                            "text": "Provides a simple way of rendering nested objects using form parameters.",
                                                                            "html": "Provides a simple way of rendering nested objects using form parameters."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "style-values",
                                                    "anchor": "styleValues"
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Style Examples",
                                                "html": "<h5 id=\"style-examples\">Style Examples</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "Assume a parameter named color has one of the following values:",
                                                        "html": "<p>Assume a parameter named <code>color</code> has one of the following values:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "   string -> \"blue\"\n   array -> [\"blue\",\"black\",\"brown\"]\n   object -> { \"R\": 100, \"G\": 200, \"B\": 150 }\n",
                                                        "html": "<pre><code>   string -&gt; \"blue\"\n   array -&gt; [\"blue\",\"black\",\"brown\"]\n   object -&gt; { \"R\": 100, \"G\": 200, \"B\": 150 }\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": null,
                                                            "text": "   string -> \"blue\"\n   array -> [\"blue\",\"black\",\"brown\"]\n   object -> { \"R\": 100, \"G\": 200, \"B\": 150 }\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "The following table shows examples of rendering differences for each value.",
                                                        "html": "<p>The following table shows examples of rendering differences for each value.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nstyle\nexplode\nempty\nstring\narray\nobject\n\n\n\n\nmatrix\nfalse\n;color\n;color=blue\n;color=blue,black,brown\n;color=R,100,G,200,B,150\n\n\nmatrix\ntrue\n;color\n;color=blue\n;color=blue;color=black;color=brown\n;R=100;G=200;B=150\n\n\nlabel\nfalse\n.\n.blue\n.blue.black.brown\n.R.100.G.200.B.150\n\n\nlabel\ntrue\n.\n.blue\n.blue.black.brown\n.R=100.G=200.B=150\n\n\nform\nfalse\ncolor=\ncolor=blue\ncolor=blue,black,brown\ncolor=R,100,G,200,B,150\n\n\nform\ntrue\ncolor=\ncolor=blue\ncolor=blue&color=black&color=brown\nR=100&G=200&B=150\n\n\nsimple\nfalse\nn/a\nblue\nblue,black,brown\nR,100,G,200,B,150\n\n\nsimple\ntrue\nn/a\nblue\nblue,black,brown\nR=100,G=200,B=150\n\n\nspaceDelimited\nfalse\nn/a\nn/a\nblue%20black%20brown\nR%20100%20G%20200%20B%20150\n\n\npipeDelimited\nfalse\nn/a\nn/a\nblue|black|brown\nR|100|G|200|B|150\n\n\ndeepObject\ntrue\nn/a\nn/a\nn/a\ncolor[R]=100&color[G]=200&color[B]=150\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th><a href=\"#styleValues\"><code>style</code></a></th>\n<th><code>explode</code></th>\n<th><code>empty</code></th>\n<th><code>string</code></th>\n<th><code>array</code></th>\n<th><code>object</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>matrix</td>\n<td>false</td>\n<td>;color</td>\n<td>;color=blue</td>\n<td>;color=blue,black,brown</td>\n<td>;color=R,100,G,200,B,150</td>\n</tr>\n<tr>\n<td>matrix</td>\n<td>true</td>\n<td>;color</td>\n<td>;color=blue</td>\n<td>;color=blue;color=black;color=brown</td>\n<td>;R=100;G=200;B=150</td>\n</tr>\n<tr>\n<td>label</td>\n<td>false</td>\n<td>.</td>\n<td>.blue</td>\n<td>.blue.black.brown</td>\n<td>.R.100.G.200.B.150</td>\n</tr>\n<tr>\n<td>label</td>\n<td>true</td>\n<td>.</td>\n<td>.blue</td>\n<td>.blue.black.brown</td>\n<td>.R=100.G=200.B=150</td>\n</tr>\n<tr>\n<td>form</td>\n<td>false</td>\n<td>color=</td>\n<td>color=blue</td>\n<td>color=blue,black,brown</td>\n<td>color=R,100,G,200,B,150</td>\n</tr>\n<tr>\n<td>form</td>\n<td>true</td>\n<td>color=</td>\n<td>color=blue</td>\n<td>color=blue&amp;color=black&amp;color=brown</td>\n<td>R=100&amp;G=200&amp;B=150</td>\n</tr>\n<tr>\n<td>simple</td>\n<td>false</td>\n<td>n/a</td>\n<td>blue</td>\n<td>blue,black,brown</td>\n<td>R,100,G,200,B,150</td>\n</tr>\n<tr>\n<td>simple</td>\n<td>true</td>\n<td>n/a</td>\n<td>blue</td>\n<td>blue,black,brown</td>\n<td>R=100,G=200,B=150</td>\n</tr>\n<tr>\n<td>spaceDelimited</td>\n<td>false</td>\n<td>n/a</td>\n<td>n/a</td>\n<td>blue%20black%20brown</td>\n<td>R%20100%20G%20200%20B%20150</td>\n</tr>\n<tr>\n<td>pipeDelimited</td>\n<td>false</td>\n<td>n/a</td>\n<td>n/a</td>\n<td>blue|black|brown</td>\n<td>R|100|G|200|B|150</td>\n</tr>\n<tr>\n<td>deepObject</td>\n<td>true</td>\n<td>n/a</td>\n<td>n/a</td>\n<td>n/a</td>\n<td>color[R]=100&amp;color[G]=200&amp;color[B]=150</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "style",
                                                                    "html": "<a href=\"#styleValues\"><code>style</code></a>"
                                                                },
                                                                {
                                                                    "text": "explode",
                                                                    "html": "<code>explode</code>"
                                                                },
                                                                {
                                                                    "text": "empty",
                                                                    "html": "<code>empty</code>"
                                                                },
                                                                {
                                                                    "text": "string",
                                                                    "html": "<code>string</code>"
                                                                },
                                                                {
                                                                    "text": "array",
                                                                    "html": "<code>array</code>"
                                                                },
                                                                {
                                                                    "text": "object",
                                                                    "html": "<code>object</code>"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "matrix",
                                                                            "html": "matrix"
                                                                        },
                                                                        {
                                                                            "text": "false",
                                                                            "html": "false"
                                                                        },
                                                                        {
                                                                            "text": ";color",
                                                                            "html": ";color"
                                                                        },
                                                                        {
                                                                            "text": ";color=blue",
                                                                            "html": ";color=blue"
                                                                        },
                                                                        {
                                                                            "text": ";color=blue,black,brown",
                                                                            "html": ";color=blue,black,brown"
                                                                        },
                                                                        {
                                                                            "text": ";color=R,100,G,200,B,150",
                                                                            "html": ";color=R,100,G,200,B,150"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "matrix",
                                                                            "html": "matrix"
                                                                        },
                                                                        {
                                                                            "text": "true",
                                                                            "html": "true"
                                                                        },
                                                                        {
                                                                            "text": ";color",
                                                                            "html": ";color"
                                                                        },
                                                                        {
                                                                            "text": ";color=blue",
                                                                            "html": ";color=blue"
                                                                        },
                                                                        {
                                                                            "text": ";color=blue;color=black;color=brown",
                                                                            "html": ";color=blue;color=black;color=brown"
                                                                        },
                                                                        {
                                                                            "text": ";R=100;G=200;B=150",
                                                                            "html": ";R=100;G=200;B=150"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "label",
                                                                            "html": "label"
                                                                        },
                                                                        {
                                                                            "text": "false",
                                                                            "html": "false"
                                                                        },
                                                                        {
                                                                            "text": ".",
                                                                            "html": "."
                                                                        },
                                                                        {
                                                                            "text": ".blue",
                                                                            "html": ".blue"
                                                                        },
                                                                        {
                                                                            "text": ".blue.black.brown",
                                                                            "html": ".blue.black.brown"
                                                                        },
                                                                        {
                                                                            "text": ".R.100.G.200.B.150",
                                                                            "html": ".R.100.G.200.B.150"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "label",
                                                                            "html": "label"
                                                                        },
                                                                        {
                                                                            "text": "true",
                                                                            "html": "true"
                                                                        },
                                                                        {
                                                                            "text": ".",
                                                                            "html": "."
                                                                        },
                                                                        {
                                                                            "text": ".blue",
                                                                            "html": ".blue"
                                                                        },
                                                                        {
                                                                            "text": ".blue.black.brown",
                                                                            "html": ".blue.black.brown"
                                                                        },
                                                                        {
                                                                            "text": ".R=100.G=200.B=150",
                                                                            "html": ".R=100.G=200.B=150"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "form",
                                                                            "html": "form"
                                                                        },
                                                                        {
                                                                            "text": "false",
                                                                            "html": "false"
                                                                        },
                                                                        {
                                                                            "text": "color=",
                                                                            "html": "color="
                                                                        },
                                                                        {
                                                                            "text": "color=blue",
                                                                            "html": "color=blue"
                                                                        },
                                                                        {
                                                                            "text": "color=blue,black,brown",
                                                                            "html": "color=blue,black,brown"
                                                                        },
                                                                        {
                                                                            "text": "color=R,100,G,200,B,150",
                                                                            "html": "color=R,100,G,200,B,150"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "form",
                                                                            "html": "form"
                                                                        },
                                                                        {
                                                                            "text": "true",
                                                                            "html": "true"
                                                                        },
                                                                        {
                                                                            "text": "color=",
                                                                            "html": "color="
                                                                        },
                                                                        {
                                                                            "text": "color=blue",
                                                                            "html": "color=blue"
                                                                        },
                                                                        {
                                                                            "text": "color=blue&color=black&color=brown",
                                                                            "html": "color=blue&amp;color=black&amp;color=brown"
                                                                        },
                                                                        {
                                                                            "text": "R=100&G=200&B=150",
                                                                            "html": "R=100&amp;G=200&amp;B=150"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "simple",
                                                                            "html": "simple"
                                                                        },
                                                                        {
                                                                            "text": "false",
                                                                            "html": "false"
                                                                        },
                                                                        {
                                                                            "text": "n/a",
                                                                            "html": "n/a"
                                                                        },
                                                                        {
                                                                            "text": "blue",
                                                                            "html": "blue"
                                                                        },
                                                                        {
                                                                            "text": "blue,black,brown",
                                                                            "html": "blue,black,brown"
                                                                        },
                                                                        {
                                                                            "text": "R,100,G,200,B,150",
                                                                            "html": "R,100,G,200,B,150"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "simple",
                                                                            "html": "simple"
                                                                        },
                                                                        {
                                                                            "text": "true",
                                                                            "html": "true"
                                                                        },
                                                                        {
                                                                            "text": "n/a",
                                                                            "html": "n/a"
                                                                        },
                                                                        {
                                                                            "text": "blue",
                                                                            "html": "blue"
                                                                        },
                                                                        {
                                                                            "text": "blue,black,brown",
                                                                            "html": "blue,black,brown"
                                                                        },
                                                                        {
                                                                            "text": "R=100,G=200,B=150",
                                                                            "html": "R=100,G=200,B=150"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "spaceDelimited",
                                                                            "html": "spaceDelimited"
                                                                        },
                                                                        {
                                                                            "text": "false",
                                                                            "html": "false"
                                                                        },
                                                                        {
                                                                            "text": "n/a",
                                                                            "html": "n/a"
                                                                        },
                                                                        {
                                                                            "text": "n/a",
                                                                            "html": "n/a"
                                                                        },
                                                                        {
                                                                            "text": "blue%20black%20brown",
                                                                            "html": "blue%20black%20brown"
                                                                        },
                                                                        {
                                                                            "text": "R%20100%20G%20200%20B%20150",
                                                                            "html": "R%20100%20G%20200%20B%20150"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "pipeDelimited",
                                                                            "html": "pipeDelimited"
                                                                        },
                                                                        {
                                                                            "text": "false",
                                                                            "html": "false"
                                                                        },
                                                                        {
                                                                            "text": "n/a",
                                                                            "html": "n/a"
                                                                        },
                                                                        {
                                                                            "text": "n/a",
                                                                            "html": "n/a"
                                                                        },
                                                                        {
                                                                            "text": "blue|black|brown",
                                                                            "html": "blue|black|brown"
                                                                        },
                                                                        {
                                                                            "text": "R|100|G|200|B|150",
                                                                            "html": "R|100|G|200|B|150"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "deepObject",
                                                                            "html": "deepObject"
                                                                        },
                                                                        {
                                                                            "text": "true",
                                                                            "html": "true"
                                                                        },
                                                                        {
                                                                            "text": "n/a",
                                                                            "html": "n/a"
                                                                        },
                                                                        {
                                                                            "text": "n/a",
                                                                            "html": "n/a"
                                                                        },
                                                                        {
                                                                            "text": "n/a",
                                                                            "html": "n/a"
                                                                        },
                                                                        {
                                                                            "text": "color[R]=100&color[G]=200&color[B]=150",
                                                                            "html": "color[R]=100&amp;color[G]=200&amp;color[B]=150"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "style-examples",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Parameter Object Examples",
                                                "html": "<h5 id=\"parameter-object-examples\">Parameter Object Examples</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "A header parameter with an array of 64 bit integer numbers:",
                                                        "html": "<p>A header parameter with an array of 64 bit integer numbers:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"name\": \"token\",\n  \"in\": \"header\",\n  \"description\": \"token to be passed as a header\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    }\n  },\n  \"style\": \"simple\"\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"name\": \"token\",\n  \"in\": \"header\",\n  \"description\": \"token to be passed as a header\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    }\n  },\n  \"style\": \"simple\"\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"name\": \"token\",\n  \"in\": \"header\",\n  \"description\": \"token to be passed as a header\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    }\n  },\n  \"style\": \"simple\"\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "name: token\nin: header\ndescription: token to be passed as a header\nrequired: true\nschema:\n  type: array\n  items:\n    type: integer\n    format: int64\nstyle: simple\n",
                                                        "html": "<pre><code class=\"language-yaml\">name: token\nin: header\ndescription: token to be passed as a header\nrequired: true\nschema:\n  type: array\n  items:\n    type: integer\n    format: int64\nstyle: simple\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "name: token\nin: header\ndescription: token to be passed as a header\nrequired: true\nschema:\n  type: array\n  items:\n    type: integer\n    format: int64\nstyle: simple\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "A path parameter of a string value:",
                                                        "html": "<p>A path parameter of a string value:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"name\": \"username\",\n  \"in\": \"path\",\n  \"description\": \"username to fetch\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"string\"\n  }\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"name\": \"username\",\n  \"in\": \"path\",\n  \"description\": \"username to fetch\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"string\"\n  }\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"name\": \"username\",\n  \"in\": \"path\",\n  \"description\": \"username to fetch\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"string\"\n  }\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "name: username\nin: path\ndescription: username to fetch\nrequired: true\nschema:\n  type: string\n",
                                                        "html": "<pre><code class=\"language-yaml\">name: username\nin: path\ndescription: username to fetch\nrequired: true\nschema:\n  type: string\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "name: username\nin: path\ndescription: username to fetch\nrequired: true\nschema:\n  type: string\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "An optional query parameter of a string value, allowing multiple values by repeating the query parameter:",
                                                        "html": "<p>An optional query parameter of a string value, allowing multiple values by repeating the query parameter:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"name\": \"id\",\n  \"in\": \"query\",\n  \"description\": \"ID of the object to fetch\",\n  \"required\": false,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    }\n  },\n  \"style\": \"form\",\n  \"explode\": true\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"name\": \"id\",\n  \"in\": \"query\",\n  \"description\": \"ID of the object to fetch\",\n  \"required\": false,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    }\n  },\n  \"style\": \"form\",\n  \"explode\": true\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"name\": \"id\",\n  \"in\": \"query\",\n  \"description\": \"ID of the object to fetch\",\n  \"required\": false,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    }\n  },\n  \"style\": \"form\",\n  \"explode\": true\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "name: id\nin: query\ndescription: ID of the object to fetch\nrequired: false\nschema:\n  type: array\n  items:\n    type: string\nstyle: form\nexplode: true\n",
                                                        "html": "<pre><code class=\"language-yaml\">name: id\nin: query\ndescription: ID of the object to fetch\nrequired: false\nschema:\n  type: array\n  items:\n    type: string\nstyle: form\nexplode: true\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "name: id\nin: query\ndescription: ID of the object to fetch\nrequired: false\nschema:\n  type: array\n  items:\n    type: string\nstyle: form\nexplode: true\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "A free-form query parameter, allowing undefined parameters of a specific type:",
                                                        "html": "<p>A free-form query parameter, allowing undefined parameters of a specific type:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"in\": \"query\",\n  \"name\": \"freeForm\",\n  \"schema\": {\n    \"type\": \"object\",\n    \"additionalProperties\": {\n      \"type\": \"integer\"\n    },\n  },\n  \"style\": \"form\"\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"in\": \"query\",\n  \"name\": \"freeForm\",\n  \"schema\": {\n    \"type\": \"object\",\n    \"additionalProperties\": {\n      \"type\": \"integer\"\n    },\n  },\n  \"style\": \"form\"\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"in\": \"query\",\n  \"name\": \"freeForm\",\n  \"schema\": {\n    \"type\": \"object\",\n    \"additionalProperties\": {\n      \"type\": \"integer\"\n    },\n  },\n  \"style\": \"form\"\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "in: query\nname: freeForm\nschema:\n  type: object\n  additionalProperties:\n    type: integer\nstyle: form\n",
                                                        "html": "<pre><code class=\"language-yaml\">in: query\nname: freeForm\nschema:\n  type: object\n  additionalProperties:\n    type: integer\nstyle: form\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "in: query\nname: freeForm\nschema:\n  type: object\n  additionalProperties:\n    type: integer\nstyle: form\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "A complex parameter using content to define serialization:",
                                                        "html": "<p>A complex parameter using <code>content</code> to define serialization:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"in\": \"query\",\n  \"name\": \"coordinates\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"lat\",\n          \"long\"\n        ],\n        \"properties\": {\n          \"lat\": {\n            \"type\": \"number\"\n          },\n          \"long\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n    }\n  }\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"in\": \"query\",\n  \"name\": \"coordinates\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"lat\",\n          \"long\"\n        ],\n        \"properties\": {\n          \"lat\": {\n            \"type\": \"number\"\n          },\n          \"long\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"in\": \"query\",\n  \"name\": \"coordinates\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"lat\",\n          \"long\"\n        ],\n        \"properties\": {\n          \"lat\": {\n            \"type\": \"number\"\n          },\n          \"long\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n    }\n  }\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "in: query\nname: coordinates\ncontent:\n  application/json:\n    schema:\n      type: object\n      required:\n        - lat\n        - long\n      properties:\n        lat:\n          type: number\n        long:\n          type: number\n",
                                                        "html": "<pre><code class=\"language-yaml\">in: query\nname: coordinates\ncontent:\n  application/json:\n    schema:\n      type: object\n      required:\n        - lat\n        - long\n      properties:\n        lat:\n          type: number\n        long:\n          type: number\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "in: query\nname: coordinates\ncontent:\n  application/json:\n    schema:\n      type: object\n      required:\n        - lat\n        - long\n      properties:\n        lat:\n          type: number\n        long:\n          type: number\n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "parameter-object-examples",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "parameter-object",
                                            "anchor": "parameterObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "Request Body Object",
                                        "html": "<h4 id=\"request-body-object\"><a name=\"requestBodyObject\"></a>Request Body Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "Describes a single request body.",
                                                "html": "<p>Describes a single request body.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_11\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\ndescription\nstring\nA brief description of the request body. This could contain examples of use.  CommonMark syntax MAY be used for rich text representation.\n\n\ncontent\nMap[string, Media Type Object]\nREQUIRED. The content of the request body. The key is a media type or media type range and the value describes it.  For requests that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*\n\n\nrequired\nboolean\nDetermines if the request body is required in the request. Defaults to false.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"requestBodyDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A brief description of the request body. This could contain examples of use.  <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n<tr>\n<td><a name=\"requestBodyContent\"></a>content</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, <a href=\"#mediaTypeObject\">Media Type Object</a>]</td>\n<td><strong>REQUIRED</strong>. The content of the request body. The key is a media type or <a href=\"https://tools.ietf.org/html/rfc7231#appendix-D\">media type range</a> and the value describes it.  For requests that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*</td>\n</tr>\n<tr>\n<td><a name=\"requestBodyRequired\"></a>required</td>\n<td style=\"text-align: center;\"><code>boolean</code></td>\n<td>Determines if the request body is required in the request. Defaults to <code>false</code>.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "requestBodyDescription",
                                                                    "values": [
                                                                        {
                                                                            "text": "description",
                                                                            "html": "<a name=\"requestBodyDescription\"></a>description"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "A brief description of the request body. This could contain examples of use.  CommonMark syntax MAY be used for rich text representation.",
                                                                            "html": "A brief description of the request body. This could contain examples of use.  <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "requestBodyContent",
                                                                    "values": [
                                                                        {
                                                                            "text": "content",
                                                                            "html": "<a name=\"requestBodyContent\"></a>content"
                                                                        },
                                                                        {
                                                                            "text": "Map[string, Media Type Object]",
                                                                            "html": "Map[<code>string</code>, <a href=\"#mediaTypeObject\">Media Type Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "REQUIRED. The content of the request body. The key is a media type or media type range and the value describes it.  For requests that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*",
                                                                            "html": "<strong>REQUIRED</strong>. The content of the request body. The key is a media type or <a href=\"https://tools.ietf.org/html/rfc7231#appendix-D\">media type range</a> and the value describes it.  For requests that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "requestBodyRequired",
                                                                    "values": [
                                                                        {
                                                                            "text": "required",
                                                                            "html": "<a name=\"requestBodyRequired\"></a>required"
                                                                        },
                                                                        {
                                                                            "text": "boolean",
                                                                            "html": "<code>boolean</code>"
                                                                        },
                                                                        {
                                                                            "text": "Determines if the request body is required in the request. Defaults to false.",
                                                                            "html": "Determines if the request body is required in the request. Defaults to <code>false</code>."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_11",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Request Body Examples",
                                                "html": "<h5 id=\"request-body-examples\">Request Body Examples</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "A request body with a referenced model definition.",
                                                        "html": "<p>A request body with a referenced model definition.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"description\": \"user to add to the system\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/User\"\n      },\n      \"examples\": {\n          \"user\" : {\n            \"summary\": \"User Example\", \n            \"externalValue\": \"https://foo.bar/examples/user-example.json\"\n          } \n        }\n    },\n    \"application/xml\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/User\"\n      },\n      \"examples\": {\n          \"user\" : {\n            \"summary\": \"User example in XML\",\n            \"externalValue\": \"https://foo.bar/examples/user-example.xml\"\n          }\n        }\n    },\n    \"text/plain\": {\n      \"examples\": {\n        \"user\" : {\n            \"summary\": \"User example in Plain text\",\n            \"externalValue\": \"https://foo.bar/examples/user-example.txt\" \n        }\n      } \n    },\n    \"*/*\": {\n      \"examples\": {\n        \"user\" : {\n            \"summary\": \"User example in other format\",\n            \"externalValue\": \"https://foo.bar/examples/user-example.whatever\"\n        }\n      }\n    }\n  }\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"description\": \"user to add to the system\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/User\"\n      },\n      \"examples\": {\n          \"user\" : {\n            \"summary\": \"User Example\", \n            \"externalValue\": \"https://foo.bar/examples/user-example.json\"\n          } \n        }\n    },\n    \"application/xml\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/User\"\n      },\n      \"examples\": {\n          \"user\" : {\n            \"summary\": \"User example in XML\",\n            \"externalValue\": \"https://foo.bar/examples/user-example.xml\"\n          }\n        }\n    },\n    \"text/plain\": {\n      \"examples\": {\n        \"user\" : {\n            \"summary\": \"User example in Plain text\",\n            \"externalValue\": \"https://foo.bar/examples/user-example.txt\" \n        }\n      } \n    },\n    \"*/*\": {\n      \"examples\": {\n        \"user\" : {\n            \"summary\": \"User example in other format\",\n            \"externalValue\": \"https://foo.bar/examples/user-example.whatever\"\n        }\n      }\n    }\n  }\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"description\": \"user to add to the system\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/User\"\n      },\n      \"examples\": {\n          \"user\" : {\n            \"summary\": \"User Example\", \n            \"externalValue\": \"https://foo.bar/examples/user-example.json\"\n          } \n        }\n    },\n    \"application/xml\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/User\"\n      },\n      \"examples\": {\n          \"user\" : {\n            \"summary\": \"User example in XML\",\n            \"externalValue\": \"https://foo.bar/examples/user-example.xml\"\n          }\n        }\n    },\n    \"text/plain\": {\n      \"examples\": {\n        \"user\" : {\n            \"summary\": \"User example in Plain text\",\n            \"externalValue\": \"https://foo.bar/examples/user-example.txt\" \n        }\n      } \n    },\n    \"*/*\": {\n      \"examples\": {\n        \"user\" : {\n            \"summary\": \"User example in other format\",\n            \"externalValue\": \"https://foo.bar/examples/user-example.whatever\"\n        }\n      }\n    }\n  }\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "description: user to add to the system\ncontent: \n  'application/json':\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: User Example\n        externalValue: 'https://foo.bar/examples/user-example.json'\n  'application/xml':\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: User example in XML\n        externalValue: 'https://foo.bar/examples/user-example.xml'\n  'text/plain':\n    examples:\n      user:\n        summary: User example in Plain text\n        externalValue: 'https://foo.bar/examples/user-example.txt'\n  '*/*':\n    examples:\n      user: \n        summary: User example in other format\n        externalValue: 'https://foo.bar/examples/user-example.whatever'\n",
                                                        "html": "<pre><code class=\"language-yaml\">description: user to add to the system\ncontent: \n  'application/json':\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: User Example\n        externalValue: 'https://foo.bar/examples/user-example.json'\n  'application/xml':\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: User example in XML\n        externalValue: 'https://foo.bar/examples/user-example.xml'\n  'text/plain':\n    examples:\n      user:\n        summary: User example in Plain text\n        externalValue: 'https://foo.bar/examples/user-example.txt'\n  '*/*':\n    examples:\n      user: \n        summary: User example in other format\n        externalValue: 'https://foo.bar/examples/user-example.whatever'\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "description: user to add to the system\ncontent: \n  'application/json':\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: User Example\n        externalValue: 'https://foo.bar/examples/user-example.json'\n  'application/xml':\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: User example in XML\n        externalValue: 'https://foo.bar/examples/user-example.xml'\n  'text/plain':\n    examples:\n      user:\n        summary: User example in Plain text\n        externalValue: 'https://foo.bar/examples/user-example.txt'\n  '*/*':\n    examples:\n      user: \n        summary: User example in other format\n        externalValue: 'https://foo.bar/examples/user-example.whatever'\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "A body parameter that is an array of string values:",
                                                        "html": "<p>A body parameter that is an array of string values:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"description\": \"user to add to the system\",\n  \"required\": true,\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"description\": \"user to add to the system\",\n  \"required\": true,\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"description\": \"user to add to the system\",\n  \"required\": true,\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "description: user to add to the system\nrequired: true\ncontent:\n  text/plain:\n    schema:\n      type: array\n      items:\n        type: string\n",
                                                        "html": "<pre><code class=\"language-yaml\">description: user to add to the system\nrequired: true\ncontent:\n  text/plain:\n    schema:\n      type: array\n      items:\n        type: string\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "description: user to add to the system\nrequired: true\ncontent:\n  text/plain:\n    schema:\n      type: array\n      items:\n        type: string\n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "request-body-examples",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "request-body-object",
                                            "anchor": "requestBodyObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "Media Type Object",
                                        "html": "<h4 id=\"media-type-object\"><a name=\"mediaTypeObject\"></a>Media Type Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "Each Media Type Object provides schema and examples for the media type identified by its key.",
                                                "html": "<p>Each Media Type Object provides schema and examples for the media type identified by its key.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_12\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\nschema\nSchema Object\nThe schema defining the content of the request, response, or parameter.\n\n\nexample\nAny\nExample of the media type.  The example object SHOULD be in the correct format as specified by the media type.  The example field is mutually exclusive of the examples field.  Furthermore, if referencing a schema which contains an example, the example value SHALL override the example provided by the schema.\n\n\nexamples\nMap[ string, Example Object | Reference Object]\nExamples of the media type.  Each example object SHOULD  match the media type and specified schema if present.  The examples field is mutually exclusive of the example field.  Furthermore, if referencing a schema which contains an example, the examples value SHALL override the example provided by the schema.\n\n\nencoding\nMap[string, Encoding Object]\nA map between a property name and its encoding information. The key, being the property name, MUST exist in the schema as a property. The encoding object SHALL only apply to requestBody objects when the media type is multipart or application/x-www-form-urlencoded.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"mediaTypeSchema\"></a>schema</td>\n<td style=\"text-align: center;\"><a href=\"#schemaObject\">Schema Object</a></td>\n<td>The schema defining the content of the request, response, or parameter.</td>\n</tr>\n<tr>\n<td><a name=\"mediaTypeExample\"></a>example</td>\n<td style=\"text-align: center;\">Any</td>\n<td>Example of the media type.  The example object SHOULD be in the correct format as specified by the media type.  The <code>example</code> field is mutually exclusive of the <code>examples</code> field.  Furthermore, if referencing a <code>schema</code> which contains an example, the <code>example</code> value SHALL <em>override</em> the example provided by the schema.</td>\n</tr>\n<tr>\n<td><a name=\"mediaTypeExamples\"></a>examples</td>\n<td style=\"text-align: center;\">Map[ <code>string</code>, <a href=\"#exampleObject\">Example Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>Examples of the media type.  Each example object SHOULD  match the media type and specified schema if present.  The <code>examples</code> field is mutually exclusive of the <code>example</code> field.  Furthermore, if referencing a <code>schema</code> which contains an example, the <code>examples</code> value SHALL <em>override</em> the example provided by the schema.</td>\n</tr>\n<tr>\n<td><a name=\"mediaTypeEncoding\"></a>encoding</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, <a href=\"#encodingObject\">Encoding Object</a>]</td>\n<td>A map between a property name and its encoding information. The key, being the property name, MUST exist in the schema as a property. The encoding object SHALL only apply to <code>requestBody</code> objects when the media type is <code>multipart</code> or <code>application/x-www-form-urlencoded</code>.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "mediaTypeSchema",
                                                                    "values": [
                                                                        {
                                                                            "text": "schema",
                                                                            "html": "<a name=\"mediaTypeSchema\"></a>schema"
                                                                        },
                                                                        {
                                                                            "text": "Schema Object",
                                                                            "html": "<a href=\"#schemaObject\">Schema Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "The schema defining the content of the request, response, or parameter.",
                                                                            "html": "The schema defining the content of the request, response, or parameter."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "mediaTypeExample",
                                                                    "values": [
                                                                        {
                                                                            "text": "example",
                                                                            "html": "<a name=\"mediaTypeExample\"></a>example"
                                                                        },
                                                                        {
                                                                            "text": "Any",
                                                                            "html": "Any"
                                                                        },
                                                                        {
                                                                            "text": "Example of the media type.  The example object SHOULD be in the correct format as specified by the media type.  The example field is mutually exclusive of the examples field.  Furthermore, if referencing a schema which contains an example, the example value SHALL override the example provided by the schema.",
                                                                            "html": "Example of the media type.  The example object SHOULD be in the correct format as specified by the media type.  The <code>example</code> field is mutually exclusive of the <code>examples</code> field.  Furthermore, if referencing a <code>schema</code> which contains an example, the <code>example</code> value SHALL <em>override</em> the example provided by the schema."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "mediaTypeExamples",
                                                                    "values": [
                                                                        {
                                                                            "text": "examples",
                                                                            "html": "<a name=\"mediaTypeExamples\"></a>examples"
                                                                        },
                                                                        {
                                                                            "text": "Map[ string, Example Object | Reference Object]",
                                                                            "html": "Map[ <code>string</code>, <a href=\"#exampleObject\">Example Object</a> | <a href=\"#referenceObject\">Reference Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "Examples of the media type.  Each example object SHOULD  match the media type and specified schema if present.  The examples field is mutually exclusive of the example field.  Furthermore, if referencing a schema which contains an example, the examples value SHALL override the example provided by the schema.",
                                                                            "html": "Examples of the media type.  Each example object SHOULD  match the media type and specified schema if present.  The <code>examples</code> field is mutually exclusive of the <code>example</code> field.  Furthermore, if referencing a <code>schema</code> which contains an example, the <code>examples</code> value SHALL <em>override</em> the example provided by the schema."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "mediaTypeEncoding",
                                                                    "values": [
                                                                        {
                                                                            "text": "encoding",
                                                                            "html": "<a name=\"mediaTypeEncoding\"></a>encoding"
                                                                        },
                                                                        {
                                                                            "text": "Map[string, Encoding Object]",
                                                                            "html": "Map[<code>string</code>, <a href=\"#encodingObject\">Encoding Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "A map between a property name and its encoding information. The key, being the property name, MUST exist in the schema as a property. The encoding object SHALL only apply to requestBody objects when the media type is multipart or application/x-www-form-urlencoded.",
                                                                            "html": "A map between a property name and its encoding information. The key, being the property name, MUST exist in the schema as a property. The encoding object SHALL only apply to <code>requestBody</code> objects when the media type is <code>multipart</code> or <code>application/x-www-form-urlencoded</code>."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_12",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Media Type Examples",
                                                "html": "<h5 id=\"media-type-examples\">Media Type Examples</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"application/json\": {\n    \"schema\": {\n         \"$ref\": \"#/components/schemas/Pet\"\n    },\n    \"examples\": {\n      \"cat\" : {\n        \"summary\": \"An example of a cat\",\n        \"value\": \n          {\n            \"name\": \"Fluffy\",\n            \"petType\": \"Cat\",\n            \"color\": \"White\",\n            \"gender\": \"male\",\n            \"breed\": \"Persian\"\n          }\n      },\n      \"dog\": {\n        \"summary\": \"An example of a dog with a cat's name\",\n        \"value\" :  { \n          \"name\": \"Puma\",\n          \"petType\": \"Dog\",\n          \"color\": \"Black\",\n          \"gender\": \"Female\",\n          \"breed\": \"Mixed\"\n        },\n      \"frog\": {\n          \"$ref\": \"#/components/examples/frog-example\"\n        }\n      }\n    }\n  }\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"application/json\": {\n    \"schema\": {\n         \"$ref\": \"#/components/schemas/Pet\"\n    },\n    \"examples\": {\n      \"cat\" : {\n        \"summary\": \"An example of a cat\",\n        \"value\": \n          {\n            \"name\": \"Fluffy\",\n            \"petType\": \"Cat\",\n            \"color\": \"White\",\n            \"gender\": \"male\",\n            \"breed\": \"Persian\"\n          }\n      },\n      \"dog\": {\n        \"summary\": \"An example of a dog with a cat's name\",\n        \"value\" :  { \n          \"name\": \"Puma\",\n          \"petType\": \"Dog\",\n          \"color\": \"Black\",\n          \"gender\": \"Female\",\n          \"breed\": \"Mixed\"\n        },\n      \"frog\": {\n          \"$ref\": \"#/components/examples/frog-example\"\n        }\n      }\n    }\n  }\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"application/json\": {\n    \"schema\": {\n         \"$ref\": \"#/components/schemas/Pet\"\n    },\n    \"examples\": {\n      \"cat\" : {\n        \"summary\": \"An example of a cat\",\n        \"value\": \n          {\n            \"name\": \"Fluffy\",\n            \"petType\": \"Cat\",\n            \"color\": \"White\",\n            \"gender\": \"male\",\n            \"breed\": \"Persian\"\n          }\n      },\n      \"dog\": {\n        \"summary\": \"An example of a dog with a cat's name\",\n        \"value\" :  { \n          \"name\": \"Puma\",\n          \"petType\": \"Dog\",\n          \"color\": \"Black\",\n          \"gender\": \"Female\",\n          \"breed\": \"Mixed\"\n        },\n      \"frog\": {\n          \"$ref\": \"#/components/examples/frog-example\"\n        }\n      }\n    }\n  }\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "application/json: \n  schema:\n    $ref: \"#/components/schemas/Pet\"\n  examples:\n    cat:\n      summary: An example of a cat\n      value:\n        name: Fluffy\n        petType: Cat\n        color: White\n        gender: male\n        breed: Persian\n    dog:\n      summary: An example of a dog with a cat's name\n      value:\n        name: Puma\n        petType: Dog\n        color: Black\n        gender: Female\n        breed: Mixed\n    frog:\n      $ref: \"#/components/examples/frog-example\"\n",
                                                        "html": "<pre><code class=\"language-yaml\">application/json: \n  schema:\n    $ref: \"#/components/schemas/Pet\"\n  examples:\n    cat:\n      summary: An example of a cat\n      value:\n        name: Fluffy\n        petType: Cat\n        color: White\n        gender: male\n        breed: Persian\n    dog:\n      summary: An example of a dog with a cat's name\n      value:\n        name: Puma\n        petType: Dog\n        color: Black\n        gender: Female\n        breed: Mixed\n    frog:\n      $ref: \"#/components/examples/frog-example\"\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "application/json: \n  schema:\n    $ref: \"#/components/schemas/Pet\"\n  examples:\n    cat:\n      summary: An example of a cat\n      value:\n        name: Fluffy\n        petType: Cat\n        color: White\n        gender: male\n        breed: Persian\n    dog:\n      summary: An example of a dog with a cat's name\n      value:\n        name: Puma\n        petType: Dog\n        color: Black\n        gender: Female\n        breed: Mixed\n    frog:\n      $ref: \"#/components/examples/frog-example\"\n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "media-type-examples",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Considerations for File Uploads",
                                                "html": "<h5 id=\"considerations-for-file-uploads\">Considerations for File Uploads</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "In contrast with the 2.0 specification, file input/output content in OpenAPI is described with the same semantics as any other schema type.",
                                                        "html": "<p>In contrast with the 2.0 specification, <code>file</code> input/output content in OpenAPI is described with the same semantics as any other schema type.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "In contrast with the 3.0 specification, the format keyword has no effect on the content-encoding of the schema. JSON Schema offers a contentEncoding keyword, which may be used to specify the Content-Encoding for the schema. The contentEncoding keyword supports all encodings defined in RFC4648, including \"base64\" and \"base64url\", as well as \"quoted-printable\" from RFC2045. The encoding specified by the contentEncoding keyword is independent of an encoding specified by the Content-Type header in the request or response or metadata of a multipart body -- when both are present, the encoding specified in the contentEncoding is applied first and then the encoding specified in the Content-Type header.",
                                                        "html": "<p>In contrast with the 3.0 specification, the <code>format</code> keyword has no effect on the content-encoding of the schema. JSON Schema offers a <code>contentEncoding</code> keyword, which may be used to specify the <code>Content-Encoding</code> for the schema. The <code>contentEncoding</code> keyword supports all encodings defined in <a href=\"https://tools.ietf.org/html/rfc4648\">RFC4648</a>, including \"base64\" and \"base64url\", as well as \"quoted-printable\" from <a href=\"https://tools.ietf.org/html/rfc2045#section-6.7\">RFC2045</a>. The encoding specified by the <code>contentEncoding</code> keyword is independent of an encoding specified by the <code>Content-Type</code> header in the request or response or metadata of a multipart body -- when both are present, the encoding specified in the <code>contentEncoding</code> is applied first and then the encoding specified in the <code>Content-Type</code> header.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "JSON Schema also offers a contentMediaType keyword.  However, when the media type is already specified by the Media Type Object's key, or by the contentType field of an Encoding Object, the contentMediaType keyword SHALL be ignored if present.",
                                                        "html": "<p>JSON Schema also offers a <code>contentMediaType</code> keyword.  However, when the media type is already specified by the Media Type Object's key, or by the <code>contentType</code> field of an <a href=\"#encodingObject\">Encoding Object</a>, the <code>contentMediaType</code> keyword SHALL be ignored if present.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "Examples:",
                                                        "html": "<p>Examples:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "Content transferred in binary (octet-stream) MAY omit schema:",
                                                        "html": "<p>Content transferred in binary (octet-stream) MAY omit <code>schema</code>:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "# a PNG image as a binary file:\ncontent:\n    image/png: {}\n",
                                                        "html": "<pre><code class=\"language-yaml\"># a PNG image as a binary file:\ncontent:\n    image/png: {}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "# a PNG image as a binary file:\ncontent:\n    image/png: {}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "# an arbitrary binary file:\ncontent:\n    application/octet-stream: {}\n",
                                                        "html": "<pre><code class=\"language-yaml\"># an arbitrary binary file:\ncontent:\n    application/octet-stream: {}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "# an arbitrary binary file:\ncontent:\n    application/octet-stream: {}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "Binary content transferred with base64 encoding:",
                                                        "html": "<p>Binary content transferred with base64 encoding:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "content:\n    image/png:\n        schema:\n            type: string\n            contentMediaType: image/png\n            contentEncoding: base64\n",
                                                        "html": "<pre><code class=\"language-yaml\">content:\n    image/png:\n        schema:\n            type: string\n            contentMediaType: image/png\n            contentEncoding: base64\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "content:\n    image/png:\n        schema:\n            type: string\n            contentMediaType: image/png\n            contentEncoding: base64\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "Note that the Content-Type remains image/png, describing the semantics of the payload.  The JSON Schema type and contentEncoding fields explain that the payload is transferred as text.  The JSON Schema contentMediaType is technically redundant, but can be used by JSON Schema tools that may not be aware of the OpenAPI context.",
                                                        "html": "<p>Note that the <code>Content-Type</code> remains <code>image/png</code>, describing the semantics of the payload.  The JSON Schema <code>type</code> and <code>contentEncoding</code> fields explain that the payload is transferred as text.  The JSON Schema <code>contentMediaType</code> is technically redundant, but can be used by JSON Schema tools that may not be aware of the OpenAPI context.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "These examples apply to either input payloads of file uploads or response payloads.",
                                                        "html": "<p>These examples apply to either input payloads of file uploads or response payloads.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "A requestBody for submitting a file in a POST operation may look like the following example:",
                                                        "html": "<p>A <code>requestBody</code> for submitting a file in a <code>POST</code> operation may look like the following example:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "requestBody:\n  content:\n    application/octet-stream: {}\n",
                                                        "html": "<pre><code class=\"language-yaml\">requestBody:\n  content:\n    application/octet-stream: {}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "requestBody:\n  content:\n    application/octet-stream: {}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "In addition, specific media types MAY be specified:",
                                                        "html": "<p>In addition, specific media types MAY be specified:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "# multiple, specific media types may be specified:\nrequestBody:\n  content:\n    # a binary file of type png or jpeg\n    image/jpeg: {}\n    image/png: {}\n",
                                                        "html": "<pre><code class=\"language-yaml\"># multiple, specific media types may be specified:\nrequestBody:\n  content:\n    # a binary file of type png or jpeg\n    image/jpeg: {}\n    image/png: {}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "# multiple, specific media types may be specified:\nrequestBody:\n  content:\n    # a binary file of type png or jpeg\n    image/jpeg: {}\n    image/png: {}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "To upload multiple files, a multipart media type MUST be used:",
                                                        "html": "<p>To upload multiple files, a <code>multipart</code> media type MUST be used:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "requestBody:\n  content:\n    multipart/form-data:\n      schema:\n        properties:\n          # The property name 'file' will be used for all files.\n          file:\n            type: array\n            items: {}\n",
                                                        "html": "<pre><code class=\"language-yaml\">requestBody:\n  content:\n    multipart/form-data:\n      schema:\n        properties:\n          # The property name 'file' will be used for all files.\n          file:\n            type: array\n            items: {}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "requestBody:\n  content:\n    multipart/form-data:\n      schema:\n        properties:\n          # The property name 'file' will be used for all files.\n          file:\n            type: array\n            items: {}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "As seen in the section on multipart/form-data below, the empty schema for items indicates a media type of application/octet-stream.",
                                                        "html": "<p>As seen in the section on <code>multipart/form-data</code> below, the empty schema for <code>items</code> indicates a media type of <code>application/octet-stream</code>.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "considerations-for-file-uploads",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Support for x-www-form-urlencoded Request Bodies",
                                                "html": "<h5 id=\"support-for-x-www-form-urlencoded-request-bodies\">Support for x-www-form-urlencoded Request Bodies</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "To submit content using form url encoding via RFC1866, the following\ndefinition may be used:",
                                                        "html": "<p>To submit content using form url encoding via <a href=\"https://tools.ietf.org/html/rfc1866\">RFC1866</a>, the following\ndefinition may be used:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "requestBody:\n  content:\n    application/x-www-form-urlencoded:\n      schema:\n        type: object\n        properties:\n          id:\n            type: string\n            format: uuid\n          address:\n            # complex types are stringified to support RFC 1866\n            type: object\n            properties: {}\n",
                                                        "html": "<pre><code class=\"language-yaml\">requestBody:\n  content:\n    application/x-www-form-urlencoded:\n      schema:\n        type: object\n        properties:\n          id:\n            type: string\n            format: uuid\n          address:\n            # complex types are stringified to support RFC 1866\n            type: object\n            properties: {}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "requestBody:\n  content:\n    application/x-www-form-urlencoded:\n      schema:\n        type: object\n        properties:\n          id:\n            type: string\n            format: uuid\n          address:\n            # complex types are stringified to support RFC 1866\n            type: object\n            properties: {}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "In this example, the contents in the requestBody MUST be stringified per RFC1866 when passed to the server.  In addition, the address field complex object will be stringified.",
                                                        "html": "<p>In this example, the contents in the <code>requestBody</code> MUST be stringified per <a href=\"https://tools.ietf.org/html/rfc1866/\">RFC1866</a> when passed to the server.  In addition, the <code>address</code> field complex object will be stringified.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "When passing complex objects in the application/x-www-form-urlencoded content type, the default serialization strategy of such properties is described in the Encoding Object's style property as form.",
                                                        "html": "<p>When passing complex objects in the <code>application/x-www-form-urlencoded</code> content type, the default serialization strategy of such properties is described in the <a href=\"#encodingObject\"><code>Encoding Object</code></a>'s <a href=\"#encodingStyle\"><code>style</code></a> property as <code>form</code>.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "support-for-x-www-form-urlencoded-request-bodies",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Special Considerations for multipart Content",
                                                "html": "<h5 id=\"special-considerations-for-multipart-content\">Special Considerations for <code>multipart</code> Content</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "It is common to use multipart/form-data as a Content-Type when transferring request bodies to operations.  In contrast to 2.0, a schema is REQUIRED to define the input parameters to the operation when using multipart content.  This supports complex structures as well as supporting mechanisms for multiple file uploads.",
                                                        "html": "<p>It is common to use <code>multipart/form-data</code> as a <code>Content-Type</code> when transferring request bodies to operations.  In contrast to 2.0, a <code>schema</code> is REQUIRED to define the input parameters to the operation when using <code>multipart</code> content.  This supports complex structures as well as supporting mechanisms for multiple file uploads.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "In a multipart/form-data request body, each schema property, or each element of a schema array property, takes a section in the payload with an internal header as defined by RFC7578. The serialization strategy for each property of a multipart/form-data request body can be specified in an associated Encoding Object.",
                                                        "html": "<p>In a <code>multipart/form-data</code> request body, each schema property, or each element of a schema array property, takes a section in the payload with an internal header as defined by <a href=\"https://tools.ietf.org/html/rfc7578\">RFC7578</a>. The serialization strategy for each property of a <code>multipart/form-data</code> request body can be specified in an associated <a href=\"#encodingObject\"><code>Encoding Object</code></a>.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "When passing in multipart types, boundaries MAY be used to separate sections of the content being transferred \u2013 thus, the following default Content-Types are defined for multipart:",
                                                        "html": "<p>When passing in <code>multipart</code> types, boundaries MAY be used to separate sections of the content being transferred \u2013 thus, the following default <code>Content-Type</code>s are defined for <code>multipart</code>:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "\nIf the property is a primitive, or an array of primitive values, the default Content-Type is text/plain\nIf the property is complex, or an array of complex values, the default Content-Type is application/json\nIf the property is a type: string with a contentEncoding, the default Content-Type is application/octet-stream\n",
                                                        "html": "<ul>\n<li>If the property is a primitive, or an array of primitive values, the default Content-Type is <code>text/plain</code></li>\n<li>If the property is complex, or an array of complex values, the default Content-Type is <code>application/json</code></li>\n<li>If the property is a <code>type: string</code> with a <code>contentEncoding</code>, the default Content-Type is <code>application/octet-stream</code></li>\n</ul>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "Per the JSON Schema specification, contentMediaType without contentEncoding present is treated as if contentEncoding: identity were present.  While useful for embedding text documents such as text/html into JSON strings, it is not useful for a multipart/form-data part, as it just causes the document to be treated as text/plain instead of its actual media type.  Use the Encoding Object without contentMediaType if no contentEncoding is required.",
                                                        "html": "<p>Per the JSON Schema specification, <code>contentMediaType</code> without <code>contentEncoding</code> present is treated as if <code>contentEncoding: identity</code> were present.  While useful for embedding text documents such as <code>text/html</code> into JSON strings, it is not useful for a <code>multipart/form-data</code> part, as it just causes the document to be treated as <code>text/plain</code> instead of its actual media type.  Use the Encoding Object without <code>contentMediaType</code> if no <code>contentEncoding</code> is required.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "Examples:",
                                                        "html": "<p>Examples:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "requestBody:\n  content:\n    multipart/form-data:\n      schema:\n        type: object\n        properties:\n          id:\n            type: string\n            format: uuid\n          address:\n            # default Content-Type for objects is `application/json`\n            type: object\n            properties: {}\n          profileImage:\n            # Content-Type for application-level encoded resource is `text/plain`\n            type: string\n            contentMediaType: image/png\n            contentEncoding: base64\n          children:\n            # default Content-Type for arrays is based on the _inner_ type (`text/plain` here)\n            type: array\n            items:\n              type: string\n          addresses:\n            # default Content-Type for arrays is based on the _inner_ type (object shown, so `application/json` in this example)\n            type: array\n            items:\n              type: object\n              $ref: '#/components/schemas/Address'\n",
                                                        "html": "<pre><code class=\"language-yaml\">requestBody:\n  content:\n    multipart/form-data:\n      schema:\n        type: object\n        properties:\n          id:\n            type: string\n            format: uuid\n          address:\n            # default Content-Type for objects is `application/json`\n            type: object\n            properties: {}\n          profileImage:\n            # Content-Type for application-level encoded resource is `text/plain`\n            type: string\n            contentMediaType: image/png\n            contentEncoding: base64\n          children:\n            # default Content-Type for arrays is based on the _inner_ type (`text/plain` here)\n            type: array\n            items:\n              type: string\n          addresses:\n            # default Content-Type for arrays is based on the _inner_ type (object shown, so `application/json` in this example)\n            type: array\n            items:\n              type: object\n              $ref: '#/components/schemas/Address'\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "requestBody:\n  content:\n    multipart/form-data:\n      schema:\n        type: object\n        properties:\n          id:\n            type: string\n            format: uuid\n          address:\n            # default Content-Type for objects is `application/json`\n            type: object\n            properties: {}\n          profileImage:\n            # Content-Type for application-level encoded resource is `text/plain`\n            type: string\n            contentMediaType: image/png\n            contentEncoding: base64\n          children:\n            # default Content-Type for arrays is based on the _inner_ type (`text/plain` here)\n            type: array\n            items:\n              type: string\n          addresses:\n            # default Content-Type for arrays is based on the _inner_ type (object shown, so `application/json` in this example)\n            type: array\n            items:\n              type: object\n              $ref: '#/components/schemas/Address'\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "An encoding attribute is introduced to give you control over the serialization of parts of multipart request bodies.  This attribute is only applicable to multipart and application/x-www-form-urlencoded request bodies.",
                                                        "html": "<p>An <code>encoding</code> attribute is introduced to give you control over the serialization of parts of <code>multipart</code> request bodies.  This attribute is <em>only</em> applicable to <code>multipart</code> and <code>application/x-www-form-urlencoded</code> request bodies.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "special-considerations-for-multipart-content",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "media-type-object",
                                            "anchor": "mediaTypeObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "Encoding Object",
                                        "html": "<h4 id=\"encoding-object\"><a name=\"encodingObject\"></a>Encoding Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "A single encoding definition applied to a single schema property.",
                                                "html": "<p>A single encoding definition applied to a single schema property.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_13\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\ncontentType\nstring\nThe Content-Type for encoding a specific property. Default value depends on the property type: for object - application/json;  for array \u2013 the default is defined based on the inner type; for all other cases the default is application/octet-stream. The value can be a specific media type (e.g. application/json), a wildcard media type (e.g. image/*), or a comma-separated list of the two types.\n\n\nheaders\nMap[string, Header Object | Reference Object]\nA map allowing additional information to be provided as headers, for example Content-Disposition.  Content-Type is described separately and SHALL be ignored in this section. This property SHALL be ignored if the request body media type is not a multipart.\n\n\nstyle\nstring\nDescribes how a specific property value will be serialized depending on its type.  See Parameter Object for details on the style property. The behavior follows the same values as query parameters, including default values. This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data. If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored.\n\n\nexplode\nboolean\nWhen this is true, property values of type array or object generate separate parameters for each value of the array, or key-value-pair of the map.  For other types of properties this property has no effect. When style is form, the default value is true. For all other styles, the default value is false. This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data. If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored.\n\n\nallowReserved\nboolean\nDetermines whether the parameter value SHOULD allow reserved characters, as defined by RFC3986 :/?#[]@!$&'()*+,;= to be included without percent-encoding. The default value is false. This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data. If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"encodingContentType\"></a>contentType</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>The Content-Type for encoding a specific property. Default value depends on the property type: for <code>object</code> - <code>application/json</code>;  for <code>array</code> \u2013 the default is defined based on the inner type; for all other cases the default is <code>application/octet-stream</code>. The value can be a specific media type (e.g. <code>application/json</code>), a wildcard media type (e.g. <code>image/*</code>), or a comma-separated list of the two types.</td>\n</tr>\n<tr>\n<td><a name=\"encodingHeaders\"></a>headers</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, <a href=\"#headerObject\">Header Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>A map allowing additional information to be provided as headers, for example <code>Content-Disposition</code>.  <code>Content-Type</code> is described separately and SHALL be ignored in this section. This property SHALL be ignored if the request body media type is not a <code>multipart</code>.</td>\n</tr>\n<tr>\n<td><a name=\"encodingStyle\"></a>style</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>Describes how a specific property value will be serialized depending on its type.  See <a href=\"#parameterObject\">Parameter Object</a> for details on the <a href=\"#parameterStyle\"><code>style</code></a> property. The behavior follows the same values as <code>query</code> parameters, including default values. This property SHALL be ignored if the request body media type is not <code>application/x-www-form-urlencoded</code> or <code>multipart/form-data</code>. If a value is explicitly defined, then the value of <a href=\"#encodingContentType\"><code>contentType</code></a> (implicit or explicit) SHALL be ignored.</td>\n</tr>\n<tr>\n<td><a name=\"encodingExplode\"></a>explode</td>\n<td style=\"text-align: center;\"><code>boolean</code></td>\n<td>When this is true, property values of type <code>array</code> or <code>object</code> generate separate parameters for each value of the array, or key-value-pair of the map.  For other types of properties this property has no effect. When <a href=\"#encodingStyle\"><code>style</code></a> is <code>form</code>, the default value is <code>true</code>. For all other styles, the default value is <code>false</code>. This property SHALL be ignored if the request body media type is not <code>application/x-www-form-urlencoded</code> or <code>multipart/form-data</code>. If a value is explicitly defined, then the value of <a href=\"#encodingContentType\"><code>contentType</code></a> (implicit or explicit) SHALL be ignored.</td>\n</tr>\n<tr>\n<td><a name=\"encodingAllowReserved\"></a>allowReserved</td>\n<td style=\"text-align: center;\"><code>boolean</code></td>\n<td>Determines whether the parameter value SHOULD allow reserved characters, as defined by <a href=\"https://tools.ietf.org/html/rfc3986#section-2.2\">RFC3986</a> <code>:/?#[]@!$&amp;'()*+,;=</code> to be included without percent-encoding. The default value is <code>false</code>. This property SHALL be ignored if the request body media type is not <code>application/x-www-form-urlencoded</code> or <code>multipart/form-data</code>. If a value is explicitly defined, then the value of <a href=\"#encodingContentType\"><code>contentType</code></a> (implicit or explicit) SHALL be ignored.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "encodingContentType",
                                                                    "values": [
                                                                        {
                                                                            "text": "contentType",
                                                                            "html": "<a name=\"encodingContentType\"></a>contentType"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "The Content-Type for encoding a specific property. Default value depends on the property type: for object - application/json;  for array \u2013 the default is defined based on the inner type; for all other cases the default is application/octet-stream. The value can be a specific media type (e.g. application/json), a wildcard media type (e.g. image/*), or a comma-separated list of the two types.",
                                                                            "html": "The Content-Type for encoding a specific property. Default value depends on the property type: for <code>object</code> - <code>application/json</code>;  for <code>array</code> \u2013 the default is defined based on the inner type; for all other cases the default is <code>application/octet-stream</code>. The value can be a specific media type (e.g. <code>application/json</code>), a wildcard media type (e.g. <code>image/*</code>), or a comma-separated list of the two types."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "encodingHeaders",
                                                                    "values": [
                                                                        {
                                                                            "text": "headers",
                                                                            "html": "<a name=\"encodingHeaders\"></a>headers"
                                                                        },
                                                                        {
                                                                            "text": "Map[string, Header Object | Reference Object]",
                                                                            "html": "Map[<code>string</code>, <a href=\"#headerObject\">Header Object</a> | <a href=\"#referenceObject\">Reference Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "A map allowing additional information to be provided as headers, for example Content-Disposition.  Content-Type is described separately and SHALL be ignored in this section. This property SHALL be ignored if the request body media type is not a multipart.",
                                                                            "html": "A map allowing additional information to be provided as headers, for example <code>Content-Disposition</code>.  <code>Content-Type</code> is described separately and SHALL be ignored in this section. This property SHALL be ignored if the request body media type is not a <code>multipart</code>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "encodingStyle",
                                                                    "values": [
                                                                        {
                                                                            "text": "style",
                                                                            "html": "<a name=\"encodingStyle\"></a>style"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "Describes how a specific property value will be serialized depending on its type.  See Parameter Object for details on the style property. The behavior follows the same values as query parameters, including default values. This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data. If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored.",
                                                                            "html": "Describes how a specific property value will be serialized depending on its type.  See <a href=\"#parameterObject\">Parameter Object</a> for details on the <a href=\"#parameterStyle\"><code>style</code></a> property. The behavior follows the same values as <code>query</code> parameters, including default values. This property SHALL be ignored if the request body media type is not <code>application/x-www-form-urlencoded</code> or <code>multipart/form-data</code>. If a value is explicitly defined, then the value of <a href=\"#encodingContentType\"><code>contentType</code></a> (implicit or explicit) SHALL be ignored."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "encodingExplode",
                                                                    "values": [
                                                                        {
                                                                            "text": "explode",
                                                                            "html": "<a name=\"encodingExplode\"></a>explode"
                                                                        },
                                                                        {
                                                                            "text": "boolean",
                                                                            "html": "<code>boolean</code>"
                                                                        },
                                                                        {
                                                                            "text": "When this is true, property values of type array or object generate separate parameters for each value of the array, or key-value-pair of the map.  For other types of properties this property has no effect. When style is form, the default value is true. For all other styles, the default value is false. This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data. If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored.",
                                                                            "html": "When this is true, property values of type <code>array</code> or <code>object</code> generate separate parameters for each value of the array, or key-value-pair of the map.  For other types of properties this property has no effect. When <a href=\"#encodingStyle\"><code>style</code></a> is <code>form</code>, the default value is <code>true</code>. For all other styles, the default value is <code>false</code>. This property SHALL be ignored if the request body media type is not <code>application/x-www-form-urlencoded</code> or <code>multipart/form-data</code>. If a value is explicitly defined, then the value of <a href=\"#encodingContentType\"><code>contentType</code></a> (implicit or explicit) SHALL be ignored."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "encodingAllowReserved",
                                                                    "values": [
                                                                        {
                                                                            "text": "allowReserved",
                                                                            "html": "<a name=\"encodingAllowReserved\"></a>allowReserved"
                                                                        },
                                                                        {
                                                                            "text": "boolean",
                                                                            "html": "<code>boolean</code>"
                                                                        },
                                                                        {
                                                                            "text": "Determines whether the parameter value SHOULD allow reserved characters, as defined by RFC3986 :/?#[]@!$&'()*+,;= to be included without percent-encoding. The default value is false. This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data. If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored.",
                                                                            "html": "Determines whether the parameter value SHOULD allow reserved characters, as defined by <a href=\"https://tools.ietf.org/html/rfc3986#section-2.2\">RFC3986</a> <code>:/?#[]@!$&amp;'()*+,;=</code> to be included without percent-encoding. The default value is <code>false</code>. This property SHALL be ignored if the request body media type is not <code>application/x-www-form-urlencoded</code> or <code>multipart/form-data</code>. If a value is explicitly defined, then the value of <a href=\"#encodingContentType\"><code>contentType</code></a> (implicit or explicit) SHALL be ignored."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_13",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Encoding Object Example",
                                                "html": "<h5 id=\"encoding-object-example\">Encoding Object Example</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "requestBody:\n  content:\n    multipart/form-data:\n      schema:\n        type: object\n        properties:\n          id:\n            # default is text/plain\n            type: string\n            format: uuid\n          address:\n            # default is application/json\n            type: object\n            properties: {}\n          historyMetadata:\n            # need to declare XML format!\n            description: metadata in XML format\n            type: object\n            properties: {}\n          profileImage: {}\n      encoding:\n        historyMetadata:\n          # require XML Content-Type in utf-8 encoding\n          contentType: application/xml; charset=utf-8\n        profileImage:\n          # only accept png/jpeg\n          contentType: image/png, image/jpeg\n          headers:\n            X-Rate-Limit-Limit:\n              description: The number of allowed requests in the current period\n              schema:\n                type: integer\n",
                                                        "html": "<pre><code class=\"language-yaml\">requestBody:\n  content:\n    multipart/form-data:\n      schema:\n        type: object\n        properties:\n          id:\n            # default is text/plain\n            type: string\n            format: uuid\n          address:\n            # default is application/json\n            type: object\n            properties: {}\n          historyMetadata:\n            # need to declare XML format!\n            description: metadata in XML format\n            type: object\n            properties: {}\n          profileImage: {}\n      encoding:\n        historyMetadata:\n          # require XML Content-Type in utf-8 encoding\n          contentType: application/xml; charset=utf-8\n        profileImage:\n          # only accept png/jpeg\n          contentType: image/png, image/jpeg\n          headers:\n            X-Rate-Limit-Limit:\n              description: The number of allowed requests in the current period\n              schema:\n                type: integer\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "requestBody:\n  content:\n    multipart/form-data:\n      schema:\n        type: object\n        properties:\n          id:\n            # default is text/plain\n            type: string\n            format: uuid\n          address:\n            # default is application/json\n            type: object\n            properties: {}\n          historyMetadata:\n            # need to declare XML format!\n            description: metadata in XML format\n            type: object\n            properties: {}\n          profileImage: {}\n      encoding:\n        historyMetadata:\n          # require XML Content-Type in utf-8 encoding\n          contentType: application/xml; charset=utf-8\n        profileImage:\n          # only accept png/jpeg\n          contentType: image/png, image/jpeg\n          headers:\n            X-Rate-Limit-Limit:\n              description: The number of allowed requests in the current period\n              schema:\n                type: integer\n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "encoding-object-example",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "encoding-object",
                                            "anchor": "encodingObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "Responses Object",
                                        "html": "<h4 id=\"responses-object\"><a name=\"responsesObject\"></a>Responses Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "A container for the expected responses of an operation.\nThe container maps a HTTP response code to the expected response.",
                                                "html": "<p>A container for the expected responses of an operation.\nThe container maps a HTTP response code to the expected response.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "The documentation is not necessarily expected to cover all possible HTTP response codes because they may not be known in advance.\nHowever, documentation is expected to cover a successful operation response and any known errors.",
                                                "html": "<p>The documentation is not necessarily expected to cover all possible HTTP response codes because they may not be known in advance.\nHowever, documentation is expected to cover a successful operation response and any known errors.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "The default MAY be used as a default response object for all HTTP codes \nthat are not covered individually by the Responses Object.",
                                                "html": "<p>The <code>default</code> MAY be used as a default response object for all HTTP codes \nthat are not covered individually by the <code>Responses Object</code>.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "The Responses Object MUST contain at least one response code, and if only one\nresponse code is provided it SHOULD be the response for a successful operation\ncall.",
                                                "html": "<p>The <code>Responses Object</code> MUST contain at least one response code, and if only one\nresponse code is provided it SHOULD be the response for a successful operation\ncall.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_14\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\ndefault\nResponse Object | Reference Object\nThe documentation of responses other than the ones declared for specific HTTP response codes. Use this field to cover undeclared responses.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"responsesDefault\"></a>default</td>\n<td style=\"text-align: center;\"><a href=\"#responseObject\">Response Object</a> | <a href=\"#referenceObject\">Reference Object</a></td>\n<td>The documentation of responses other than the ones declared for specific HTTP response codes. Use this field to cover undeclared responses.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "responsesDefault",
                                                                    "values": [
                                                                        {
                                                                            "text": "default",
                                                                            "html": "<a name=\"responsesDefault\"></a>default"
                                                                        },
                                                                        {
                                                                            "text": "Response Object | Reference Object",
                                                                            "html": "<a href=\"#responseObject\">Response Object</a> | <a href=\"#referenceObject\">Reference Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "The documentation of responses other than the ones declared for specific HTTP response codes. Use this field to cover undeclared responses.",
                                                                            "html": "The documentation of responses other than the ones declared for specific HTTP response codes. Use this field to cover undeclared responses."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_14",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Patterned Fields",
                                                "html": "<h5 id=\"patterned-fields_1\">Patterned Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Pattern\nType\nDescription\n\n\n\n\nHTTP Status Code\nResponse Object | Reference Object\nAny HTTP status code can be used as the property name, but only one property per code, to describe the expected response for that HTTP status code. This field MUST be enclosed in quotation marks (for example, \"200\") for compatibility between JSON and YAML. To define a range of response codes, this field MAY contain the uppercase wildcard character X. For example, 2XX represents all response codes between [200-299]. Only the following range definitions are allowed: 1XX, 2XX, 3XX, 4XX, and 5XX. If a response is defined using an explicit code, the explicit code definition takes precedence over the range definition for that code.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Pattern</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"responsesCode\"></a><a href=\"#httpCodes\">HTTP Status Code</a></td>\n<td style=\"text-align: center;\"><a href=\"#responseObject\">Response Object</a> | <a href=\"#referenceObject\">Reference Object</a></td>\n<td>Any <a href=\"#httpCodes\">HTTP status code</a> can be used as the property name, but only one property per code, to describe the expected response for that HTTP status code. This field MUST be enclosed in quotation marks (for example, \"200\") for compatibility between JSON and YAML. To define a range of response codes, this field MAY contain the uppercase wildcard character <code>X</code>. For example, <code>2XX</code> represents all response codes between <code>[200-299]</code>. Only the following range definitions are allowed: <code>1XX</code>, <code>2XX</code>, <code>3XX</code>, <code>4XX</code>, and <code>5XX</code>. If a response is defined using an explicit code, the explicit code definition takes precedence over the range definition for that code.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Pattern",
                                                                    "html": "Field Pattern"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "responsesCode",
                                                                    "values": [
                                                                        {
                                                                            "text": "HTTP Status Code",
                                                                            "html": "<a name=\"responsesCode\"></a><a href=\"#httpCodes\">HTTP Status Code</a>"
                                                                        },
                                                                        {
                                                                            "text": "Response Object | Reference Object",
                                                                            "html": "<a href=\"#responseObject\">Response Object</a> | <a href=\"#referenceObject\">Reference Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "Any HTTP status code can be used as the property name, but only one property per code, to describe the expected response for that HTTP status code. This field MUST be enclosed in quotation marks (for example, \"200\") for compatibility between JSON and YAML. To define a range of response codes, this field MAY contain the uppercase wildcard character X. For example, 2XX represents all response codes between [200-299]. Only the following range definitions are allowed: 1XX, 2XX, 3XX, 4XX, and 5XX. If a response is defined using an explicit code, the explicit code definition takes precedence over the range definition for that code.",
                                                                            "html": "Any <a href=\"#httpCodes\">HTTP status code</a> can be used as the property name, but only one property per code, to describe the expected response for that HTTP status code. This field MUST be enclosed in quotation marks (for example, \"200\") for compatibility between JSON and YAML. To define a range of response codes, this field MAY contain the uppercase wildcard character <code>X</code>. For example, <code>2XX</code> represents all response codes between <code>[200-299]</code>. Only the following range definitions are allowed: <code>1XX</code>, <code>2XX</code>, <code>3XX</code>, <code>4XX</code>, and <code>5XX</code>. If a response is defined using an explicit code, the explicit code definition takes precedence over the range definition for that code."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "patterned-fields_1",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Responses Object Example",
                                                "html": "<h5 id=\"responses-object-example\">Responses Object Example</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "A 200 response for a successful operation and a default response for others (implying an error):",
                                                        "html": "<p>A 200 response for a successful operation and a default response for others (implying an error):</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"200\": {\n    \"description\": \"a pet to be returned\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Pet\"\n        }\n      }\n    }\n  },\n  \"default\": {\n    \"description\": \"Unexpected error\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/ErrorModel\"\n        }\n      }\n    }\n  }\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"200\": {\n    \"description\": \"a pet to be returned\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Pet\"\n        }\n      }\n    }\n  },\n  \"default\": {\n    \"description\": \"Unexpected error\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/ErrorModel\"\n        }\n      }\n    }\n  }\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"200\": {\n    \"description\": \"a pet to be returned\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Pet\"\n        }\n      }\n    }\n  },\n  \"default\": {\n    \"description\": \"Unexpected error\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/ErrorModel\"\n        }\n      }\n    }\n  }\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "'200':\n  description: a pet to be returned\n  content: \n    application/json:\n      schema:\n        $ref: '#/components/schemas/Pet'\ndefault:\n  description: Unexpected error\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/ErrorModel'\n",
                                                        "html": "<pre><code class=\"language-yaml\">'200':\n  description: a pet to be returned\n  content: \n    application/json:\n      schema:\n        $ref: '#/components/schemas/Pet'\ndefault:\n  description: Unexpected error\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/ErrorModel'\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "'200':\n  description: a pet to be returned\n  content: \n    application/json:\n      schema:\n        $ref: '#/components/schemas/Pet'\ndefault:\n  description: Unexpected error\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/ErrorModel'\n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "responses-object-example",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "responses-object",
                                            "anchor": "responsesObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "Response Object",
                                        "html": "<h4 id=\"response-object\"><a name=\"responseObject\"></a>Response Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "Describes a single response from an API Operation, including design-time, static \nlinks to operations based on the response.",
                                                "html": "<p>Describes a single response from an API Operation, including design-time, static \n<code>links</code> to operations based on the response.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_15\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\ndescription\nstring\nREQUIRED. A description of the response. CommonMark syntax MAY be used for rich text representation.\n\n\nheaders\nMap[string, Header Object  | Reference Object]\nMaps a header name to its definition. RFC7230 states header names are case insensitive. If a response header is defined with the name \"Content-Type\", it SHALL be ignored.\n\n\ncontent\nMap[string, Media Type Object]\nA map containing descriptions of potential response payloads. The key is a media type or media type range and the value describes it.  For responses that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*\n\n\nlinks\nMap[string, Link Object | Reference Object]\nA map of operations links that can be followed from the response. The key of the map is a short name for the link, following the naming constraints of the names for Component Objects.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"responseDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. A description of the response. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n<tr>\n<td><a name=\"responseHeaders\"></a>headers</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, <a href=\"#headerObject\">Header Object</a>  | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>Maps a header name to its definition. <a href=\"https://tools.ietf.org/html/rfc7230#page-22\">RFC7230</a> states header names are case insensitive. If a response header is defined with the name <code>\"Content-Type\"</code>, it SHALL be ignored.</td>\n</tr>\n<tr>\n<td><a name=\"responseContent\"></a>content</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, <a href=\"#mediaTypeObject\">Media Type Object</a>]</td>\n<td>A map containing descriptions of potential response payloads. The key is a media type or <a href=\"https://tools.ietf.org/html/rfc7231#appendix-D\">media type range</a> and the value describes it.  For responses that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*</td>\n</tr>\n<tr>\n<td><a name=\"responseLinks\"></a>links</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, <a href=\"#linkObject\">Link Object</a> | <a href=\"#referenceObject\">Reference Object</a>]</td>\n<td>A map of operations links that can be followed from the response. The key of the map is a short name for the link, following the naming constraints of the names for <a href=\"#componentsObject\">Component Objects</a>.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "responseDescription",
                                                                    "values": [
                                                                        {
                                                                            "text": "description",
                                                                            "html": "<a name=\"responseDescription\"></a>description"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "REQUIRED. A description of the response. CommonMark syntax MAY be used for rich text representation.",
                                                                            "html": "<strong>REQUIRED</strong>. A description of the response. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "responseHeaders",
                                                                    "values": [
                                                                        {
                                                                            "text": "headers",
                                                                            "html": "<a name=\"responseHeaders\"></a>headers"
                                                                        },
                                                                        {
                                                                            "text": "Map[string, Header Object  | Reference Object]",
                                                                            "html": "Map[<code>string</code>, <a href=\"#headerObject\">Header Object</a>  | <a href=\"#referenceObject\">Reference Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "Maps a header name to its definition. RFC7230 states header names are case insensitive. If a response header is defined with the name \"Content-Type\", it SHALL be ignored.",
                                                                            "html": "Maps a header name to its definition. <a href=\"https://tools.ietf.org/html/rfc7230#page-22\">RFC7230</a> states header names are case insensitive. If a response header is defined with the name <code>\"Content-Type\"</code>, it SHALL be ignored."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "responseContent",
                                                                    "values": [
                                                                        {
                                                                            "text": "content",
                                                                            "html": "<a name=\"responseContent\"></a>content"
                                                                        },
                                                                        {
                                                                            "text": "Map[string, Media Type Object]",
                                                                            "html": "Map[<code>string</code>, <a href=\"#mediaTypeObject\">Media Type Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "A map containing descriptions of potential response payloads. The key is a media type or media type range and the value describes it.  For responses that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*",
                                                                            "html": "A map containing descriptions of potential response payloads. The key is a media type or <a href=\"https://tools.ietf.org/html/rfc7231#appendix-D\">media type range</a> and the value describes it.  For responses that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "responseLinks",
                                                                    "values": [
                                                                        {
                                                                            "text": "links",
                                                                            "html": "<a name=\"responseLinks\"></a>links"
                                                                        },
                                                                        {
                                                                            "text": "Map[string, Link Object | Reference Object]",
                                                                            "html": "Map[<code>string</code>, <a href=\"#linkObject\">Link Object</a> | <a href=\"#referenceObject\">Reference Object</a>]"
                                                                        },
                                                                        {
                                                                            "text": "A map of operations links that can be followed from the response. The key of the map is a short name for the link, following the naming constraints of the names for Component Objects.",
                                                                            "html": "A map of operations links that can be followed from the response. The key of the map is a short name for the link, following the naming constraints of the names for <a href=\"#componentsObject\">Component Objects</a>."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_15",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Response Object Examples",
                                                "html": "<h5 id=\"response-object-examples\">Response Object Examples</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "Response of an array of a complex type:",
                                                        "html": "<p>Response of an array of a complex type:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"description\": \"A complex object array response\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/VeryComplexType\"\n        }\n      }\n    }\n  }\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"description\": \"A complex object array response\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/VeryComplexType\"\n        }\n      }\n    }\n  }\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"description\": \"A complex object array response\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/VeryComplexType\"\n        }\n      }\n    }\n  }\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "description: A complex object array response\ncontent: \n  application/json:\n    schema: \n      type: array\n      items:\n        $ref: '#/components/schemas/VeryComplexType'\n",
                                                        "html": "<pre><code class=\"language-yaml\">description: A complex object array response\ncontent: \n  application/json:\n    schema: \n      type: array\n      items:\n        $ref: '#/components/schemas/VeryComplexType'\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "description: A complex object array response\ncontent: \n  application/json:\n    schema: \n      type: array\n      items:\n        $ref: '#/components/schemas/VeryComplexType'\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "Response with a string type:",
                                                        "html": "<p>Response with a string type:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "description: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n",
                                                        "html": "<pre><code class=\"language-yaml\">description: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "description: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "Plain text response with headers:",
                                                        "html": "<p>Plain text response with headers:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\",\n        \"example\": \"whoa!\"\n      }\n    }\n  },\n  \"headers\": {\n    \"X-Rate-Limit-Limit\": {\n      \"description\": \"The number of allowed requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Remaining\": {\n      \"description\": \"The number of remaining requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Reset\": {\n      \"description\": \"The number of seconds left in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    }\n  }\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\",\n        \"example\": \"whoa!\"\n      }\n    }\n  },\n  \"headers\": {\n    \"X-Rate-Limit-Limit\": {\n      \"description\": \"The number of allowed requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Remaining\": {\n      \"description\": \"The number of remaining requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Reset\": {\n      \"description\": \"The number of seconds left in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    }\n  }\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\",\n        \"example\": \"whoa!\"\n      }\n    }\n  },\n  \"headers\": {\n    \"X-Rate-Limit-Limit\": {\n      \"description\": \"The number of allowed requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Remaining\": {\n      \"description\": \"The number of remaining requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Reset\": {\n      \"description\": \"The number of seconds left in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    }\n  }\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "description: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n    example: 'whoa!'\nheaders:\n  X-Rate-Limit-Limit:\n    description: The number of allowed requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Remaining:\n    description: The number of remaining requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Reset:\n    description: The number of seconds left in the current period\n    schema:\n      type: integer\n",
                                                        "html": "<pre><code class=\"language-yaml\">description: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n    example: 'whoa!'\nheaders:\n  X-Rate-Limit-Limit:\n    description: The number of allowed requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Remaining:\n    description: The number of remaining requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Reset:\n    description: The number of seconds left in the current period\n    schema:\n      type: integer\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "description: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n    example: 'whoa!'\nheaders:\n  X-Rate-Limit-Limit:\n    description: The number of allowed requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Remaining:\n    description: The number of remaining requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Reset:\n    description: The number of seconds left in the current period\n    schema:\n      type: integer\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "Response with no return value:",
                                                        "html": "<p>Response with no return value:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"description\": \"object created\"\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"description\": \"object created\"\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"description\": \"object created\"\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "description: object created\n",
                                                        "html": "<pre><code class=\"language-yaml\">description: object created\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "description: object created\n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "response-object-examples",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "response-object",
                                            "anchor": "responseObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "Callback Object",
                                        "html": "<h4 id=\"callback-object\"><a name=\"callbackObject\"></a>Callback Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "A map of possible out-of band callbacks related to the parent operation.\nEach value in the map is a Path Item Object that describes a set of requests that may be initiated by the API provider and the expected responses.\nThe key value used to identify the path item object is an expression, evaluated at runtime, that identifies a URL to use for the callback operation.",
                                                "html": "<p>A map of possible out-of band callbacks related to the parent operation.\nEach value in the map is a <a href=\"#pathItemObject\">Path Item Object</a> that describes a set of requests that may be initiated by the API provider and the expected responses.\nThe key value used to identify the path item object is an expression, evaluated at runtime, that identifies a URL to use for the callback operation.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "To describe incoming requests from the API provider independent from another API call, use the webhooks field.",
                                                "html": "<p>To describe incoming requests from the API provider independent from another API call, use the <a href=\"#oasWebhooks\"><code>webhooks</code></a> field.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Patterned Fields",
                                                "html": "<h5 id=\"patterned-fields_2\">Patterned Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Pattern\nType\nDescription\n\n\n\n\n{expression}\nPath Item Object | Reference Object\nA Path Item Object, or a reference to one, used to define a callback request and expected responses.  A complete example is available.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Pattern</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"callbackExpression\"></a>{expression}</td>\n<td style=\"text-align: center;\"><a href=\"#pathItemObject\">Path Item Object</a> | <a href=\"#referenceObject\">Reference Object</a></td>\n<td>A Path Item Object, or a reference to one, used to define a callback request and expected responses.  A <a href=\"../examples/v3.0/callback-example.yaml\">complete example</a> is available.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Pattern",
                                                                    "html": "Field Pattern"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "callbackExpression",
                                                                    "values": [
                                                                        {
                                                                            "text": "{expression}",
                                                                            "html": "<a name=\"callbackExpression\"></a>{expression}"
                                                                        },
                                                                        {
                                                                            "text": "Path Item Object | Reference Object",
                                                                            "html": "<a href=\"#pathItemObject\">Path Item Object</a> | <a href=\"#referenceObject\">Reference Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "A Path Item Object, or a reference to one, used to define a callback request and expected responses.  A complete example is available.",
                                                                            "html": "A Path Item Object, or a reference to one, used to define a callback request and expected responses.  A <a href=\"../examples/v3.0/callback-example.yaml\">complete example</a> is available."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "patterned-fields_2",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Key Expression",
                                                "html": "<h5 id=\"key-expression\">Key Expression</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "The key that identifies the Path Item Object is a runtime expression that can be evaluated in the context of a runtime HTTP request/response to identify the URL to be used for the callback request.\nA simple example might be $request.body#/url.\nHowever, using a runtime expression the complete HTTP message can be accessed.\nThis includes accessing any part of a body that a JSON Pointer RFC6901 can reference. ",
                                                        "html": "<p>The key that identifies the <a href=\"#pathItemObject\">Path Item Object</a> is a <a href=\"#runtimeExpression\">runtime expression</a> that can be evaluated in the context of a runtime HTTP request/response to identify the URL to be used for the callback request.\nA simple example might be <code>$request.body#/url</code>.\nHowever, using a <a href=\"#runtimeExpression\">runtime expression</a> the complete HTTP message can be accessed.\nThis includes accessing any part of a body that a JSON Pointer <a href=\"https://tools.ietf.org/html/rfc6901\">RFC6901</a> can reference. </p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "For example, given the following HTTP request:",
                                                        "html": "<p>For example, given the following HTTP request:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "POST /subscribe/myevent?queryUrl=https://clientdomain.com/stillrunning HTTP/1.1\nHost: example.org\nContent-Type: application/json\nContent-Length: 187\n\n{\n  \"failedUrl\" : \"https://clientdomain.com/failed\",\n  \"successUrls\" : [\n    \"https://clientdomain.com/fast\",\n    \"https://clientdomain.com/medium\",\n    \"https://clientdomain.com/slow\"\n  ] \n}\n\n201 Created\nLocation: https://example.org/subscription/1\n",
                                                        "html": "<pre><code class=\"language-http\">POST /subscribe/myevent?queryUrl=https://clientdomain.com/stillrunning HTTP/1.1\nHost: example.org\nContent-Type: application/json\nContent-Length: 187\n\n{\n  \"failedUrl\" : \"https://clientdomain.com/failed\",\n  \"successUrls\" : [\n    \"https://clientdomain.com/fast\",\n    \"https://clientdomain.com/medium\",\n    \"https://clientdomain.com/slow\"\n  ] \n}\n\n201 Created\nLocation: https://example.org/subscription/1\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "http",
                                                            "text": "POST /subscribe/myevent?queryUrl=https://clientdomain.com/stillrunning HTTP/1.1\nHost: example.org\nContent-Type: application/json\nContent-Length: 187\n\n{\n  \"failedUrl\" : \"https://clientdomain.com/failed\",\n  \"successUrls\" : [\n    \"https://clientdomain.com/fast\",\n    \"https://clientdomain.com/medium\",\n    \"https://clientdomain.com/slow\"\n  ] \n}\n\n201 Created\nLocation: https://example.org/subscription/1\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "The following examples show how the various expressions evaluate, assuming the callback operation has a path parameter named eventType and a query parameter named queryUrl.",
                                                        "html": "<p>The following examples show how the various expressions evaluate, assuming the callback operation has a path parameter named <code>eventType</code> and a query parameter named <code>queryUrl</code>.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nExpression\nValue\n\n\n\n\n$url\nhttps://example.org/subscribe/myevent?queryUrl=https://clientdomain.com/stillrunning\n\n\n$method\nPOST\n\n\n$request.path.eventType\nmyevent\n\n\n$request.query.queryUrl\nhttps://clientdomain.com/stillrunning\n\n\n$request.header.content-Type\napplication/json\n\n\n$request.body#/failedUrl\nhttps://clientdomain.com/failed\n\n\n$request.body#/successUrls/2\nhttps://clientdomain.com/medium\n\n\n$response.header.Location\nhttps://example.org/subscription/1\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th style=\"text-align: left;\">Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$url</td>\n<td style=\"text-align: left;\">https://example.org/subscribe/myevent?queryUrl=https://clientdomain.com/stillrunning</td>\n</tr>\n<tr>\n<td>$method</td>\n<td style=\"text-align: left;\">POST</td>\n</tr>\n<tr>\n<td>$request.path.eventType</td>\n<td style=\"text-align: left;\">myevent</td>\n</tr>\n<tr>\n<td>$request.query.queryUrl</td>\n<td style=\"text-align: left;\">https://clientdomain.com/stillrunning</td>\n</tr>\n<tr>\n<td>$request.header.content-Type</td>\n<td style=\"text-align: left;\">application/json</td>\n</tr>\n<tr>\n<td>$request.body#/failedUrl</td>\n<td style=\"text-align: left;\">https://clientdomain.com/failed</td>\n</tr>\n<tr>\n<td>$request.body#/successUrls/2</td>\n<td style=\"text-align: left;\">https://clientdomain.com/medium</td>\n</tr>\n<tr>\n<td>$response.header.Location</td>\n<td style=\"text-align: left;\">https://example.org/subscription/1</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Expression",
                                                                    "html": "Expression"
                                                                },
                                                                {
                                                                    "text": "Value",
                                                                    "html": "Value"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "$url",
                                                                            "html": "$url"
                                                                        },
                                                                        {
                                                                            "text": "https://example.org/subscribe/myevent?queryUrl=https://clientdomain.com/stillrunning",
                                                                            "html": "https://example.org/subscribe/myevent?queryUrl=https://clientdomain.com/stillrunning"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "$method",
                                                                            "html": "$method"
                                                                        },
                                                                        {
                                                                            "text": "POST",
                                                                            "html": "POST"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "$request.path.eventType",
                                                                            "html": "$request.path.eventType"
                                                                        },
                                                                        {
                                                                            "text": "myevent",
                                                                            "html": "myevent"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "$request.query.queryUrl",
                                                                            "html": "$request.query.queryUrl"
                                                                        },
                                                                        {
                                                                            "text": "https://clientdomain.com/stillrunning",
                                                                            "html": "https://clientdomain.com/stillrunning"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "$request.header.content-Type",
                                                                            "html": "$request.header.content-Type"
                                                                        },
                                                                        {
                                                                            "text": "application/json",
                                                                            "html": "application/json"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "$request.body#/failedUrl",
                                                                            "html": "$request.body#/failedUrl"
                                                                        },
                                                                        {
                                                                            "text": "https://clientdomain.com/failed",
                                                                            "html": "https://clientdomain.com/failed"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "$request.body#/successUrls/2",
                                                                            "html": "$request.body#/successUrls/2"
                                                                        },
                                                                        {
                                                                            "text": "https://clientdomain.com/medium",
                                                                            "html": "https://clientdomain.com/medium"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": null,
                                                                    "values": [
                                                                        {
                                                                            "text": "$response.header.Location",
                                                                            "html": "$response.header.Location"
                                                                        },
                                                                        {
                                                                            "text": "https://example.org/subscription/1",
                                                                            "html": "https://example.org/subscription/1"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "key-expression",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Callback Object Examples",
                                                "html": "<h5 id=\"callback-object-examples\">Callback Object Examples</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "The following example uses the user provided queryUrl query string parameter to define the callback URL.  This is an example of how to use a callback object to describe a WebHook callback that goes with the subscription operation to enable registering for the WebHook.",
                                                        "html": "<p>The following example uses the user provided <code>queryUrl</code> query string parameter to define the callback URL.  This is an example of how to use a callback object to describe a WebHook callback that goes with the subscription operation to enable registering for the WebHook.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "myCallback:\n  '{$request.query.queryUrl}':\n    post:\n      requestBody:\n        description: Callback payload\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/SomePayload'\n      responses:\n        '200':\n          description: callback successfully processed\n",
                                                        "html": "<pre><code class=\"language-yaml\">myCallback:\n  '{$request.query.queryUrl}':\n    post:\n      requestBody:\n        description: Callback payload\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/SomePayload'\n      responses:\n        '200':\n          description: callback successfully processed\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "myCallback:\n  '{$request.query.queryUrl}':\n    post:\n      requestBody:\n        description: Callback payload\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/SomePayload'\n      responses:\n        '200':\n          description: callback successfully processed\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "The following example shows a callback where the server is hard-coded, but the query string parameters are populated from the id and email property in the request body.",
                                                        "html": "<p>The following example shows a callback where the server is hard-coded, but the query string parameters are populated from the <code>id</code> and <code>email</code> property in the request body.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "transactionCallback:\n  'http://notificationServer.com?transactionId={$request.body#/id}&email={$request.body#/email}':\n    post:\n      requestBody:\n        description: Callback payload\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/SomePayload'\n      responses:\n        '200':\n          description: callback successfully processed\n",
                                                        "html": "<pre><code class=\"language-yaml\">transactionCallback:\n  'http://notificationServer.com?transactionId={$request.body#/id}&amp;email={$request.body#/email}':\n    post:\n      requestBody:\n        description: Callback payload\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/SomePayload'\n      responses:\n        '200':\n          description: callback successfully processed\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "transactionCallback:\n  'http://notificationServer.com?transactionId={$request.body#/id}&email={$request.body#/email}':\n    post:\n      requestBody:\n        description: Callback payload\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/SomePayload'\n      responses:\n        '200':\n          description: callback successfully processed\n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "callback-object-examples",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "callback-object",
                                            "anchor": "callbackObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "Example Object",
                                        "html": "<h4 id=\"example-object\"><a name=\"exampleObject\"></a>Example Object</h4>",
                                        "children": [
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_16\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\nsummary\nstring\nShort description for the example.\n\n\ndescription\nstring\nLong description for the example. CommonMark syntax MAY be used for rich text representation.\n\n\nvalue\nAny\nEmbedded literal example. The value field and externalValue field are mutually exclusive. To represent examples of media types that cannot naturally represented in JSON or YAML, use a string value to contain the example, escaping where necessary.\n\n\nexternalValue\nstring\nA URI that points to the literal example. This provides the capability to reference examples that cannot easily be included in JSON or YAML documents.  The value field and externalValue field are mutually exclusive. See the rules for resolving Relative References.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"exampleSummary\"></a>summary</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>Short description for the example.</td>\n</tr>\n<tr>\n<td><a name=\"exampleDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>Long description for the example. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n<tr>\n<td><a name=\"exampleValue\"></a>value</td>\n<td style=\"text-align: center;\">Any</td>\n<td>Embedded literal example. The <code>value</code> field and <code>externalValue</code> field are mutually exclusive. To represent examples of media types that cannot naturally represented in JSON or YAML, use a string value to contain the example, escaping where necessary.</td>\n</tr>\n<tr>\n<td><a name=\"exampleExternalValue\"></a>externalValue</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A URI that points to the literal example. This provides the capability to reference examples that cannot easily be included in JSON or YAML documents.  The <code>value</code> field and <code>externalValue</code> field are mutually exclusive. See the rules for resolving <a href=\"#relativeReferencesURI\">Relative References</a>.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "exampleSummary",
                                                                    "values": [
                                                                        {
                                                                            "text": "summary",
                                                                            "html": "<a name=\"exampleSummary\"></a>summary"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "Short description for the example.",
                                                                            "html": "Short description for the example."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "exampleDescription",
                                                                    "values": [
                                                                        {
                                                                            "text": "description",
                                                                            "html": "<a name=\"exampleDescription\"></a>description"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "Long description for the example. CommonMark syntax MAY be used for rich text representation.",
                                                                            "html": "Long description for the example. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "exampleValue",
                                                                    "values": [
                                                                        {
                                                                            "text": "value",
                                                                            "html": "<a name=\"exampleValue\"></a>value"
                                                                        },
                                                                        {
                                                                            "text": "Any",
                                                                            "html": "Any"
                                                                        },
                                                                        {
                                                                            "text": "Embedded literal example. The value field and externalValue field are mutually exclusive. To represent examples of media types that cannot naturally represented in JSON or YAML, use a string value to contain the example, escaping where necessary.",
                                                                            "html": "Embedded literal example. The <code>value</code> field and <code>externalValue</code> field are mutually exclusive. To represent examples of media types that cannot naturally represented in JSON or YAML, use a string value to contain the example, escaping where necessary."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "exampleExternalValue",
                                                                    "values": [
                                                                        {
                                                                            "text": "externalValue",
                                                                            "html": "<a name=\"exampleExternalValue\"></a>externalValue"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "A URI that points to the literal example. This provides the capability to reference examples that cannot easily be included in JSON or YAML documents.  The value field and externalValue field are mutually exclusive. See the rules for resolving Relative References.",
                                                                            "html": "A URI that points to the literal example. This provides the capability to reference examples that cannot easily be included in JSON or YAML documents.  The <code>value</code> field and <code>externalValue</code> field are mutually exclusive. See the rules for resolving <a href=\"#relativeReferencesURI\">Relative References</a>."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "In all cases, the example value is expected to be compatible with the type schema \nof its associated value.  Tooling implementations MAY choose to \nvalidate compatibility automatically, and reject the example value(s) if incompatible.",
                                                        "html": "<p>In all cases, the example value is expected to be compatible with the type schema \nof its associated value.  Tooling implementations MAY choose to \nvalidate compatibility automatically, and reject the example value(s) if incompatible.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_16",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Example Object Examples",
                                                "html": "<h5 id=\"example-object-examples\">Example Object Examples</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "In a request body:",
                                                        "html": "<p>In a request body:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "requestBody:\n  content:\n    'application/json':\n      schema:\n        $ref: '#/components/schemas/Address'\n      examples: \n        foo:\n          summary: A foo example\n          value: {\"foo\": \"bar\"}\n        bar:\n          summary: A bar example\n          value: {\"bar\": \"baz\"}\n    'application/xml':\n      examples: \n        xmlExample:\n          summary: This is an example in XML\n          externalValue: 'https://example.org/examples/address-example.xml'\n    'text/plain':\n      examples:\n        textExample: \n          summary: This is a text example\n          externalValue: 'https://foo.bar/examples/address-example.txt'\n",
                                                        "html": "<pre><code class=\"language-yaml\">requestBody:\n  content:\n    'application/json':\n      schema:\n        $ref: '#/components/schemas/Address'\n      examples: \n        foo:\n          summary: A foo example\n          value: {\"foo\": \"bar\"}\n        bar:\n          summary: A bar example\n          value: {\"bar\": \"baz\"}\n    'application/xml':\n      examples: \n        xmlExample:\n          summary: This is an example in XML\n          externalValue: 'https://example.org/examples/address-example.xml'\n    'text/plain':\n      examples:\n        textExample: \n          summary: This is a text example\n          externalValue: 'https://foo.bar/examples/address-example.txt'\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "requestBody:\n  content:\n    'application/json':\n      schema:\n        $ref: '#/components/schemas/Address'\n      examples: \n        foo:\n          summary: A foo example\n          value: {\"foo\": \"bar\"}\n        bar:\n          summary: A bar example\n          value: {\"bar\": \"baz\"}\n    'application/xml':\n      examples: \n        xmlExample:\n          summary: This is an example in XML\n          externalValue: 'https://example.org/examples/address-example.xml'\n    'text/plain':\n      examples:\n        textExample: \n          summary: This is a text example\n          externalValue: 'https://foo.bar/examples/address-example.txt'\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "In a parameter:",
                                                        "html": "<p>In a parameter:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "parameters:\n  - name: 'zipCode'\n    in: 'query'\n    schema:\n      type: 'string'\n      format: 'zip-code'\n    examples:\n      zip-example: \n        $ref: '#/components/examples/zip-example'\n",
                                                        "html": "<pre><code class=\"language-yaml\">parameters:\n  - name: 'zipCode'\n    in: 'query'\n    schema:\n      type: 'string'\n      format: 'zip-code'\n    examples:\n      zip-example: \n        $ref: '#/components/examples/zip-example'\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "parameters:\n  - name: 'zipCode'\n    in: 'query'\n    schema:\n      type: 'string'\n      format: 'zip-code'\n    examples:\n      zip-example: \n        $ref: '#/components/examples/zip-example'\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "In a response:",
                                                        "html": "<p>In a response:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "responses:\n  '200':\n    description: your car appointment has been booked\n    content: \n      application/json:\n        schema:\n          $ref: '#/components/schemas/SuccessResponse'\n        examples:\n          confirmation-success:\n            $ref: '#/components/examples/confirmation-success'\n",
                                                        "html": "<pre><code class=\"language-yaml\">responses:\n  '200':\n    description: your car appointment has been booked\n    content: \n      application/json:\n        schema:\n          $ref: '#/components/schemas/SuccessResponse'\n        examples:\n          confirmation-success:\n            $ref: '#/components/examples/confirmation-success'\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "responses:\n  '200':\n    description: your car appointment has been booked\n    content: \n      application/json:\n        schema:\n          $ref: '#/components/schemas/SuccessResponse'\n        examples:\n          confirmation-success:\n            $ref: '#/components/examples/confirmation-success'\n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "example-object-examples",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "example-object",
                                            "anchor": "exampleObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "Link Object",
                                        "html": "<h4 id=\"link-object\"><a name=\"linkObject\"></a>Link Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "The Link object represents a possible design-time link for a response.\nThe presence of a link does not guarantee the caller's ability to successfully invoke it, rather it provides a known relationship and traversal mechanism between responses and other operations.",
                                                "html": "<p>The <code>Link object</code> represents a possible design-time link for a response.\nThe presence of a link does not guarantee the caller's ability to successfully invoke it, rather it provides a known relationship and traversal mechanism between responses and other operations.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "Unlike dynamic links (i.e. links provided in the response payload), the OAS linking mechanism does not require link information in the runtime response.",
                                                "html": "<p>Unlike <em>dynamic</em> links (i.e. links provided <strong>in</strong> the response payload), the OAS linking mechanism does not require link information in the runtime response.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "For computing links, and providing instructions to execute them, a runtime expression is used for accessing values in an operation and using them as parameters while invoking the linked operation.  ",
                                                "html": "<p>For computing links, and providing instructions to execute them, a <a href=\"#runtimeExpression\">runtime expression</a> is used for accessing values in an operation and using them as parameters while invoking the linked operation.  </p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_17\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\noperationRef\nstring\nA relative or absolute URI reference to an OAS operation. This field is mutually exclusive of the operationId field, and MUST point to an Operation Object. Relative operationRef values MAY be used to locate an existing Operation Object in the OpenAPI definition. See the rules for resolving Relative References.\n\n\noperationId\nstring\nThe name of an existing, resolvable OAS operation, as defined with a unique operationId.  This field is mutually exclusive of the operationRef field.\n\n\nparameters\nMap[string, Any | {expression}]\nA map representing parameters to pass to an operation as specified with operationId or identified via operationRef. The key is the parameter name to be used, whereas the value can be a constant or an expression to be evaluated and passed to the linked operation.  The parameter name can be qualified using the parameter location [{in}.]{name} for operations that use the same parameter name in different locations (e.g. path.id).\n\n\nrequestBody\nAny | {expression}\nA literal value or {expression} to use as a request body when calling the target operation.\n\n\ndescription\nstring\nA description of the link. CommonMark syntax MAY be used for rich text representation.\n\n\nserver\nServer Object\nA server object to be used by the target operation.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"linkOperationRef\"></a>operationRef</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A relative or absolute URI reference to an OAS operation. This field is mutually exclusive of the <code>operationId</code> field, and MUST point to an <a href=\"#operationObject\">Operation Object</a>. Relative <code>operationRef</code> values MAY be used to locate an existing <a href=\"#operationObject\">Operation Object</a> in the OpenAPI definition. See the rules for resolving <a href=\"#relativeReferencesURI\">Relative References</a>.</td>\n</tr>\n<tr>\n<td><a name=\"linkOperationId\"></a>operationId</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>The name of an <em>existing</em>, resolvable OAS operation, as defined with a unique <code>operationId</code>.  This field is mutually exclusive of the <code>operationRef</code> field.</td>\n</tr>\n<tr>\n<td><a name=\"linkParameters\"></a>parameters</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, Any | <a href=\"#runtimeExpression\">{expression}</a>]</td>\n<td>A map representing parameters to pass to an operation as specified with <code>operationId</code> or identified via <code>operationRef</code>. The key is the parameter name to be used, whereas the value can be a constant or an expression to be evaluated and passed to the linked operation.  The parameter name can be qualified using the <a href=\"#parameterIn\">parameter location</a> <code>[{in}.]{name}</code> for operations that use the same parameter name in different locations (e.g. path.id).</td>\n</tr>\n<tr>\n<td><a name=\"linkRequestBody\"></a>requestBody</td>\n<td style=\"text-align: center;\">Any | <a href=\"#runtimeExpression\">{expression}</a></td>\n<td>A literal value or <a href=\"#runtimeExpression\">{expression}</a> to use as a request body when calling the target operation.</td>\n</tr>\n<tr>\n<td><a name=\"linkDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A description of the link. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n<tr>\n<td><a name=\"linkServer\"></a>server</td>\n<td style=\"text-align: center;\"><a href=\"#serverObject\">Server Object</a></td>\n<td>A server object to be used by the target operation.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "linkOperationRef",
                                                                    "values": [
                                                                        {
                                                                            "text": "operationRef",
                                                                            "html": "<a name=\"linkOperationRef\"></a>operationRef"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "A relative or absolute URI reference to an OAS operation. This field is mutually exclusive of the operationId field, and MUST point to an Operation Object. Relative operationRef values MAY be used to locate an existing Operation Object in the OpenAPI definition. See the rules for resolving Relative References.",
                                                                            "html": "A relative or absolute URI reference to an OAS operation. This field is mutually exclusive of the <code>operationId</code> field, and MUST point to an <a href=\"#operationObject\">Operation Object</a>. Relative <code>operationRef</code> values MAY be used to locate an existing <a href=\"#operationObject\">Operation Object</a> in the OpenAPI definition. See the rules for resolving <a href=\"#relativeReferencesURI\">Relative References</a>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "linkOperationId",
                                                                    "values": [
                                                                        {
                                                                            "text": "operationId",
                                                                            "html": "<a name=\"linkOperationId\"></a>operationId"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "The name of an existing, resolvable OAS operation, as defined with a unique operationId.  This field is mutually exclusive of the operationRef field.",
                                                                            "html": "The name of an <em>existing</em>, resolvable OAS operation, as defined with a unique <code>operationId</code>.  This field is mutually exclusive of the <code>operationRef</code> field."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "linkParameters",
                                                                    "values": [
                                                                        {
                                                                            "text": "parameters",
                                                                            "html": "<a name=\"linkParameters\"></a>parameters"
                                                                        },
                                                                        {
                                                                            "text": "Map[string, Any | {expression}]",
                                                                            "html": "Map[<code>string</code>, Any | <a href=\"#runtimeExpression\">{expression}</a>]"
                                                                        },
                                                                        {
                                                                            "text": "A map representing parameters to pass to an operation as specified with operationId or identified via operationRef. The key is the parameter name to be used, whereas the value can be a constant or an expression to be evaluated and passed to the linked operation.  The parameter name can be qualified using the parameter location [{in}.]{name} for operations that use the same parameter name in different locations (e.g. path.id).",
                                                                            "html": "A map representing parameters to pass to an operation as specified with <code>operationId</code> or identified via <code>operationRef</code>. The key is the parameter name to be used, whereas the value can be a constant or an expression to be evaluated and passed to the linked operation.  The parameter name can be qualified using the <a href=\"#parameterIn\">parameter location</a> <code>[{in}.]{name}</code> for operations that use the same parameter name in different locations (e.g. path.id)."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "linkRequestBody",
                                                                    "values": [
                                                                        {
                                                                            "text": "requestBody",
                                                                            "html": "<a name=\"linkRequestBody\"></a>requestBody"
                                                                        },
                                                                        {
                                                                            "text": "Any | {expression}",
                                                                            "html": "Any | <a href=\"#runtimeExpression\">{expression}</a>"
                                                                        },
                                                                        {
                                                                            "text": "A literal value or {expression} to use as a request body when calling the target operation.",
                                                                            "html": "A literal value or <a href=\"#runtimeExpression\">{expression}</a> to use as a request body when calling the target operation."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "linkDescription",
                                                                    "values": [
                                                                        {
                                                                            "text": "description",
                                                                            "html": "<a name=\"linkDescription\"></a>description"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "A description of the link. CommonMark syntax MAY be used for rich text representation.",
                                                                            "html": "A description of the link. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "linkServer",
                                                                    "values": [
                                                                        {
                                                                            "text": "server",
                                                                            "html": "<a name=\"linkServer\"></a>server"
                                                                        },
                                                                        {
                                                                            "text": "Server Object",
                                                                            "html": "<a href=\"#serverObject\">Server Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "A server object to be used by the target operation.",
                                                                            "html": "A server object to be used by the target operation."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "A linked operation MUST be identified using either an operationRef or operationId.\nIn the case of an operationId, it MUST be unique and resolved in the scope of the OAS document.\nBecause of the potential for name clashes, the operationRef syntax is preferred \nfor OpenAPI documents with external references.",
                                                        "html": "<p>A linked operation MUST be identified using either an <code>operationRef</code> or <code>operationId</code>.\nIn the case of an <code>operationId</code>, it MUST be unique and resolved in the scope of the OAS document.\nBecause of the potential for name clashes, the <code>operationRef</code> syntax is preferred \nfor OpenAPI documents with external references.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_17",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Examples",
                                                "html": "<h5 id=\"examples\">Examples</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "Computing a link from a request operation where the $request.path.id is used to pass a request parameter to the linked operation.",
                                                        "html": "<p>Computing a link from a request operation where the <code>$request.path.id</code> is used to pass a request parameter to the linked operation.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "paths:\n  /users/{id}:\n    parameters:\n    - name: id\n      in: path\n      required: true\n      description: the user identifier, as userId \n      schema:\n        type: string\n    get:\n      responses:\n        '200':\n          description: the user being returned\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  uuid: # the unique user id\n                    type: string\n                    format: uuid\n          links:\n            address:\n              # the target link operationId\n              operationId: getUserAddress\n              parameters:\n                # get the `id` field from the request path parameter named `id`\n                userId: $request.path.id\n  # the path item of the linked operation\n  /users/{userid}/address:\n    parameters:\n    - name: userid\n      in: path\n      required: true\n      description: the user identifier, as userId \n      schema:\n        type: string\n    # linked operation\n    get:\n      operationId: getUserAddress\n      responses:\n        '200':\n          description: the user's address\n",
                                                        "html": "<pre><code class=\"language-yaml\">paths:\n  /users/{id}:\n    parameters:\n    - name: id\n      in: path\n      required: true\n      description: the user identifier, as userId \n      schema:\n        type: string\n    get:\n      responses:\n        '200':\n          description: the user being returned\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  uuid: # the unique user id\n                    type: string\n                    format: uuid\n          links:\n            address:\n              # the target link operationId\n              operationId: getUserAddress\n              parameters:\n                # get the `id` field from the request path parameter named `id`\n                userId: $request.path.id\n  # the path item of the linked operation\n  /users/{userid}/address:\n    parameters:\n    - name: userid\n      in: path\n      required: true\n      description: the user identifier, as userId \n      schema:\n        type: string\n    # linked operation\n    get:\n      operationId: getUserAddress\n      responses:\n        '200':\n          description: the user's address\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "paths:\n  /users/{id}:\n    parameters:\n    - name: id\n      in: path\n      required: true\n      description: the user identifier, as userId \n      schema:\n        type: string\n    get:\n      responses:\n        '200':\n          description: the user being returned\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  uuid: # the unique user id\n                    type: string\n                    format: uuid\n          links:\n            address:\n              # the target link operationId\n              operationId: getUserAddress\n              parameters:\n                # get the `id` field from the request path parameter named `id`\n                userId: $request.path.id\n  # the path item of the linked operation\n  /users/{userid}/address:\n    parameters:\n    - name: userid\n      in: path\n      required: true\n      description: the user identifier, as userId \n      schema:\n        type: string\n    # linked operation\n    get:\n      operationId: getUserAddress\n      responses:\n        '200':\n          description: the user's address\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "When a runtime expression fails to evaluate, no parameter value is passed to the target operation.",
                                                        "html": "<p>When a runtime expression fails to evaluate, no parameter value is passed to the target operation.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "Values from the response body can be used to drive a linked operation.",
                                                        "html": "<p>Values from the response body can be used to drive a linked operation.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "links:\n  address:\n    operationId: getUserAddressByUUID\n    parameters:\n      # get the `uuid` field from the `uuid` field in the response body\n      userUuid: $response.body#/uuid\n",
                                                        "html": "<pre><code class=\"language-yaml\">links:\n  address:\n    operationId: getUserAddressByUUID\n    parameters:\n      # get the `uuid` field from the `uuid` field in the response body\n      userUuid: $response.body#/uuid\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "links:\n  address:\n    operationId: getUserAddressByUUID\n    parameters:\n      # get the `uuid` field from the `uuid` field in the response body\n      userUuid: $response.body#/uuid\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "Clients follow all links at their discretion. \nNeither permissions, nor the capability to make a successful call to that link, is guaranteed \nsolely by the existence of a relationship.",
                                                        "html": "<p>Clients follow all links at their discretion. \nNeither permissions, nor the capability to make a successful call to that link, is guaranteed \nsolely by the existence of a relationship.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "examples",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "OperationRef Examples",
                                                "html": "<h5 id=\"operationref-examples\">OperationRef Examples</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "As references to operationId MAY NOT be possible (the operationId is an optional \nfield in an Operation Object), references MAY also be made through a relative operationRef:",
                                                        "html": "<p>As references to <code>operationId</code> MAY NOT be possible (the <code>operationId</code> is an optional \nfield in an <a href=\"#operationObject\">Operation Object</a>), references MAY also be made through a relative <code>operationRef</code>:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "links:\n  UserRepositories:\n    # returns array of '#/components/schemas/repository'\n    operationRef: '#/paths/~12.0~1repositories~1{username}/get'\n    parameters:\n      username: $response.body#/username\n",
                                                        "html": "<pre><code class=\"language-yaml\">links:\n  UserRepositories:\n    # returns array of '#/components/schemas/repository'\n    operationRef: '#/paths/~12.0~1repositories~1{username}/get'\n    parameters:\n      username: $response.body#/username\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "links:\n  UserRepositories:\n    # returns array of '#/components/schemas/repository'\n    operationRef: '#/paths/~12.0~1repositories~1{username}/get'\n    parameters:\n      username: $response.body#/username\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "or an absolute operationRef:",
                                                        "html": "<p>or an absolute <code>operationRef</code>:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "links:\n  UserRepositories:\n    # returns array of '#/components/schemas/repository'\n    operationRef: 'https://na2.gigantic-server.com/#/paths/~12.0~1repositories~1{username}/get'\n    parameters:\n      username: $response.body#/username\n",
                                                        "html": "<pre><code class=\"language-yaml\">links:\n  UserRepositories:\n    # returns array of '#/components/schemas/repository'\n    operationRef: 'https://na2.gigantic-server.com/#/paths/~12.0~1repositories~1{username}/get'\n    parameters:\n      username: $response.body#/username\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "links:\n  UserRepositories:\n    # returns array of '#/components/schemas/repository'\n    operationRef: 'https://na2.gigantic-server.com/#/paths/~12.0~1repositories~1{username}/get'\n    parameters:\n      username: $response.body#/username\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "Note that in the use of operationRef, the escaped forward-slash is necessary when \nusing JSON references.",
                                                        "html": "<p>Note that in the use of <code>operationRef</code>, the <em>escaped forward-slash</em> is necessary when \nusing JSON references.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "operationref-examples",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Runtime Expressions",
                                                "html": "<h5 id=\"runtime-expressions\"><a name=\"runtimeExpression\"></a>Runtime Expressions</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "Runtime expressions allow defining values based on information that will only be available within the HTTP message in an actual API call.\nThis mechanism is used by Link Objects and Callback Objects.",
                                                        "html": "<p>Runtime expressions allow defining values based on information that will only be available within the HTTP message in an actual API call.\nThis mechanism is used by <a href=\"#linkObject\">Link Objects</a> and <a href=\"#callbackObject\">Callback Objects</a>.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "The runtime expression is defined by the following ABNF syntax",
                                                        "html": "<p>The runtime expression is defined by the following <a href=\"https://tools.ietf.org/html/rfc5234\">ABNF</a> syntax</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "      expression = ( \"$url\" / \"$method\" / \"$statusCode\" / \"$request.\" source / \"$response.\" source )\n      source = ( header-reference / query-reference / path-reference / body-reference )\n      header-reference = \"header.\" token\n      query-reference = \"query.\" name  \n      path-reference = \"path.\" name\n      body-reference = \"body\" [\"#\" json-pointer ]\n      json-pointer    = *( \"/\" reference-token )\n      reference-token = *( unescaped / escaped )\n      unescaped       = %x00-2E / %x30-7D / %x7F-10FFFF\n         ; %x2F ('/') and %x7E ('~') are excluded from 'unescaped'\n      escaped         = \"~\" ( \"0\" / \"1\" )\n        ; representing '~' and '/', respectively\n      name = *( CHAR )\n      token = 1*tchar\n      tchar = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\" / \"+\" / \"-\" / \".\" /\n        \"^\" / \"_\" / \"`\" / \"|\" / \"~\" / DIGIT / ALPHA\n",
                                                        "html": "<pre><code class=\"language-abnf\">      expression = ( \"$url\" / \"$method\" / \"$statusCode\" / \"$request.\" source / \"$response.\" source )\n      source = ( header-reference / query-reference / path-reference / body-reference )\n      header-reference = \"header.\" token\n      query-reference = \"query.\" name  \n      path-reference = \"path.\" name\n      body-reference = \"body\" [\"#\" json-pointer ]\n      json-pointer    = *( \"/\" reference-token )\n      reference-token = *( unescaped / escaped )\n      unescaped       = %x00-2E / %x30-7D / %x7F-10FFFF\n         ; %x2F ('/') and %x7E ('~') are excluded from 'unescaped'\n      escaped         = \"~\" ( \"0\" / \"1\" )\n        ; representing '~' and '/', respectively\n      name = *( CHAR )\n      token = 1*tchar\n      tchar = \"!\" / \"#\" / \"$\" / \"%\" / \"&amp;\" / \"'\" / \"*\" / \"+\" / \"-\" / \".\" /\n        \"^\" / \"_\" / \"`\" / \"|\" / \"~\" / DIGIT / ALPHA\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "abnf",
                                                            "text": "      expression = ( \"$url\" / \"$method\" / \"$statusCode\" / \"$request.\" source / \"$response.\" source )\n      source = ( header-reference / query-reference / path-reference / body-reference )\n      header-reference = \"header.\" token\n      query-reference = \"query.\" name  \n      path-reference = \"path.\" name\n      body-reference = \"body\" [\"#\" json-pointer ]\n      json-pointer    = *( \"/\" reference-token )\n      reference-token = *( unescaped / escaped )\n      unescaped       = %x00-2E / %x30-7D / %x7F-10FFFF\n         ; %x2F ('/') and %x7E ('~') are excluded from 'unescaped'\n      escaped         = \"~\" ( \"0\" / \"1\" )\n        ; representing '~' and '/', respectively\n      name = *( CHAR )\n      token = 1*tchar\n      tchar = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\" / \"+\" / \"-\" / \".\" /\n        \"^\" / \"_\" / \"`\" / \"|\" / \"~\" / DIGIT / ALPHA\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "Here, json-pointer is taken from RFC6901, char from RFC7159 and token from RFC7230.",
                                                        "html": "<p>Here, <code>json-pointer</code> is taken from <a href=\"https://tools.ietf.org/html/rfc6901\">RFC6901</a>, <code>char</code> from <a href=\"https://tools.ietf.org/html/rfc7159#section-7\">RFC7159</a> and <code>token</code> from <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.6\">RFC7230</a>.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "The name identifier is case-sensitive, whereas token is not. ",
                                                        "html": "<p>The <code>name</code> identifier is case-sensitive, whereas <code>token</code> is not. </p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "The table below provides examples of runtime expressions and examples of their use in a value:",
                                                        "html": "<p>The table below provides examples of runtime expressions and examples of their use in a value:</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "runtime-expressions",
                                                    "anchor": "runtimeExpression"
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Examples",
                                                "html": "<h5 id=\"examples_1\"><a name=\"runtimeExpressionExamples\"></a>Examples</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "Source Location | example expression  | notes\n---|:---|:---|\nHTTP Method            | $method         | The allowable values for the $method will be those for the HTTP operation.\nRequested media type | $request.header.accept        |\nRequest parameter      | $request.path.id        | Request parameters MUST be declared in the parameters section of the parent operation or they cannot be evaluated. This includes request headers.\nRequest body property   | $request.body#/user/uuid   | In operations which accept payloads, references may be made to portions of the requestBody or the entire body.\nRequest URL            | $url            |\nResponse value         | $response.body#/status       |  In operations which return payloads, references may be made to portions of the response body or the entire body.\nResponse header        | $response.header.Server |  Single header values only are available",
                                                        "html": "<p>Source Location | example expression  | notes\n---|:---|:---|\nHTTP Method            | <code>$method</code>         | The allowable values for the <code>$method</code> will be those for the HTTP operation.\nRequested media type | <code>$request.header.accept</code>        |<br/>\nRequest parameter      | <code>$request.path.id</code>        | Request parameters MUST be declared in the <code>parameters</code> section of the parent operation or they cannot be evaluated. This includes request headers.\nRequest body property   | <code>$request.body#/user/uuid</code>   | In operations which accept payloads, references may be made to portions of the <code>requestBody</code> or the entire body.\nRequest URL            | <code>$url</code>            |<br/>\nResponse value         | <code>$response.body#/status</code>       |  In operations which return payloads, references may be made to portions of the response body or the entire body.\nResponse header        | <code>$response.header.Server</code> |  Single header values only are available</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "Runtime expressions preserve the type of the referenced value.\nExpressions can be embedded into string values by surrounding the expression with {} curly braces.",
                                                        "html": "<p>Runtime expressions preserve the type of the referenced value.\nExpressions can be embedded into string values by surrounding the expression with <code>{}</code> curly braces.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "examples_1",
                                                    "anchor": "runtimeExpressionExamples"
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "link-object",
                                            "anchor": "linkObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "Header Object",
                                        "html": "<h4 id=\"header-object\"><a name=\"headerObject\"></a>Header Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "The Header Object follows the structure of the Parameter Object with the following changes:",
                                                "html": "<p>The Header Object follows the structure of the <a href=\"#parameterObject\">Parameter Object</a> with the following changes:</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "\nname MUST NOT be specified, it is given in the corresponding headers map.\nin MUST NOT be specified, it is implicitly in header.\nAll traits that are affected by the location MUST be applicable to a location of header (for example, style).\n",
                                                "html": "<ol>\n<li><code>name</code> MUST NOT be specified, it is given in the corresponding <code>headers</code> map.</li>\n<li><code>in</code> MUST NOT be specified, it is implicitly in <code>header</code>.</li>\n<li>All traits that are affected by the location MUST be applicable to a location of <code>header</code> (for example, <a href=\"#parameterStyle\"><code>style</code></a>).</li>\n</ol>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Header Object Example",
                                                "html": "<h5 id=\"header-object-example\">Header Object Example</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "A simple header of type integer:",
                                                        "html": "<p>A simple header of type <code>integer</code>:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"description\": \"The number of allowed requests in the current period\",\n  \"schema\": {\n    \"type\": \"integer\"\n  }\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"description\": \"The number of allowed requests in the current period\",\n  \"schema\": {\n    \"type\": \"integer\"\n  }\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"description\": \"The number of allowed requests in the current period\",\n  \"schema\": {\n    \"type\": \"integer\"\n  }\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "description: The number of allowed requests in the current period\nschema:\n  type: integer\n",
                                                        "html": "<pre><code class=\"language-yaml\">description: The number of allowed requests in the current period\nschema:\n  type: integer\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "description: The number of allowed requests in the current period\nschema:\n  type: integer\n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "header-object-example",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "header-object",
                                            "anchor": "headerObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "Tag Object",
                                        "html": "<h4 id=\"tag-object\"><a name=\"tagObject\"></a>Tag Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "Adds metadata to a single tag that is used by the Operation Object.\nIt is not mandatory to have a Tag Object per tag defined in the Operation Object instances.",
                                                "html": "<p>Adds metadata to a single tag that is used by the <a href=\"#operationObject\">Operation Object</a>.\nIt is not mandatory to have a Tag Object per tag defined in the Operation Object instances.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_18\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\nname\nstring\nREQUIRED. The name of the tag.\n\n\ndescription\nstring\nA description for the tag. CommonMark syntax MAY be used for rich text representation.\n\n\nexternalDocs\nExternal Documentation Object\nAdditional external documentation for this tag.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"tagName\"></a>name</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. The name of the tag.</td>\n</tr>\n<tr>\n<td><a name=\"tagDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A description for the tag. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n<tr>\n<td><a name=\"tagExternalDocs\"></a>externalDocs</td>\n<td style=\"text-align: center;\"><a href=\"#externalDocumentationObject\">External Documentation Object</a></td>\n<td>Additional external documentation for this tag.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "tagName",
                                                                    "values": [
                                                                        {
                                                                            "text": "name",
                                                                            "html": "<a name=\"tagName\"></a>name"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "REQUIRED. The name of the tag.",
                                                                            "html": "<strong>REQUIRED</strong>. The name of the tag."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "tagDescription",
                                                                    "values": [
                                                                        {
                                                                            "text": "description",
                                                                            "html": "<a name=\"tagDescription\"></a>description"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "A description for the tag. CommonMark syntax MAY be used for rich text representation.",
                                                                            "html": "A description for the tag. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "tagExternalDocs",
                                                                    "values": [
                                                                        {
                                                                            "text": "externalDocs",
                                                                            "html": "<a name=\"tagExternalDocs\"></a>externalDocs"
                                                                        },
                                                                        {
                                                                            "text": "External Documentation Object",
                                                                            "html": "<a href=\"#externalDocumentationObject\">External Documentation Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "Additional external documentation for this tag.",
                                                                            "html": "Additional external documentation for this tag."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_18",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Tag Object Example",
                                                "html": "<h5 id=\"tag-object-example\">Tag Object Example</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n    \"name\": \"pet\",\n    \"description\": \"Pets operations\"\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n    \"name\": \"pet\",\n    \"description\": \"Pets operations\"\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n    \"name\": \"pet\",\n    \"description\": \"Pets operations\"\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "name: pet\ndescription: Pets operations\n",
                                                        "html": "<pre><code class=\"language-yaml\">name: pet\ndescription: Pets operations\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "name: pet\ndescription: Pets operations\n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "tag-object-example",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "tag-object",
                                            "anchor": "tagObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "Reference Object",
                                        "html": "<h4 id=\"reference-object\"><a name=\"referenceObject\"></a>Reference Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "A simple object to allow referencing other components in the OpenAPI document, internally and externally.",
                                                "html": "<p>A simple object to allow referencing other components in the OpenAPI document, internally and externally.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "The $ref string value contains a URI RFC3986, which identifies the location of the value being referenced.",
                                                "html": "<p>The <code>$ref</code> string value contains a URI <a href=\"https://tools.ietf.org/html/rfc3986\">RFC3986</a>, which identifies the location of the value being referenced.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "See the rules for resolving Relative References.",
                                                "html": "<p>See the rules for resolving <a href=\"#relativeReferencesURI\">Relative References</a>.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_19\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\n$ref\nstring\nREQUIRED. The reference identifier. This MUST be in the form of a URI.\n\n\nsummary\nstring\nA short summary which by default SHOULD override that of the referenced component. If the referenced object-type does not allow a summary field, then this field has no effect.\n\n\ndescription\nstring\nA description which by default SHOULD override that of the referenced component. CommonMark syntax MAY be used for rich text representation. If the referenced object-type does not allow a description field, then this field has no effect.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"referenceRef\"></a>$ref</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. The reference identifier. This MUST be in the form of a URI.</td>\n</tr>\n<tr>\n<td><a name=\"referenceSummary\"></a>summary</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A short summary which by default SHOULD override that of the referenced component. If the referenced object-type does not allow a <code>summary</code> field, then this field has no effect.</td>\n</tr>\n<tr>\n<td><a name=\"referenceDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>A description which by default SHOULD override that of the referenced component. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation. If the referenced object-type does not allow a <code>description</code> field, then this field has no effect.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "referenceRef",
                                                                    "values": [
                                                                        {
                                                                            "text": "$ref",
                                                                            "html": "<a name=\"referenceRef\"></a>$ref"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "REQUIRED. The reference identifier. This MUST be in the form of a URI.",
                                                                            "html": "<strong>REQUIRED</strong>. The reference identifier. This MUST be in the form of a URI."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "referenceSummary",
                                                                    "values": [
                                                                        {
                                                                            "text": "summary",
                                                                            "html": "<a name=\"referenceSummary\"></a>summary"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "A short summary which by default SHOULD override that of the referenced component. If the referenced object-type does not allow a summary field, then this field has no effect.",
                                                                            "html": "A short summary which by default SHOULD override that of the referenced component. If the referenced object-type does not allow a <code>summary</code> field, then this field has no effect."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "referenceDescription",
                                                                    "values": [
                                                                        {
                                                                            "text": "description",
                                                                            "html": "<a name=\"referenceDescription\"></a>description"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "A description which by default SHOULD override that of the referenced component. CommonMark syntax MAY be used for rich text representation. If the referenced object-type does not allow a description field, then this field has no effect.",
                                                                            "html": "A description which by default SHOULD override that of the referenced component. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation. If the referenced object-type does not allow a <code>description</code> field, then this field has no effect."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object cannot be extended with additional properties and any properties added SHALL be ignored.",
                                                        "html": "<p>This object cannot be extended with additional properties and any properties added SHALL be ignored.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "Note that this restriction on additional properties is a difference between Reference Objects and Schema Objects that contain a $ref keyword.",
                                                        "html": "<p>Note that this restriction on additional properties is a difference between Reference Objects and <a href=\"#schemaObject\"><code>Schema Objects</code></a> that contain a <code>$ref</code> keyword.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_19",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Reference Object Example",
                                                "html": "<h5 id=\"reference-object-example\">Reference Object Example</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n    \"$ref\": \"#/components/schemas/Pet\"\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n    \"$ref\": \"#/components/schemas/Pet\"\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n    \"$ref\": \"#/components/schemas/Pet\"\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "$ref: '#/components/schemas/Pet'\n",
                                                        "html": "<pre><code class=\"language-yaml\">$ref: '#/components/schemas/Pet'\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "$ref: '#/components/schemas/Pet'\n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "reference-object-example",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Relative Schema Document Example",
                                                "html": "<h5 id=\"relative-schema-document-example\">Relative Schema Document Example</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"$ref\": \"Pet.json\"\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"$ref\": \"Pet.json\"\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"$ref\": \"Pet.json\"\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "$ref: Pet.yaml\n",
                                                        "html": "<pre><code class=\"language-yaml\">$ref: Pet.yaml\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "$ref: Pet.yaml\n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "relative-schema-document-example",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Relative Documents With Embedded Schema Example",
                                                "html": "<h5 id=\"relative-documents-with-embedded-schema-example\">Relative Documents With Embedded Schema Example</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"$ref\": \"definitions.json#/Pet\"\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"$ref\": \"definitions.json#/Pet\"\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"$ref\": \"definitions.json#/Pet\"\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "$ref: definitions.yaml#/Pet\n",
                                                        "html": "<pre><code class=\"language-yaml\">$ref: definitions.yaml#/Pet\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "$ref: definitions.yaml#/Pet\n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "relative-documents-with-embedded-schema-example",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "reference-object",
                                            "anchor": "referenceObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "Schema Object",
                                        "html": "<h4 id=\"schema-object\"><a name=\"schemaObject\"></a>Schema Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "The Schema Object allows the definition of input and output data types.\nThese types can be objects, but also primitives and arrays. This object is a superset of the JSON Schema Specification Draft 2020-12.",
                                                "html": "<p>The Schema Object allows the definition of input and output data types.\nThese types can be objects, but also primitives and arrays. This object is a superset of the <a href=\"https://tools.ietf.org/html/draft-bhutton-json-schema-00\">JSON Schema Specification Draft 2020-12</a>.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "For more information about the properties, see JSON Schema Core and JSON Schema Validation.",
                                                "html": "<p>For more information about the properties, see <a href=\"https://tools.ietf.org/html/draft-bhutton-json-schema-00\">JSON Schema Core</a> and <a href=\"https://tools.ietf.org/html/draft-bhutton-json-schema-validation-00\">JSON Schema Validation</a>.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "Unless stated otherwise, the property definitions follow those of JSON Schema and do not add any additional semantics.\nWhere JSON Schema indicates that behavior is defined by the application (e.g. for annotations), OAS also defers the definition of semantics to the application consuming the OpenAPI document.",
                                                "html": "<p>Unless stated otherwise, the property definitions follow those of JSON Schema and do not add any additional semantics.\nWhere JSON Schema indicates that behavior is defined by the application (e.g. for annotations), OAS also defers the definition of semantics to the application consuming the OpenAPI document.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Properties",
                                                "html": "<h5 id=\"properties\">Properties</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "The OpenAPI Schema Object dialect is defined as requiring the OAS base vocabulary, in addition to the vocabularies as specified in the JSON Schema draft 2020-12 general purpose meta-schema.",
                                                        "html": "<p>The OpenAPI Schema Object <a href=\"https://tools.ietf.org/html/draft-bhutton-json-schema-00#section-4.3.3\">dialect</a> is defined as requiring the <a href=\"#baseVocabulary\">OAS base vocabulary</a>, in addition to the vocabularies as specified in the JSON Schema draft 2020-12 <a href=\"https://tools.ietf.org/html/draft-bhutton-json-schema-00#section-8\">general purpose meta-schema</a>.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "The OpenAPI Schema Object dialect for this version of the specification is identified by the URI https://spec.openapis.org/oas/3.1/dialect/base (the \"OAS dialect schema id\").",
                                                        "html": "<p>The OpenAPI Schema Object dialect for this version of the specification is identified by the URI <code>https://spec.openapis.org/oas/3.1/dialect/base</code> (the <a name=\"dialectSchemaId\"></a>\"OAS dialect schema id\").</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "The following properties are taken from the JSON Schema specification but their definitions have been extended by the OAS:",
                                                        "html": "<p>The following properties are taken from the JSON Schema specification but their definitions have been extended by the OAS:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "\ndescription - CommonMark syntax MAY be used for rich text representation.\nformat - See Data Type Formats for further details. While relying on JSON Schema's defined formats, the OAS offers a few additional predefined formats.\n",
                                                        "html": "<ul>\n<li>description - <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</li>\n<li>format - See <a href=\"#dataTypeFormat\">Data Type Formats</a> for further details. While relying on JSON Schema's defined formats, the OAS offers a few additional predefined formats.</li>\n</ul>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "In addition to the JSON Schema properties comprising the OAS dialect, the Schema Object supports keywords from any other vocabularies, or entirely arbitrary properties.",
                                                        "html": "<p>In addition to the JSON Schema properties comprising the OAS dialect, the Schema Object supports keywords from any other vocabularies, or entirely arbitrary properties.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "The OpenAPI Specification's base vocabulary is comprised of the following keywords:",
                                                        "html": "<p>The OpenAPI Specification's base vocabulary is comprised of the following keywords:</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "properties",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_20\"><a name=\"baseVocabulary\"></a>Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\ndiscriminator\nDiscriminator Object\nAdds support for polymorphism. The discriminator is an object name that is used to differentiate between other schemas which may satisfy the payload description. See Composition and Inheritance for more details.\n\n\nxml\nXML Object\nThis MAY be used only on properties schemas. It has no effect on root schemas. Adds additional metadata to describe the XML representation of this property.\n\n\nexternalDocs\nExternal Documentation Object\nAdditional external documentation for this schema.\n\n\nexample\nAny\nA free-form property to include an example of an instance for this schema. To represent examples that cannot be naturally represented in JSON or YAML, a string value can be used to contain the example with escaping where necessary.Deprecated: The example property has been deprecated in favor of the JSON Schema examples keyword. Use of example is discouraged, and later versions of this specification may remove it.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"schemaDiscriminator\"></a>discriminator</td>\n<td style=\"text-align: center;\"><a href=\"#discriminatorObject\">Discriminator Object</a></td>\n<td>Adds support for polymorphism. The discriminator is an object name that is used to differentiate between other schemas which may satisfy the payload description. See <a href=\"#schemaComposition\">Composition and Inheritance</a> for more details.</td>\n</tr>\n<tr>\n<td><a name=\"schemaXml\"></a>xml</td>\n<td style=\"text-align: center;\"><a href=\"#xmlObject\">XML Object</a></td>\n<td>This MAY be used only on properties schemas. It has no effect on root schemas. Adds additional metadata to describe the XML representation of this property.</td>\n</tr>\n<tr>\n<td><a name=\"schemaExternalDocs\"></a>externalDocs</td>\n<td style=\"text-align: center;\"><a href=\"#externalDocumentationObject\">External Documentation Object</a></td>\n<td>Additional external documentation for this schema.</td>\n</tr>\n<tr>\n<td><a name=\"schemaExample\"></a>example</td>\n<td style=\"text-align: center;\">Any</td>\n<td>A free-form property to include an example of an instance for this schema. To represent examples that cannot be naturally represented in JSON or YAML, a string value can be used to contain the example with escaping where necessary.<br/><br/><strong>Deprecated:</strong> The <code>example</code> property has been deprecated in favor of the JSON Schema <code>examples</code> keyword. Use of <code>example</code> is discouraged, and later versions of this specification may remove it.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "schemaDiscriminator",
                                                                    "values": [
                                                                        {
                                                                            "text": "discriminator",
                                                                            "html": "<a name=\"schemaDiscriminator\"></a>discriminator"
                                                                        },
                                                                        {
                                                                            "text": "Discriminator Object",
                                                                            "html": "<a href=\"#discriminatorObject\">Discriminator Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "Adds support for polymorphism. The discriminator is an object name that is used to differentiate between other schemas which may satisfy the payload description. See Composition and Inheritance for more details.",
                                                                            "html": "Adds support for polymorphism. The discriminator is an object name that is used to differentiate between other schemas which may satisfy the payload description. See <a href=\"#schemaComposition\">Composition and Inheritance</a> for more details."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "schemaXml",
                                                                    "values": [
                                                                        {
                                                                            "text": "xml",
                                                                            "html": "<a name=\"schemaXml\"></a>xml"
                                                                        },
                                                                        {
                                                                            "text": "XML Object",
                                                                            "html": "<a href=\"#xmlObject\">XML Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "This MAY be used only on properties schemas. It has no effect on root schemas. Adds additional metadata to describe the XML representation of this property.",
                                                                            "html": "This MAY be used only on properties schemas. It has no effect on root schemas. Adds additional metadata to describe the XML representation of this property."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "schemaExternalDocs",
                                                                    "values": [
                                                                        {
                                                                            "text": "externalDocs",
                                                                            "html": "<a name=\"schemaExternalDocs\"></a>externalDocs"
                                                                        },
                                                                        {
                                                                            "text": "External Documentation Object",
                                                                            "html": "<a href=\"#externalDocumentationObject\">External Documentation Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "Additional external documentation for this schema.",
                                                                            "html": "Additional external documentation for this schema."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "schemaExample",
                                                                    "values": [
                                                                        {
                                                                            "text": "example",
                                                                            "html": "<a name=\"schemaExample\"></a>example"
                                                                        },
                                                                        {
                                                                            "text": "Any",
                                                                            "html": "Any"
                                                                        },
                                                                        {
                                                                            "text": "A free-form property to include an example of an instance for this schema. To represent examples that cannot be naturally represented in JSON or YAML, a string value can be used to contain the example with escaping where necessary.Deprecated: The example property has been deprecated in favor of the JSON Schema examples keyword. Use of example is discouraged, and later versions of this specification may remove it.",
                                                                            "html": "A free-form property to include an example of an instance for this schema. To represent examples that cannot be naturally represented in JSON or YAML, a string value can be used to contain the example with escaping where necessary.<br/><br/><strong>Deprecated:</strong> The <code>example</code> property has been deprecated in favor of the JSON Schema <code>examples</code> keyword. Use of <code>example</code> is discouraged, and later versions of this specification may remove it."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions, though as noted, additional properties MAY omit the x- prefix within this object.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>, though as noted, additional properties MAY omit the <code>x-</code> prefix within this object.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "header",
                                                        "subType": null,
                                                        "level": 6,
                                                        "text": "Composition and Inheritance (Polymorphism)",
                                                        "html": "<h6 id=\"composition-and-inheritance-polymorphism\"><a name=\"schemaComposition\"></a>Composition and Inheritance (Polymorphism)</h6>",
                                                        "children": [
                                                            {
                                                                "type": "content",
                                                                "subType": "text",
                                                                "level": null,
                                                                "text": "The OpenAPI Specification allows combining and extending model definitions using the allOf property of JSON Schema, in effect offering model composition.\nallOf takes an array of object definitions that are validated independently but together compose a single object.",
                                                                "html": "<p>The OpenAPI Specification allows combining and extending model definitions using the <code>allOf</code> property of JSON Schema, in effect offering model composition.\n<code>allOf</code> takes an array of object definitions that are validated <em>independently</em> but together compose a single object.</p>",
                                                                "children": []
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "text",
                                                                "level": null,
                                                                "text": "While composition offers model extensibility, it does not imply a hierarchy between the models.\nTo support polymorphism, the OpenAPI Specification adds the discriminator field.\nWhen used, the discriminator will be the name of the property that decides which schema definition validates the structure of the model.\nAs such, the discriminator field MUST be a required field.\nThere are two ways to define the value of a discriminator for an inheriting instance.\n- Use the schema name.\n- Override the schema name by overriding the property with a new value. If a new value exists, this takes precedence over the schema name.\nAs such, inline schema definitions, which do not have a given id, cannot be used in polymorphism.",
                                                                "html": "<p>While composition offers model extensibility, it does not imply a hierarchy between the models.\nTo support polymorphism, the OpenAPI Specification adds the <code>discriminator</code> field.\nWhen used, the <code>discriminator</code> will be the name of the property that decides which schema definition validates the structure of the model.\nAs such, the <code>discriminator</code> field MUST be a required field.\nThere are two ways to define the value of a discriminator for an inheriting instance.\n- Use the schema name.\n- Override the schema name by overriding the property with a new value. If a new value exists, this takes precedence over the schema name.\nAs such, inline schema definitions, which do not have a given id, <em>cannot</em> be used in polymorphism.</p>",
                                                                "children": []
                                                            }
                                                        ],
                                                        "header": {
                                                            "level": 6,
                                                            "id": "composition-and-inheritance-polymorphism",
                                                            "anchor": "schemaComposition"
                                                        }
                                                    },
                                                    {
                                                        "type": "header",
                                                        "subType": null,
                                                        "level": 6,
                                                        "text": "XML Modeling",
                                                        "html": "<h6 id=\"xml-modeling\">XML Modeling</h6>",
                                                        "children": [
                                                            {
                                                                "type": "content",
                                                                "subType": "text",
                                                                "level": null,
                                                                "text": "The xml property allows extra definitions when translating the JSON definition to XML.\nThe XML Object contains additional information about the available options.",
                                                                "html": "<p>The <a href=\"#schemaXml\">xml</a> property allows extra definitions when translating the JSON definition to XML.\nThe <a href=\"#xmlObject\">XML Object</a> contains additional information about the available options.</p>",
                                                                "children": []
                                                            }
                                                        ],
                                                        "header": {
                                                            "level": 6,
                                                            "id": "xml-modeling",
                                                            "anchor": null
                                                        }
                                                    },
                                                    {
                                                        "type": "header",
                                                        "subType": null,
                                                        "level": 6,
                                                        "text": "Specifying Schema Dialects",
                                                        "html": "<h6 id=\"specifying-schema-dialects\">Specifying Schema Dialects</h6>",
                                                        "children": [
                                                            {
                                                                "type": "content",
                                                                "subType": "text",
                                                                "level": null,
                                                                "text": "It is important for tooling to be able to determine which dialect or meta-schema any given resource wishes to be processed with: JSON Schema Core, JSON Schema Validation, OpenAPI Schema dialect, or some custom meta-schema.",
                                                                "html": "<p>It is important for tooling to be able to determine which dialect or meta-schema any given resource wishes to be processed with: JSON Schema Core, JSON Schema Validation, OpenAPI Schema dialect, or some custom meta-schema.</p>",
                                                                "children": []
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "text",
                                                                "level": null,
                                                                "text": "The $schema keyword MAY be present in any root Schema Object, and if present MUST be used to determine which dialect should be used when processing the schema. This allows use of Schema Objects which comply with other drafts of JSON Schema than the default Draft 2020-12 support. Tooling MUST support the OAS dialect schema id, and MAY support additional values of $schema.",
                                                                "html": "<p>The <code>$schema</code> keyword MAY be present in any root Schema Object, and if present MUST be used to determine which dialect should be used when processing the schema. This allows use of Schema Objects which comply with other drafts of JSON Schema than the default Draft 2020-12 support. Tooling MUST support the <a href=\"#dialectSchemaId\">OAS dialect schema id</a>, and MAY support additional values of <code>$schema</code>.</p>",
                                                                "children": []
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "text",
                                                                "level": null,
                                                                "text": "To allow use of a different default $schema value for all Schema Objects contained within an OAS document, a jsonSchemaDialect value may be set within the OpenAPI Object. If this default is not set, then the OAS dialect schema id MUST be used for these Schema Objects. The value of $schema within a Schema Object always overrides any default.",
                                                                "html": "<p>To allow use of a different default <code>$schema</code> value for all Schema Objects contained within an OAS document, a <code>jsonSchemaDialect</code> value may be set within the <a href=\"#oasObject\">OpenAPI Object</a>. If this default is not set, then the OAS dialect schema id MUST be used for these Schema Objects. The value of <code>$schema</code> within a Schema Object always overrides any default.</p>",
                                                                "children": []
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "text",
                                                                "level": null,
                                                                "text": "When a Schema Object is referenced from an external resource which is not an OAS document (e.g. a bare JSON Schema resource), then the value of the $schema keyword for schemas within that resource MUST follow JSON Schema rules.",
                                                                "html": "<p>When a Schema Object is referenced from an external resource which is not an OAS document (e.g. a bare JSON Schema resource), then the value of the <code>$schema</code> keyword for schemas within that resource MUST follow <a href=\"https://tools.ietf.org/html/draft-bhutton-json-schema-00#section-8.1.1\">JSON Schema rules</a>.</p>",
                                                                "children": []
                                                            }
                                                        ],
                                                        "header": {
                                                            "level": 6,
                                                            "id": "specifying-schema-dialects",
                                                            "anchor": null
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_20",
                                                    "anchor": "baseVocabulary"
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Schema Object Examples",
                                                "html": "<h5 id=\"schema-object-examples\">Schema Object Examples</h5>",
                                                "children": [
                                                    {
                                                        "type": "header",
                                                        "subType": null,
                                                        "level": 6,
                                                        "text": "Primitive Sample",
                                                        "html": "<h6 id=\"primitive-sample\">Primitive Sample</h6>",
                                                        "children": [
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "{\n  \"type\": \"string\",\n  \"format\": \"email\"\n}\n",
                                                                "html": "<pre><code class=\"language-json\">{\n  \"type\": \"string\",\n  \"format\": \"email\"\n}\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "json",
                                                                    "text": "{\n  \"type\": \"string\",\n  \"format\": \"email\"\n}\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "type: string\nformat: email\n",
                                                                "html": "<pre><code class=\"language-yaml\">type: string\nformat: email\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "yaml",
                                                                    "text": "type: string\nformat: email\n"
                                                                }
                                                            }
                                                        ],
                                                        "header": {
                                                            "level": 6,
                                                            "id": "primitive-sample",
                                                            "anchor": null
                                                        }
                                                    },
                                                    {
                                                        "type": "header",
                                                        "subType": null,
                                                        "level": 6,
                                                        "text": "Simple Model",
                                                        "html": "<h6 id=\"simple-model\">Simple Model</h6>",
                                                        "children": [
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "{\n  \"type\": \"object\",\n  \"required\": [\n    \"name\"\n  ],\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"address\": {\n      \"$ref\": \"#/components/schemas/Address\"\n    },\n    \"age\": {\n      \"type\": \"integer\",\n      \"format\": \"int32\",\n      \"minimum\": 0\n    }\n  }\n}\n",
                                                                "html": "<pre><code class=\"language-json\">{\n  \"type\": \"object\",\n  \"required\": [\n    \"name\"\n  ],\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"address\": {\n      \"$ref\": \"#/components/schemas/Address\"\n    },\n    \"age\": {\n      \"type\": \"integer\",\n      \"format\": \"int32\",\n      \"minimum\": 0\n    }\n  }\n}\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "json",
                                                                    "text": "{\n  \"type\": \"object\",\n  \"required\": [\n    \"name\"\n  ],\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"address\": {\n      \"$ref\": \"#/components/schemas/Address\"\n    },\n    \"age\": {\n      \"type\": \"integer\",\n      \"format\": \"int32\",\n      \"minimum\": 0\n    }\n  }\n}\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "type: object\nrequired:\n- name\nproperties:\n  name:\n    type: string\n  address:\n    $ref: '#/components/schemas/Address'\n  age:\n    type: integer\n    format: int32\n    minimum: 0\n",
                                                                "html": "<pre><code class=\"language-yaml\">type: object\nrequired:\n- name\nproperties:\n  name:\n    type: string\n  address:\n    $ref: '#/components/schemas/Address'\n  age:\n    type: integer\n    format: int32\n    minimum: 0\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "yaml",
                                                                    "text": "type: object\nrequired:\n- name\nproperties:\n  name:\n    type: string\n  address:\n    $ref: '#/components/schemas/Address'\n  age:\n    type: integer\n    format: int32\n    minimum: 0\n"
                                                                }
                                                            }
                                                        ],
                                                        "header": {
                                                            "level": 6,
                                                            "id": "simple-model",
                                                            "anchor": null
                                                        }
                                                    },
                                                    {
                                                        "type": "header",
                                                        "subType": null,
                                                        "level": 6,
                                                        "text": "Model with Map/Dictionary Properties",
                                                        "html": "<h6 id=\"model-with-mapdictionary-properties\">Model with Map/Dictionary Properties</h6>",
                                                        "children": [
                                                            {
                                                                "type": "content",
                                                                "subType": "text",
                                                                "level": null,
                                                                "text": "For a simple string to string mapping:",
                                                                "html": "<p>For a simple string to string mapping:</p>",
                                                                "children": []
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"type\": \"string\"\n  }\n}\n",
                                                                "html": "<pre><code class=\"language-json\">{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"type\": \"string\"\n  }\n}\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "json",
                                                                    "text": "{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"type\": \"string\"\n  }\n}\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "type: object\nadditionalProperties:\n  type: string\n",
                                                                "html": "<pre><code class=\"language-yaml\">type: object\nadditionalProperties:\n  type: string\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "yaml",
                                                                    "text": "type: object\nadditionalProperties:\n  type: string\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "text",
                                                                "level": null,
                                                                "text": "For a string to model mapping:",
                                                                "html": "<p>For a string to model mapping:</p>",
                                                                "children": []
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"$ref\": \"#/components/schemas/ComplexModel\"\n  }\n}\n",
                                                                "html": "<pre><code class=\"language-json\">{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"$ref\": \"#/components/schemas/ComplexModel\"\n  }\n}\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "json",
                                                                    "text": "{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"$ref\": \"#/components/schemas/ComplexModel\"\n  }\n}\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "type: object\nadditionalProperties:\n  $ref: '#/components/schemas/ComplexModel'\n",
                                                                "html": "<pre><code class=\"language-yaml\">type: object\nadditionalProperties:\n  $ref: '#/components/schemas/ComplexModel'\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "yaml",
                                                                    "text": "type: object\nadditionalProperties:\n  $ref: '#/components/schemas/ComplexModel'\n"
                                                                }
                                                            }
                                                        ],
                                                        "header": {
                                                            "level": 6,
                                                            "id": "model-with-mapdictionary-properties",
                                                            "anchor": null
                                                        }
                                                    },
                                                    {
                                                        "type": "header",
                                                        "subType": null,
                                                        "level": 6,
                                                        "text": "Model with Example",
                                                        "html": "<h6 id=\"model-with-example\">Model with Example</h6>",
                                                        "children": [
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"name\"\n  ],\n  \"example\": {\n    \"name\": \"Puma\",\n    \"id\": 1\n  }\n}\n",
                                                                "html": "<pre><code class=\"language-json\">{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"name\"\n  ],\n  \"example\": {\n    \"name\": \"Puma\",\n    \"id\": 1\n  }\n}\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "json",
                                                                    "text": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"name\"\n  ],\n  \"example\": {\n    \"name\": \"Puma\",\n    \"id\": 1\n  }\n}\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "type: object\nproperties:\n  id:\n    type: integer\n    format: int64\n  name:\n    type: string\nrequired:\n- name\nexample:\n  name: Puma\n  id: 1\n",
                                                                "html": "<pre><code class=\"language-yaml\">type: object\nproperties:\n  id:\n    type: integer\n    format: int64\n  name:\n    type: string\nrequired:\n- name\nexample:\n  name: Puma\n  id: 1\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "yaml",
                                                                    "text": "type: object\nproperties:\n  id:\n    type: integer\n    format: int64\n  name:\n    type: string\nrequired:\n- name\nexample:\n  name: Puma\n  id: 1\n"
                                                                }
                                                            }
                                                        ],
                                                        "header": {
                                                            "level": 6,
                                                            "id": "model-with-example",
                                                            "anchor": null
                                                        }
                                                    },
                                                    {
                                                        "type": "header",
                                                        "subType": null,
                                                        "level": 6,
                                                        "text": "Models with Composition",
                                                        "html": "<h6 id=\"models-with-composition\">Models with Composition</h6>",
                                                        "children": [
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "{\n  \"components\": {\n    \"schemas\": {\n      \"ErrorModel\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"message\",\n          \"code\"\n        ],\n        \"properties\": {\n          \"message\": {\n            \"type\": \"string\"\n          },\n          \"code\": {\n            \"type\": \"integer\",\n            \"minimum\": 100,\n            \"maximum\": 600\n          }\n        }\n      },\n      \"ExtendedErrorModel\": {\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/ErrorModel\"\n          },\n          {\n            \"type\": \"object\",\n            \"required\": [\n              \"rootCause\"\n            ],\n            \"properties\": {\n              \"rootCause\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n",
                                                                "html": "<pre><code class=\"language-json\">{\n  \"components\": {\n    \"schemas\": {\n      \"ErrorModel\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"message\",\n          \"code\"\n        ],\n        \"properties\": {\n          \"message\": {\n            \"type\": \"string\"\n          },\n          \"code\": {\n            \"type\": \"integer\",\n            \"minimum\": 100,\n            \"maximum\": 600\n          }\n        }\n      },\n      \"ExtendedErrorModel\": {\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/ErrorModel\"\n          },\n          {\n            \"type\": \"object\",\n            \"required\": [\n              \"rootCause\"\n            ],\n            \"properties\": {\n              \"rootCause\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "json",
                                                                    "text": "{\n  \"components\": {\n    \"schemas\": {\n      \"ErrorModel\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"message\",\n          \"code\"\n        ],\n        \"properties\": {\n          \"message\": {\n            \"type\": \"string\"\n          },\n          \"code\": {\n            \"type\": \"integer\",\n            \"minimum\": 100,\n            \"maximum\": 600\n          }\n        }\n      },\n      \"ExtendedErrorModel\": {\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/ErrorModel\"\n          },\n          {\n            \"type\": \"object\",\n            \"required\": [\n              \"rootCause\"\n            ],\n            \"properties\": {\n              \"rootCause\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "components:\n  schemas:\n    ErrorModel:\n      type: object\n      required:\n      - message\n      - code\n      properties:\n        message:\n          type: string\n        code:\n          type: integer\n          minimum: 100\n          maximum: 600\n    ExtendedErrorModel:\n      allOf:\n      - $ref: '#/components/schemas/ErrorModel'\n      - type: object\n        required:\n        - rootCause\n        properties:\n          rootCause:\n            type: string\n",
                                                                "html": "<pre><code class=\"language-yaml\">components:\n  schemas:\n    ErrorModel:\n      type: object\n      required:\n      - message\n      - code\n      properties:\n        message:\n          type: string\n        code:\n          type: integer\n          minimum: 100\n          maximum: 600\n    ExtendedErrorModel:\n      allOf:\n      - $ref: '#/components/schemas/ErrorModel'\n      - type: object\n        required:\n        - rootCause\n        properties:\n          rootCause:\n            type: string\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "yaml",
                                                                    "text": "components:\n  schemas:\n    ErrorModel:\n      type: object\n      required:\n      - message\n      - code\n      properties:\n        message:\n          type: string\n        code:\n          type: integer\n          minimum: 100\n          maximum: 600\n    ExtendedErrorModel:\n      allOf:\n      - $ref: '#/components/schemas/ErrorModel'\n      - type: object\n        required:\n        - rootCause\n        properties:\n          rootCause:\n            type: string\n"
                                                                }
                                                            }
                                                        ],
                                                        "header": {
                                                            "level": 6,
                                                            "id": "models-with-composition",
                                                            "anchor": null
                                                        }
                                                    },
                                                    {
                                                        "type": "header",
                                                        "subType": null,
                                                        "level": 6,
                                                        "text": "Models with Polymorphism Support",
                                                        "html": "<h6 id=\"models-with-polymorphism-support\">Models with Polymorphism Support</h6>",
                                                        "children": [
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "{\n  \"components\": {\n    \"schemas\": {\n      \"Pet\": {\n        \"type\": \"object\",\n        \"discriminator\": {\n          \"propertyName\": \"petType\"\n        },\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"petType\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"name\",\n          \"petType\"\n        ]\n      },\n      \"Cat\": {\n        \"description\": \"A representation of a cat. Note that `Cat` will be used as the discriminator value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"huntingSkill\": {\n                \"type\": \"string\",\n                \"description\": \"The measured skill for hunting\",\n                \"default\": \"lazy\",\n                \"enum\": [\n                  \"clueless\",\n                  \"lazy\",\n                  \"adventurous\",\n                  \"aggressive\"\n                ]\n              }\n            },\n            \"required\": [\n              \"huntingSkill\"\n            ]\n          }\n        ]\n      },\n      \"Dog\": {\n        \"description\": \"A representation of a dog. Note that `Dog` will be used as the discriminator value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"packSize\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\",\n                \"description\": \"the size of the pack the dog is from\",\n                \"default\": 0,\n                \"minimum\": 0\n              }\n            },\n            \"required\": [\n              \"packSize\"\n            ]\n          }\n        ]\n      }\n    }\n  }\n}\n",
                                                                "html": "<pre><code class=\"language-json\">{\n  \"components\": {\n    \"schemas\": {\n      \"Pet\": {\n        \"type\": \"object\",\n        \"discriminator\": {\n          \"propertyName\": \"petType\"\n        },\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"petType\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"name\",\n          \"petType\"\n        ]\n      },\n      \"Cat\": {\n        \"description\": \"A representation of a cat. Note that `Cat` will be used as the discriminator value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"huntingSkill\": {\n                \"type\": \"string\",\n                \"description\": \"The measured skill for hunting\",\n                \"default\": \"lazy\",\n                \"enum\": [\n                  \"clueless\",\n                  \"lazy\",\n                  \"adventurous\",\n                  \"aggressive\"\n                ]\n              }\n            },\n            \"required\": [\n              \"huntingSkill\"\n            ]\n          }\n        ]\n      },\n      \"Dog\": {\n        \"description\": \"A representation of a dog. Note that `Dog` will be used as the discriminator value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"packSize\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\",\n                \"description\": \"the size of the pack the dog is from\",\n                \"default\": 0,\n                \"minimum\": 0\n              }\n            },\n            \"required\": [\n              \"packSize\"\n            ]\n          }\n        ]\n      }\n    }\n  }\n}\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "json",
                                                                    "text": "{\n  \"components\": {\n    \"schemas\": {\n      \"Pet\": {\n        \"type\": \"object\",\n        \"discriminator\": {\n          \"propertyName\": \"petType\"\n        },\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"petType\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"name\",\n          \"petType\"\n        ]\n      },\n      \"Cat\": {\n        \"description\": \"A representation of a cat. Note that `Cat` will be used as the discriminator value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"huntingSkill\": {\n                \"type\": \"string\",\n                \"description\": \"The measured skill for hunting\",\n                \"default\": \"lazy\",\n                \"enum\": [\n                  \"clueless\",\n                  \"lazy\",\n                  \"adventurous\",\n                  \"aggressive\"\n                ]\n              }\n            },\n            \"required\": [\n              \"huntingSkill\"\n            ]\n          }\n        ]\n      },\n      \"Dog\": {\n        \"description\": \"A representation of a dog. Note that `Dog` will be used as the discriminator value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"packSize\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\",\n                \"description\": \"the size of the pack the dog is from\",\n                \"default\": 0,\n                \"minimum\": 0\n              }\n            },\n            \"required\": [\n              \"packSize\"\n            ]\n          }\n        ]\n      }\n    }\n  }\n}\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "components:\n  schemas:\n    Pet:\n      type: object\n      discriminator:\n        propertyName: petType\n      properties:\n        name:\n          type: string\n        petType:\n          type: string\n      required:\n      - name\n      - petType\n    Cat:  ## \"Cat\" will be used as the discriminator value\n      description: A representation of a cat\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          huntingSkill:\n            type: string\n            description: The measured skill for hunting\n            enum:\n            - clueless\n            - lazy\n            - adventurous\n            - aggressive\n        required:\n        - huntingSkill\n    Dog:  ## \"Dog\" will be used as the discriminator value\n      description: A representation of a dog\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          packSize:\n            type: integer\n            format: int32\n            description: the size of the pack the dog is from\n            default: 0\n            minimum: 0\n        required:\n        - packSize\n",
                                                                "html": "<pre><code class=\"language-yaml\">components:\n  schemas:\n    Pet:\n      type: object\n      discriminator:\n        propertyName: petType\n      properties:\n        name:\n          type: string\n        petType:\n          type: string\n      required:\n      - name\n      - petType\n    Cat:  ## \"Cat\" will be used as the discriminator value\n      description: A representation of a cat\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          huntingSkill:\n            type: string\n            description: The measured skill for hunting\n            enum:\n            - clueless\n            - lazy\n            - adventurous\n            - aggressive\n        required:\n        - huntingSkill\n    Dog:  ## \"Dog\" will be used as the discriminator value\n      description: A representation of a dog\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          packSize:\n            type: integer\n            format: int32\n            description: the size of the pack the dog is from\n            default: 0\n            minimum: 0\n        required:\n        - packSize\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "yaml",
                                                                    "text": "components:\n  schemas:\n    Pet:\n      type: object\n      discriminator:\n        propertyName: petType\n      properties:\n        name:\n          type: string\n        petType:\n          type: string\n      required:\n      - name\n      - petType\n    Cat:  ## \"Cat\" will be used as the discriminator value\n      description: A representation of a cat\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          huntingSkill:\n            type: string\n            description: The measured skill for hunting\n            enum:\n            - clueless\n            - lazy\n            - adventurous\n            - aggressive\n        required:\n        - huntingSkill\n    Dog:  ## \"Dog\" will be used as the discriminator value\n      description: A representation of a dog\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          packSize:\n            type: integer\n            format: int32\n            description: the size of the pack the dog is from\n            default: 0\n            minimum: 0\n        required:\n        - packSize\n"
                                                                }
                                                            }
                                                        ],
                                                        "header": {
                                                            "level": 6,
                                                            "id": "models-with-polymorphism-support",
                                                            "anchor": null
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "schema-object-examples",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "schema-object",
                                            "anchor": "schemaObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "Discriminator Object",
                                        "html": "<h4 id=\"discriminator-object\"><a name=\"discriminatorObject\"></a>Discriminator Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "When request bodies or response payloads may be one of a number of different schemas, a discriminator object can be used to aid in serialization, deserialization, and validation.  The discriminator is a specific object in a schema which is used to inform the consumer of the document of an alternative schema based on the value associated with it.",
                                                "html": "<p>When request bodies or response payloads may be one of a number of different schemas, a <code>discriminator</code> object can be used to aid in serialization, deserialization, and validation.  The discriminator is a specific object in a schema which is used to inform the consumer of the document of an alternative schema based on the value associated with it.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "When using the discriminator, inline schemas will not be considered.",
                                                "html": "<p>When using the discriminator, <em>inline</em> schemas will not be considered.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_21\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\npropertyName\nstring\nREQUIRED. The name of the property in the payload that will hold the discriminator value.\n\n\n mapping\nMap[string, string]\nAn object to hold mappings between payload values and schema names or references.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"propertyName\"></a>propertyName</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><strong>REQUIRED</strong>. The name of the property in the payload that will hold the discriminator value.</td>\n</tr>\n<tr>\n<td><a name=\"discriminatorMapping\"></a> mapping</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, <code>string</code>]</td>\n<td>An object to hold mappings between payload values and schema names or references.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "propertyName",
                                                                    "values": [
                                                                        {
                                                                            "text": "propertyName",
                                                                            "html": "<a name=\"propertyName\"></a>propertyName"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "REQUIRED. The name of the property in the payload that will hold the discriminator value.",
                                                                            "html": "<strong>REQUIRED</strong>. The name of the property in the payload that will hold the discriminator value."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "discriminatorMapping",
                                                                    "values": [
                                                                        {
                                                                            "text": " mapping",
                                                                            "html": "<a name=\"discriminatorMapping\"></a> mapping"
                                                                        },
                                                                        {
                                                                            "text": "Map[string, string]",
                                                                            "html": "Map[<code>string</code>, <code>string</code>]"
                                                                        },
                                                                        {
                                                                            "text": "An object to hold mappings between payload values and schema names or references.",
                                                                            "html": "An object to hold mappings between payload values and schema names or references."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "The discriminator object is legal only when using one of the composite keywords oneOf, anyOf, allOf.",
                                                        "html": "<p>The discriminator object is legal only when using one of the composite keywords <code>oneOf</code>, <code>anyOf</code>, <code>allOf</code>.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "In OAS 3.0, a response payload MAY be described to be exactly one of any number of types:",
                                                        "html": "<p>In OAS 3.0, a response payload MAY be described to be exactly one of any number of types:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "MyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n",
                                                        "html": "<pre><code class=\"language-yaml\">MyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "MyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "which means the payload MUST, by validation, match exactly one of the schemas described by Cat, Dog, or Lizard.  In this case, a discriminator MAY act as a \"hint\" to shortcut validation and selection of the matching schema which may be a costly operation, depending on the complexity of the schema. We can then describe exactly which field tells us which schema to use:",
                                                        "html": "<p>which means the payload <em>MUST</em>, by validation, match exactly one of the schemas described by <code>Cat</code>, <code>Dog</code>, or <code>Lizard</code>.  In this case, a discriminator MAY act as a \"hint\" to shortcut validation and selection of the matching schema which may be a costly operation, depending on the complexity of the schema. We can then describe exactly which field tells us which schema to use:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "MyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n  discriminator:\n    propertyName: petType\n",
                                                        "html": "<pre><code class=\"language-yaml\">MyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n  discriminator:\n    propertyName: petType\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "MyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n  discriminator:\n    propertyName: petType\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "The expectation now is that a property with name petType MUST be present in the response payload, and the value will correspond to the name of a schema defined in the OAS document.  Thus the response payload:",
                                                        "html": "<p>The expectation now is that a property with name <code>petType</code> <em>MUST</em> be present in the response payload, and the value will correspond to the name of a schema defined in the OAS document.  Thus the response payload:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"id\": 12345,\n  \"petType\": \"Cat\"\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"id\": 12345,\n  \"petType\": \"Cat\"\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"id\": 12345,\n  \"petType\": \"Cat\"\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "Will indicate that the Cat schema be used in conjunction with this payload.",
                                                        "html": "<p>Will indicate that the <code>Cat</code> schema be used in conjunction with this payload.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "In scenarios where the value of the discriminator field does not match the schema name or implicit mapping is not possible, an optional mapping definition MAY be used:",
                                                        "html": "<p>In scenarios where the value of the discriminator field does not match the schema name or implicit mapping is not possible, an optional <code>mapping</code> definition MAY be used:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "MyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n  - $ref: 'https://gigantic-server.com/schemas/Monster/schema.json'\n  discriminator:\n    propertyName: petType\n    mapping:\n      dog: '#/components/schemas/Dog'\n      monster: 'https://gigantic-server.com/schemas/Monster/schema.json'\n",
                                                        "html": "<pre><code class=\"language-yaml\">MyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n  - $ref: 'https://gigantic-server.com/schemas/Monster/schema.json'\n  discriminator:\n    propertyName: petType\n    mapping:\n      dog: '#/components/schemas/Dog'\n      monster: 'https://gigantic-server.com/schemas/Monster/schema.json'\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "MyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n  - $ref: 'https://gigantic-server.com/schemas/Monster/schema.json'\n  discriminator:\n    propertyName: petType\n    mapping:\n      dog: '#/components/schemas/Dog'\n      monster: 'https://gigantic-server.com/schemas/Monster/schema.json'\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "Here the discriminator value of dog will map to the schema #/components/schemas/Dog, rather than the default (implicit) value of Dog.  If the discriminator value does not match an implicit or explicit mapping, no schema can be determined and validation SHOULD fail. Mapping keys MUST be string values, but tooling MAY convert response values to strings for comparison.",
                                                        "html": "<p>Here the discriminator <em>value</em> of <code>dog</code> will map to the schema <code>#/components/schemas/Dog</code>, rather than the default (implicit) value of <code>Dog</code>.  If the discriminator <em>value</em> does not match an implicit or explicit mapping, no schema can be determined and validation SHOULD fail. Mapping keys MUST be string values, but tooling MAY convert response values to strings for comparison.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "When used in conjunction with the anyOf construct, the use of the discriminator can avoid ambiguity where multiple schemas may satisfy a single payload.",
                                                        "html": "<p>When used in conjunction with the <code>anyOf</code> construct, the use of the discriminator can avoid ambiguity where multiple schemas may satisfy a single payload.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "In both the oneOf and anyOf use cases, all possible schemas MUST be listed explicitly.  To avoid redundancy, the discriminator MAY be added to a parent schema definition, and all schemas comprising the parent schema in an allOf construct may be used as an alternate schema.",
                                                        "html": "<p>In both the <code>oneOf</code> and <code>anyOf</code> use cases, all possible schemas MUST be listed explicitly.  To avoid redundancy, the discriminator MAY be added to a parent schema definition, and all schemas comprising the parent schema in an <code>allOf</code> construct may be used as an alternate schema.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "For example:",
                                                        "html": "<p>For example:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "components:\n  schemas:\n    Pet:\n      type: object\n      required:\n      - petType\n      properties:\n        petType:\n          type: string\n      discriminator:\n        propertyName: petType\n        mapping:\n          dog: Dog\n    Cat:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        # all other properties specific to a `Cat`\n        properties:\n          name:\n            type: string\n    Dog:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        # all other properties specific to a `Dog`\n        properties:\n          bark:\n            type: string\n    Lizard:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        # all other properties specific to a `Lizard`\n        properties:\n          lovesRocks:\n            type: boolean\n",
                                                        "html": "<pre><code class=\"language-yaml\">components:\n  schemas:\n    Pet:\n      type: object\n      required:\n      - petType\n      properties:\n        petType:\n          type: string\n      discriminator:\n        propertyName: petType\n        mapping:\n          dog: Dog\n    Cat:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        # all other properties specific to a `Cat`\n        properties:\n          name:\n            type: string\n    Dog:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        # all other properties specific to a `Dog`\n        properties:\n          bark:\n            type: string\n    Lizard:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        # all other properties specific to a `Lizard`\n        properties:\n          lovesRocks:\n            type: boolean\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "components:\n  schemas:\n    Pet:\n      type: object\n      required:\n      - petType\n      properties:\n        petType:\n          type: string\n      discriminator:\n        propertyName: petType\n        mapping:\n          dog: Dog\n    Cat:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        # all other properties specific to a `Cat`\n        properties:\n          name:\n            type: string\n    Dog:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        # all other properties specific to a `Dog`\n        properties:\n          bark:\n            type: string\n    Lizard:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        # all other properties specific to a `Lizard`\n        properties:\n          lovesRocks:\n            type: boolean\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "a payload like this:",
                                                        "html": "<p>a payload like this:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"petType\": \"Cat\",\n  \"name\": \"misty\"\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"petType\": \"Cat\",\n  \"name\": \"misty\"\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"petType\": \"Cat\",\n  \"name\": \"misty\"\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "will indicate that the Cat schema be used.  Likewise this schema:",
                                                        "html": "<p>will indicate that the <code>Cat</code> schema be used.  Likewise this schema:</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"petType\": \"dog\",\n  \"bark\": \"soft\"\n}\n",
                                                        "html": "<pre><code class=\"language-json\">{\n  \"petType\": \"dog\",\n  \"bark\": \"soft\"\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "json",
                                                            "text": "{\n  \"petType\": \"dog\",\n  \"bark\": \"soft\"\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "will map to Dog because of the definition in the mapping element.",
                                                        "html": "<p>will map to <code>Dog</code> because of the definition in the <code>mapping</code> element.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_21",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "discriminator-object",
                                            "anchor": "discriminatorObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "XML Object",
                                        "html": "<h4 id=\"xml-object\"><a name=\"xmlObject\"></a>XML Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "A metadata object that allows for more fine-tuned XML model definitions.",
                                                "html": "<p>A metadata object that allows for more fine-tuned XML model definitions.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "When using arrays, XML element names are not inferred (for singular/plural forms) and the name property SHOULD be used to add that information.\nSee examples for expected behavior.",
                                                "html": "<p>When using arrays, XML element names are <em>not</em> inferred (for singular/plural forms) and the <code>name</code> property SHOULD be used to add that information.\nSee examples for expected behavior.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_22\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\nname\nstring\nReplaces the name of the element/attribute used for the described schema property. When defined within items, it will affect the name of the individual XML elements within the list. When defined alongside type being array (outside the items), it will affect the wrapping element and only if wrapped is true. If wrapped is false, it will be ignored.\n\n\nnamespace\nstring\nThe URI of the namespace definition. This MUST be in the form of an absolute URI.\n\n\nprefix\nstring\nThe prefix to be used for the name.\n\n\nattribute\nboolean\nDeclares whether the property definition translates to an attribute instead of an element. Default value is false.\n\n\nwrapped\nboolean\nMAY be used only for an array definition. Signifies whether the array is wrapped (for example, <books><book/><book/></books>) or unwrapped (<book/><book/>). Default value is false. The definition takes effect only when defined alongside type being array (outside the items).\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"xmlName\"></a>name</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>Replaces the name of the element/attribute used for the described schema property. When defined within <code>items</code>, it will affect the name of the individual XML elements within the list. When defined alongside <code>type</code> being <code>array</code> (outside the <code>items</code>), it will affect the wrapping element and only if <code>wrapped</code> is <code>true</code>. If <code>wrapped</code> is <code>false</code>, it will be ignored.</td>\n</tr>\n<tr>\n<td><a name=\"xmlNamespace\"></a>namespace</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>The URI of the namespace definition. This MUST be in the form of an absolute URI.</td>\n</tr>\n<tr>\n<td><a name=\"xmlPrefix\"></a>prefix</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>The prefix to be used for the <a href=\"#xmlName\">name</a>.</td>\n</tr>\n<tr>\n<td><a name=\"xmlAttribute\"></a>attribute</td>\n<td style=\"text-align: center;\"><code>boolean</code></td>\n<td>Declares whether the property definition translates to an attribute instead of an element. Default value is <code>false</code>.</td>\n</tr>\n<tr>\n<td><a name=\"xmlWrapped\"></a>wrapped</td>\n<td style=\"text-align: center;\"><code>boolean</code></td>\n<td>MAY be used only for an array definition. Signifies whether the array is wrapped (for example, <code>&lt;books&gt;&lt;book/&gt;&lt;book/&gt;&lt;/books&gt;</code>) or unwrapped (<code>&lt;book/&gt;&lt;book/&gt;</code>). Default value is <code>false</code>. The definition takes effect only when defined alongside <code>type</code> being <code>array</code> (outside the <code>items</code>).</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "xmlName",
                                                                    "values": [
                                                                        {
                                                                            "text": "name",
                                                                            "html": "<a name=\"xmlName\"></a>name"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "Replaces the name of the element/attribute used for the described schema property. When defined within items, it will affect the name of the individual XML elements within the list. When defined alongside type being array (outside the items), it will affect the wrapping element and only if wrapped is true. If wrapped is false, it will be ignored.",
                                                                            "html": "Replaces the name of the element/attribute used for the described schema property. When defined within <code>items</code>, it will affect the name of the individual XML elements within the list. When defined alongside <code>type</code> being <code>array</code> (outside the <code>items</code>), it will affect the wrapping element and only if <code>wrapped</code> is <code>true</code>. If <code>wrapped</code> is <code>false</code>, it will be ignored."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "xmlNamespace",
                                                                    "values": [
                                                                        {
                                                                            "text": "namespace",
                                                                            "html": "<a name=\"xmlNamespace\"></a>namespace"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "The URI of the namespace definition. This MUST be in the form of an absolute URI.",
                                                                            "html": "The URI of the namespace definition. This MUST be in the form of an absolute URI."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "xmlPrefix",
                                                                    "values": [
                                                                        {
                                                                            "text": "prefix",
                                                                            "html": "<a name=\"xmlPrefix\"></a>prefix"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "The prefix to be used for the name.",
                                                                            "html": "The prefix to be used for the <a href=\"#xmlName\">name</a>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "xmlAttribute",
                                                                    "values": [
                                                                        {
                                                                            "text": "attribute",
                                                                            "html": "<a name=\"xmlAttribute\"></a>attribute"
                                                                        },
                                                                        {
                                                                            "text": "boolean",
                                                                            "html": "<code>boolean</code>"
                                                                        },
                                                                        {
                                                                            "text": "Declares whether the property definition translates to an attribute instead of an element. Default value is false.",
                                                                            "html": "Declares whether the property definition translates to an attribute instead of an element. Default value is <code>false</code>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "xmlWrapped",
                                                                    "values": [
                                                                        {
                                                                            "text": "wrapped",
                                                                            "html": "<a name=\"xmlWrapped\"></a>wrapped"
                                                                        },
                                                                        {
                                                                            "text": "boolean",
                                                                            "html": "<code>boolean</code>"
                                                                        },
                                                                        {
                                                                            "text": "MAY be used only for an array definition. Signifies whether the array is wrapped (for example, <books><book/><book/></books>) or unwrapped (<book/><book/>). Default value is false. The definition takes effect only when defined alongside type being array (outside the items).",
                                                                            "html": "MAY be used only for an array definition. Signifies whether the array is wrapped (for example, <code>&lt;books&gt;&lt;book/&gt;&lt;book/&gt;&lt;/books&gt;</code>) or unwrapped (<code>&lt;book/&gt;&lt;book/&gt;</code>). Default value is <code>false</code>. The definition takes effect only when defined alongside <code>type</code> being <code>array</code> (outside the <code>items</code>)."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_22",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "XML Object Examples",
                                                "html": "<h5 id=\"xml-object-examples\">XML Object Examples</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "The examples of the XML object definitions are included inside a property definition of a Schema Object with a sample of the XML representation of it.",
                                                        "html": "<p>The examples of the XML object definitions are included inside a property definition of a <a href=\"#schemaObject\">Schema Object</a> with a sample of the XML representation of it.</p>",
                                                        "children": []
                                                    },
                                                    {
                                                        "type": "header",
                                                        "subType": null,
                                                        "level": 6,
                                                        "text": "No XML Element",
                                                        "html": "<h6 id=\"no-xml-element\">No XML Element</h6>",
                                                        "children": [
                                                            {
                                                                "type": "content",
                                                                "subType": "text",
                                                                "level": null,
                                                                "text": "Basic string property:",
                                                                "html": "<p>Basic string property:</p>",
                                                                "children": []
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "{\n    \"animals\": {\n        \"type\": \"string\"\n    }\n}\n",
                                                                "html": "<pre><code class=\"language-json\">{\n    \"animals\": {\n        \"type\": \"string\"\n    }\n}\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "json",
                                                                    "text": "{\n    \"animals\": {\n        \"type\": \"string\"\n    }\n}\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "animals:\n  type: string\n",
                                                                "html": "<pre><code class=\"language-yaml\">animals:\n  type: string\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "yaml",
                                                                    "text": "animals:\n  type: string\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "<animals>...</animals>\n",
                                                                "html": "<pre><code class=\"language-xml\">&lt;animals&gt;...&lt;/animals&gt;\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "xml",
                                                                    "text": "<animals>...</animals>\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "text",
                                                                "level": null,
                                                                "text": "Basic string array property (wrapped is false by default):",
                                                                "html": "<p>Basic string array property (<a href=\"#xmlWrapped\"><code>wrapped</code></a> is <code>false</code> by default):</p>",
                                                                "children": []
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "{\n    \"animals\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"type\": \"string\"\n        }\n    }\n}\n",
                                                                "html": "<pre><code class=\"language-json\">{\n    \"animals\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"type\": \"string\"\n        }\n    }\n}\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "json",
                                                                    "text": "{\n    \"animals\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"type\": \"string\"\n        }\n    }\n}\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "animals:\n  type: array\n  items:\n    type: string\n",
                                                                "html": "<pre><code class=\"language-yaml\">animals:\n  type: array\n  items:\n    type: string\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "yaml",
                                                                    "text": "animals:\n  type: array\n  items:\n    type: string\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "<animals>...</animals>\n<animals>...</animals>\n<animals>...</animals>\n",
                                                                "html": "<pre><code class=\"language-xml\">&lt;animals&gt;...&lt;/animals&gt;\n&lt;animals&gt;...&lt;/animals&gt;\n&lt;animals&gt;...&lt;/animals&gt;\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "xml",
                                                                    "text": "<animals>...</animals>\n<animals>...</animals>\n<animals>...</animals>\n"
                                                                }
                                                            }
                                                        ],
                                                        "header": {
                                                            "level": 6,
                                                            "id": "no-xml-element",
                                                            "anchor": null
                                                        }
                                                    },
                                                    {
                                                        "type": "header",
                                                        "subType": null,
                                                        "level": 6,
                                                        "text": "XML Name Replacement",
                                                        "html": "<h6 id=\"xml-name-replacement\">XML Name Replacement</h6>",
                                                        "children": [
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "{\n  \"animals\": {\n    \"type\": \"string\",\n    \"xml\": {\n      \"name\": \"animal\"\n    }\n  }\n}\n",
                                                                "html": "<pre><code class=\"language-json\">{\n  \"animals\": {\n    \"type\": \"string\",\n    \"xml\": {\n      \"name\": \"animal\"\n    }\n  }\n}\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "json",
                                                                    "text": "{\n  \"animals\": {\n    \"type\": \"string\",\n    \"xml\": {\n      \"name\": \"animal\"\n    }\n  }\n}\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "animals:\n  type: string\n  xml:\n    name: animal\n",
                                                                "html": "<pre><code class=\"language-yaml\">animals:\n  type: string\n  xml:\n    name: animal\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "yaml",
                                                                    "text": "animals:\n  type: string\n  xml:\n    name: animal\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "<animal>...</animal>\n",
                                                                "html": "<pre><code class=\"language-xml\">&lt;animal&gt;...&lt;/animal&gt;\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "xml",
                                                                    "text": "<animal>...</animal>\n"
                                                                }
                                                            }
                                                        ],
                                                        "header": {
                                                            "level": 6,
                                                            "id": "xml-name-replacement",
                                                            "anchor": null
                                                        }
                                                    },
                                                    {
                                                        "type": "header",
                                                        "subType": null,
                                                        "level": 6,
                                                        "text": "XML Attribute, Prefix and Namespace",
                                                        "html": "<h6 id=\"xml-attribute-prefix-and-namespace\">XML Attribute, Prefix and Namespace</h6>",
                                                        "children": [
                                                            {
                                                                "type": "content",
                                                                "subType": "text",
                                                                "level": null,
                                                                "text": "In this example, a full model definition is shown.",
                                                                "html": "<p>In this example, a full model definition is shown.</p>",
                                                                "children": []
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "{\n  \"Person\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\",\n        \"xml\": {\n          \"attribute\": true\n        }\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"xml\": {\n          \"namespace\": \"https://example.com/schema/sample\",\n          \"prefix\": \"sample\"\n        }\n      }\n    }\n  }\n}\n",
                                                                "html": "<pre><code class=\"language-json\">{\n  \"Person\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\",\n        \"xml\": {\n          \"attribute\": true\n        }\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"xml\": {\n          \"namespace\": \"https://example.com/schema/sample\",\n          \"prefix\": \"sample\"\n        }\n      }\n    }\n  }\n}\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "json",
                                                                    "text": "{\n  \"Person\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\",\n        \"xml\": {\n          \"attribute\": true\n        }\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"xml\": {\n          \"namespace\": \"https://example.com/schema/sample\",\n          \"prefix\": \"sample\"\n        }\n      }\n    }\n  }\n}\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "Person:\n  type: object\n  properties:\n    id:\n      type: integer\n      format: int32\n      xml:\n        attribute: true\n    name:\n      type: string\n      xml:\n        namespace: https://example.com/schema/sample\n        prefix: sample\n",
                                                                "html": "<pre><code class=\"language-yaml\">Person:\n  type: object\n  properties:\n    id:\n      type: integer\n      format: int32\n      xml:\n        attribute: true\n    name:\n      type: string\n      xml:\n        namespace: https://example.com/schema/sample\n        prefix: sample\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "yaml",
                                                                    "text": "Person:\n  type: object\n  properties:\n    id:\n      type: integer\n      format: int32\n      xml:\n        attribute: true\n    name:\n      type: string\n      xml:\n        namespace: https://example.com/schema/sample\n        prefix: sample\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "<Person id=\"123\">\n    <sample:name xmlns:sample=\"https://example.com/schema/sample\">example</sample:name>\n</Person>\n",
                                                                "html": "<pre><code class=\"language-xml\">&lt;Person id=\"123\"&gt;\n    &lt;sample:name xmlns:sample=\"https://example.com/schema/sample\"&gt;example&lt;/sample:name&gt;\n&lt;/Person&gt;\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "xml",
                                                                    "text": "<Person id=\"123\">\n    <sample:name xmlns:sample=\"https://example.com/schema/sample\">example</sample:name>\n</Person>\n"
                                                                }
                                                            }
                                                        ],
                                                        "header": {
                                                            "level": 6,
                                                            "id": "xml-attribute-prefix-and-namespace",
                                                            "anchor": null
                                                        }
                                                    },
                                                    {
                                                        "type": "header",
                                                        "subType": null,
                                                        "level": 6,
                                                        "text": "XML Arrays",
                                                        "html": "<h6 id=\"xml-arrays\">XML Arrays</h6>",
                                                        "children": [
                                                            {
                                                                "type": "content",
                                                                "subType": "text",
                                                                "level": null,
                                                                "text": "Changing the element names:",
                                                                "html": "<p>Changing the element names:</p>",
                                                                "children": []
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    }\n  }\n}\n",
                                                                "html": "<pre><code class=\"language-json\">{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    }\n  }\n}\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "json",
                                                                    "text": "{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    }\n  }\n}\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "animals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n",
                                                                "html": "<pre><code class=\"language-yaml\">animals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "yaml",
                                                                    "text": "animals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "<animal>value</animal>\n<animal>value</animal>\n",
                                                                "html": "<pre><code class=\"language-xml\">&lt;animal&gt;value&lt;/animal&gt;\n&lt;animal&gt;value&lt;/animal&gt;\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "xml",
                                                                    "text": "<animal>value</animal>\n<animal>value</animal>\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "text",
                                                                "level": null,
                                                                "text": "The external name property has no effect on the XML:",
                                                                "html": "<p>The external <code>name</code> property has no effect on the XML:</p>",
                                                                "children": []
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"aliens\"\n    }\n  }\n}\n",
                                                                "html": "<pre><code class=\"language-json\">{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"aliens\"\n    }\n  }\n}\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "json",
                                                                    "text": "{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"aliens\"\n    }\n  }\n}\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "animals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    name: aliens\n",
                                                                "html": "<pre><code class=\"language-yaml\">animals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    name: aliens\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "yaml",
                                                                    "text": "animals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    name: aliens\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "<animal>value</animal>\n<animal>value</animal>\n",
                                                                "html": "<pre><code class=\"language-xml\">&lt;animal&gt;value&lt;/animal&gt;\n&lt;animal&gt;value&lt;/animal&gt;\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "xml",
                                                                    "text": "<animal>value</animal>\n<animal>value</animal>\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "text",
                                                                "level": null,
                                                                "text": "Even when the array is wrapped, if a name is not explicitly defined, the same name will be used both internally and externally:",
                                                                "html": "<p>Even when the array is wrapped, if a name is not explicitly defined, the same name will be used both internally and externally:</p>",
                                                                "children": []
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"xml\": {\n      \"wrapped\": true\n    }\n  }\n}\n",
                                                                "html": "<pre><code class=\"language-json\">{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"xml\": {\n      \"wrapped\": true\n    }\n  }\n}\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "json",
                                                                    "text": "{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"xml\": {\n      \"wrapped\": true\n    }\n  }\n}\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "animals:\n  type: array\n  items:\n    type: string\n  xml:\n    wrapped: true\n",
                                                                "html": "<pre><code class=\"language-yaml\">animals:\n  type: array\n  items:\n    type: string\n  xml:\n    wrapped: true\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "yaml",
                                                                    "text": "animals:\n  type: array\n  items:\n    type: string\n  xml:\n    wrapped: true\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "<animals>\n  <animals>value</animals>\n  <animals>value</animals>\n</animals>\n",
                                                                "html": "<pre><code class=\"language-xml\">&lt;animals&gt;\n  &lt;animals&gt;value&lt;/animals&gt;\n  &lt;animals&gt;value&lt;/animals&gt;\n&lt;/animals&gt;\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "xml",
                                                                    "text": "<animals>\n  <animals>value</animals>\n  <animals>value</animals>\n</animals>\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "text",
                                                                "level": null,
                                                                "text": "To overcome the naming problem in the example above, the following definition can be used:",
                                                                "html": "<p>To overcome the naming problem in the example above, the following definition can be used:</p>",
                                                                "children": []
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"wrapped\": true\n    }\n  }\n}\n",
                                                                "html": "<pre><code class=\"language-json\">{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"wrapped\": true\n    }\n  }\n}\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "json",
                                                                    "text": "{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"wrapped\": true\n    }\n  }\n}\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "animals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    wrapped: true\n",
                                                                "html": "<pre><code class=\"language-yaml\">animals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    wrapped: true\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "yaml",
                                                                    "text": "animals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    wrapped: true\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "<animals>\n  <animal>value</animal>\n  <animal>value</animal>\n</animals>\n",
                                                                "html": "<pre><code class=\"language-xml\">&lt;animals&gt;\n  &lt;animal&gt;value&lt;/animal&gt;\n  &lt;animal&gt;value&lt;/animal&gt;\n&lt;/animals&gt;\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "xml",
                                                                    "text": "<animals>\n  <animal>value</animal>\n  <animal>value</animal>\n</animals>\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "text",
                                                                "level": null,
                                                                "text": "Affecting both internal and external names:",
                                                                "html": "<p>Affecting both internal and external names:</p>",
                                                                "children": []
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"aliens\",\n      \"wrapped\": true\n    }\n  }\n}\n",
                                                                "html": "<pre><code class=\"language-json\">{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"aliens\",\n      \"wrapped\": true\n    }\n  }\n}\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "json",
                                                                    "text": "{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"aliens\",\n      \"wrapped\": true\n    }\n  }\n}\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "animals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    name: aliens\n    wrapped: true\n",
                                                                "html": "<pre><code class=\"language-yaml\">animals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    name: aliens\n    wrapped: true\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "yaml",
                                                                    "text": "animals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    name: aliens\n    wrapped: true\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "<aliens>\n  <animal>value</animal>\n  <animal>value</animal>\n</aliens>\n",
                                                                "html": "<pre><code class=\"language-xml\">&lt;aliens&gt;\n  &lt;animal&gt;value&lt;/animal&gt;\n  &lt;animal&gt;value&lt;/animal&gt;\n&lt;/aliens&gt;\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "xml",
                                                                    "text": "<aliens>\n  <animal>value</animal>\n  <animal>value</animal>\n</aliens>\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "text",
                                                                "level": null,
                                                                "text": "If we change the external element but not the internal ones:",
                                                                "html": "<p>If we change the external element but not the internal ones:</p>",
                                                                "children": []
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"xml\": {\n      \"name\": \"aliens\",\n      \"wrapped\": true\n    }\n  }\n}\n",
                                                                "html": "<pre><code class=\"language-json\">{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"xml\": {\n      \"name\": \"aliens\",\n      \"wrapped\": true\n    }\n  }\n}\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "json",
                                                                    "text": "{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"xml\": {\n      \"name\": \"aliens\",\n      \"wrapped\": true\n    }\n  }\n}\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "animals:\n  type: array\n  items:\n    type: string\n  xml:\n    name: aliens\n    wrapped: true\n",
                                                                "html": "<pre><code class=\"language-yaml\">animals:\n  type: array\n  items:\n    type: string\n  xml:\n    name: aliens\n    wrapped: true\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "yaml",
                                                                    "text": "animals:\n  type: array\n  items:\n    type: string\n  xml:\n    name: aliens\n    wrapped: true\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "<aliens>\n  <aliens>value</aliens>\n  <aliens>value</aliens>\n</aliens>\n",
                                                                "html": "<pre><code class=\"language-xml\">&lt;aliens&gt;\n  &lt;aliens&gt;value&lt;/aliens&gt;\n  &lt;aliens&gt;value&lt;/aliens&gt;\n&lt;/aliens&gt;\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "xml",
                                                                    "text": "<aliens>\n  <aliens>value</aliens>\n  <aliens>value</aliens>\n</aliens>\n"
                                                                }
                                                            }
                                                        ],
                                                        "header": {
                                                            "level": 6,
                                                            "id": "xml-arrays",
                                                            "anchor": null
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "xml-object-examples",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "xml-object",
                                            "anchor": "xmlObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "Security Scheme Object",
                                        "html": "<h4 id=\"security-scheme-object\"><a name=\"securitySchemeObject\"></a>Security Scheme Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "Defines a security scheme that can be used by the operations.",
                                                "html": "<p>Defines a security scheme that can be used by the operations.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter), mutual TLS (use of a client certificate), OAuth2's common flows (implicit, password, client credentials and authorization code) as defined in RFC6749, and OpenID Connect Discovery.\nPlease note that as of 2020, the implicit flow is about to be deprecated by OAuth 2.0 Security Best Current Practice. Recommended for most use case is Authorization Code Grant flow with PKCE.",
                                                "html": "<p>Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter), mutual TLS (use of a client certificate), OAuth2's common flows (implicit, password, client credentials and authorization code) as defined in <a href=\"https://tools.ietf.org/html/rfc6749\">RFC6749</a>, and <a href=\"https://tools.ietf.org/html/draft-ietf-oauth-discovery-06\">OpenID Connect Discovery</a>.\nPlease note that as of 2020, the implicit flow is about to be deprecated by <a href=\"https://tools.ietf.org/html/draft-ietf-oauth-security-topics\">OAuth 2.0 Security Best Current Practice</a>. Recommended for most use case is Authorization Code Grant flow with PKCE.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_23\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nApplies To\nDescription\n\n\n\n\ntype\nstring\nAny\nREQUIRED. The type of the security scheme. Valid values are \"apiKey\", \"http\", \"mutualTLS\", \"oauth2\", \"openIdConnect\".\n\n\ndescription\nstring\nAny\nA description for security scheme. CommonMark syntax MAY be used for rich text representation.\n\n\nname\nstring\napiKey\nREQUIRED. The name of the header, query or cookie parameter to be used.\n\n\nin\nstring\napiKey\nREQUIRED. The location of the API key. Valid values are \"query\", \"header\" or \"cookie\".\n\n\nscheme\nstring\nhttp\nREQUIRED. The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235.  The values used SHOULD be registered in the IANA Authentication Scheme registry.\n\n\nbearerFormat\nstring\nhttp (\"bearer\")\nA hint to the client to identify how the bearer token is formatted.  Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.\n\n\nflows\nOAuth Flows Object\noauth2\nREQUIRED. An object containing configuration information for the flow types supported.\n\n\nopenIdConnectUrl\nstring\nopenIdConnect\nREQUIRED. OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL. The OpenID Connect standard requires the use of TLS.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Applies To</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"securitySchemeType\"></a>type</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>Any</td>\n<td><strong>REQUIRED</strong>. The type of the security scheme. Valid values are <code>\"apiKey\"</code>, <code>\"http\"</code>, <code>\"mutualTLS\"</code>, <code>\"oauth2\"</code>, <code>\"openIdConnect\"</code>.</td>\n</tr>\n<tr>\n<td><a name=\"securitySchemeDescription\"></a>description</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td>Any</td>\n<td>A description for security scheme. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation.</td>\n</tr>\n<tr>\n<td><a name=\"securitySchemeName\"></a>name</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><code>apiKey</code></td>\n<td><strong>REQUIRED</strong>. The name of the header, query or cookie parameter to be used.</td>\n</tr>\n<tr>\n<td><a name=\"securitySchemeIn\"></a>in</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><code>apiKey</code></td>\n<td><strong>REQUIRED</strong>. The location of the API key. Valid values are <code>\"query\"</code>, <code>\"header\"</code> or <code>\"cookie\"</code>.</td>\n</tr>\n<tr>\n<td><a name=\"securitySchemeScheme\"></a>scheme</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><code>http</code></td>\n<td><strong>REQUIRED</strong>. The name of the HTTP Authorization scheme to be used in the <a href=\"https://tools.ietf.org/html/rfc7235#section-5.1\">Authorization header as defined in RFC7235</a>.  The values used SHOULD be registered in the <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">IANA Authentication Scheme registry</a>.</td>\n</tr>\n<tr>\n<td><a name=\"securitySchemeBearerFormat\"></a>bearerFormat</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><code>http</code> (<code>\"bearer\"</code>)</td>\n<td>A hint to the client to identify how the bearer token is formatted.  Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.</td>\n</tr>\n<tr>\n<td><a name=\"securitySchemeFlows\"></a>flows</td>\n<td style=\"text-align: center;\"><a href=\"#oauthFlowsObject\">OAuth Flows Object</a></td>\n<td><code>oauth2</code></td>\n<td><strong>REQUIRED</strong>. An object containing configuration information for the flow types supported.</td>\n</tr>\n<tr>\n<td><a name=\"securitySchemeOpenIdConnectUrl\"></a>openIdConnectUrl</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><code>openIdConnect</code></td>\n<td><strong>REQUIRED</strong>. OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL. The OpenID Connect standard requires the use of TLS.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Applies To",
                                                                    "html": "Applies To"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "securitySchemeType",
                                                                    "values": [
                                                                        {
                                                                            "text": "type",
                                                                            "html": "<a name=\"securitySchemeType\"></a>type"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "Any",
                                                                            "html": "Any"
                                                                        },
                                                                        {
                                                                            "text": "REQUIRED. The type of the security scheme. Valid values are \"apiKey\", \"http\", \"mutualTLS\", \"oauth2\", \"openIdConnect\".",
                                                                            "html": "<strong>REQUIRED</strong>. The type of the security scheme. Valid values are <code>\"apiKey\"</code>, <code>\"http\"</code>, <code>\"mutualTLS\"</code>, <code>\"oauth2\"</code>, <code>\"openIdConnect\"</code>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "securitySchemeDescription",
                                                                    "values": [
                                                                        {
                                                                            "text": "description",
                                                                            "html": "<a name=\"securitySchemeDescription\"></a>description"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "Any",
                                                                            "html": "Any"
                                                                        },
                                                                        {
                                                                            "text": "A description for security scheme. CommonMark syntax MAY be used for rich text representation.",
                                                                            "html": "A description for security scheme. <a href=\"https://spec.commonmark.org/\">CommonMark syntax</a> MAY be used for rich text representation."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "securitySchemeName",
                                                                    "values": [
                                                                        {
                                                                            "text": "name",
                                                                            "html": "<a name=\"securitySchemeName\"></a>name"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "apiKey",
                                                                            "html": "<code>apiKey</code>"
                                                                        },
                                                                        {
                                                                            "text": "REQUIRED. The name of the header, query or cookie parameter to be used.",
                                                                            "html": "<strong>REQUIRED</strong>. The name of the header, query or cookie parameter to be used."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "securitySchemeIn",
                                                                    "values": [
                                                                        {
                                                                            "text": "in",
                                                                            "html": "<a name=\"securitySchemeIn\"></a>in"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "apiKey",
                                                                            "html": "<code>apiKey</code>"
                                                                        },
                                                                        {
                                                                            "text": "REQUIRED. The location of the API key. Valid values are \"query\", \"header\" or \"cookie\".",
                                                                            "html": "<strong>REQUIRED</strong>. The location of the API key. Valid values are <code>\"query\"</code>, <code>\"header\"</code> or <code>\"cookie\"</code>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "securitySchemeScheme",
                                                                    "values": [
                                                                        {
                                                                            "text": "scheme",
                                                                            "html": "<a name=\"securitySchemeScheme\"></a>scheme"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "http",
                                                                            "html": "<code>http</code>"
                                                                        },
                                                                        {
                                                                            "text": "REQUIRED. The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235.  The values used SHOULD be registered in the IANA Authentication Scheme registry.",
                                                                            "html": "<strong>REQUIRED</strong>. The name of the HTTP Authorization scheme to be used in the <a href=\"https://tools.ietf.org/html/rfc7235#section-5.1\">Authorization header as defined in RFC7235</a>.  The values used SHOULD be registered in the <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">IANA Authentication Scheme registry</a>."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "securitySchemeBearerFormat",
                                                                    "values": [
                                                                        {
                                                                            "text": "bearerFormat",
                                                                            "html": "<a name=\"securitySchemeBearerFormat\"></a>bearerFormat"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "http (\"bearer\")",
                                                                            "html": "<code>http</code> (<code>\"bearer\"</code>)"
                                                                        },
                                                                        {
                                                                            "text": "A hint to the client to identify how the bearer token is formatted.  Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.",
                                                                            "html": "A hint to the client to identify how the bearer token is formatted.  Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "securitySchemeFlows",
                                                                    "values": [
                                                                        {
                                                                            "text": "flows",
                                                                            "html": "<a name=\"securitySchemeFlows\"></a>flows"
                                                                        },
                                                                        {
                                                                            "text": "OAuth Flows Object",
                                                                            "html": "<a href=\"#oauthFlowsObject\">OAuth Flows Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "oauth2",
                                                                            "html": "<code>oauth2</code>"
                                                                        },
                                                                        {
                                                                            "text": "REQUIRED. An object containing configuration information for the flow types supported.",
                                                                            "html": "<strong>REQUIRED</strong>. An object containing configuration information for the flow types supported."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "securitySchemeOpenIdConnectUrl",
                                                                    "values": [
                                                                        {
                                                                            "text": "openIdConnectUrl",
                                                                            "html": "<a name=\"securitySchemeOpenIdConnectUrl\"></a>openIdConnectUrl"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "openIdConnect",
                                                                            "html": "<code>openIdConnect</code>"
                                                                        },
                                                                        {
                                                                            "text": "REQUIRED. OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL. The OpenID Connect standard requires the use of TLS.",
                                                                            "html": "<strong>REQUIRED</strong>. OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL. The OpenID Connect standard requires the use of TLS."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_23",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Security Scheme Object Example",
                                                "html": "<h5 id=\"security-scheme-object-example\">Security Scheme Object Example</h5>",
                                                "children": [
                                                    {
                                                        "type": "header",
                                                        "subType": null,
                                                        "level": 6,
                                                        "text": "Basic Authentication Sample",
                                                        "html": "<h6 id=\"basic-authentication-sample\">Basic Authentication Sample</h6>",
                                                        "children": [
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "{\n  \"type\": \"http\",\n  \"scheme\": \"basic\"\n}\n",
                                                                "html": "<pre><code class=\"language-json\">{\n  \"type\": \"http\",\n  \"scheme\": \"basic\"\n}\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "json",
                                                                    "text": "{\n  \"type\": \"http\",\n  \"scheme\": \"basic\"\n}\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "type: http\nscheme: basic\n",
                                                                "html": "<pre><code class=\"language-yaml\">type: http\nscheme: basic\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "yaml",
                                                                    "text": "type: http\nscheme: basic\n"
                                                                }
                                                            }
                                                        ],
                                                        "header": {
                                                            "level": 6,
                                                            "id": "basic-authentication-sample",
                                                            "anchor": null
                                                        }
                                                    },
                                                    {
                                                        "type": "header",
                                                        "subType": null,
                                                        "level": 6,
                                                        "text": "API Key Sample",
                                                        "html": "<h6 id=\"api-key-sample\">API Key Sample</h6>",
                                                        "children": [
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "{\n  \"type\": \"apiKey\",\n  \"name\": \"api_key\",\n  \"in\": \"header\"\n}\n",
                                                                "html": "<pre><code class=\"language-json\">{\n  \"type\": \"apiKey\",\n  \"name\": \"api_key\",\n  \"in\": \"header\"\n}\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "json",
                                                                    "text": "{\n  \"type\": \"apiKey\",\n  \"name\": \"api_key\",\n  \"in\": \"header\"\n}\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "type: apiKey\nname: api_key\nin: header\n",
                                                                "html": "<pre><code class=\"language-yaml\">type: apiKey\nname: api_key\nin: header\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "yaml",
                                                                    "text": "type: apiKey\nname: api_key\nin: header\n"
                                                                }
                                                            }
                                                        ],
                                                        "header": {
                                                            "level": 6,
                                                            "id": "api-key-sample",
                                                            "anchor": null
                                                        }
                                                    },
                                                    {
                                                        "type": "header",
                                                        "subType": null,
                                                        "level": 6,
                                                        "text": "JWT Bearer Sample",
                                                        "html": "<h6 id=\"jwt-bearer-sample\">JWT Bearer Sample</h6>",
                                                        "children": [
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "{\n  \"type\": \"http\",\n  \"scheme\": \"bearer\",\n  \"bearerFormat\": \"JWT\",\n}\n",
                                                                "html": "<pre><code class=\"language-json\">{\n  \"type\": \"http\",\n  \"scheme\": \"bearer\",\n  \"bearerFormat\": \"JWT\",\n}\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "json",
                                                                    "text": "{\n  \"type\": \"http\",\n  \"scheme\": \"bearer\",\n  \"bearerFormat\": \"JWT\",\n}\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "type: http\nscheme: bearer\nbearerFormat: JWT\n",
                                                                "html": "<pre><code class=\"language-yaml\">type: http\nscheme: bearer\nbearerFormat: JWT\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "yaml",
                                                                    "text": "type: http\nscheme: bearer\nbearerFormat: JWT\n"
                                                                }
                                                            }
                                                        ],
                                                        "header": {
                                                            "level": 6,
                                                            "id": "jwt-bearer-sample",
                                                            "anchor": null
                                                        }
                                                    },
                                                    {
                                                        "type": "header",
                                                        "subType": null,
                                                        "level": 6,
                                                        "text": "Implicit OAuth2 Sample",
                                                        "html": "<h6 id=\"implicit-oauth2-sample\">Implicit OAuth2 Sample</h6>",
                                                        "children": [
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\n",
                                                                "html": "<pre><code class=\"language-json\">{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "json",
                                                                    "text": "{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "type: oauth2\nflows: \n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n",
                                                                "html": "<pre><code class=\"language-yaml\">type: oauth2\nflows: \n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "yaml",
                                                                    "text": "type: oauth2\nflows: \n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n"
                                                                }
                                                            }
                                                        ],
                                                        "header": {
                                                            "level": 6,
                                                            "id": "implicit-oauth2-sample",
                                                            "anchor": null
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "security-scheme-object-example",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "security-scheme-object",
                                            "anchor": "securitySchemeObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "OAuth Flows Object",
                                        "html": "<h4 id=\"oauth-flows-object\"><a name=\"oauthFlowsObject\"></a>OAuth Flows Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "Allows configuration of the supported OAuth Flows.",
                                                "html": "<p>Allows configuration of the supported OAuth Flows.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_24\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nDescription\n\n\n\n\nimplicit\nOAuth Flow Object\nConfiguration for the OAuth Implicit flow\n\n\npassword\nOAuth Flow Object\nConfiguration for the OAuth Resource Owner Password flow\n\n\nclientCredentials\nOAuth Flow Object\nConfiguration for the OAuth Client Credentials flow.  Previously called application in OpenAPI 2.0.\n\n\nauthorizationCode\nOAuth Flow Object\nConfiguration for the OAuth Authorization Code flow.  Previously called accessCode in OpenAPI 2.0.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"oauthFlowsImplicit\"></a>implicit</td>\n<td style=\"text-align: center;\"><a href=\"#oauthFlowObject\">OAuth Flow Object</a></td>\n<td>Configuration for the OAuth Implicit flow</td>\n</tr>\n<tr>\n<td><a name=\"oauthFlowsPassword\"></a>password</td>\n<td style=\"text-align: center;\"><a href=\"#oauthFlowObject\">OAuth Flow Object</a></td>\n<td>Configuration for the OAuth Resource Owner Password flow</td>\n</tr>\n<tr>\n<td><a name=\"oauthFlowsClientCredentials\"></a>clientCredentials</td>\n<td style=\"text-align: center;\"><a href=\"#oauthFlowObject\">OAuth Flow Object</a></td>\n<td>Configuration for the OAuth Client Credentials flow.  Previously called <code>application</code> in OpenAPI 2.0.</td>\n</tr>\n<tr>\n<td><a name=\"oauthFlowsAuthorizationCode\"></a>authorizationCode</td>\n<td style=\"text-align: center;\"><a href=\"#oauthFlowObject\">OAuth Flow Object</a></td>\n<td>Configuration for the OAuth Authorization Code flow.  Previously called <code>accessCode</code> in OpenAPI 2.0.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "oauthFlowsImplicit",
                                                                    "values": [
                                                                        {
                                                                            "text": "implicit",
                                                                            "html": "<a name=\"oauthFlowsImplicit\"></a>implicit"
                                                                        },
                                                                        {
                                                                            "text": "OAuth Flow Object",
                                                                            "html": "<a href=\"#oauthFlowObject\">OAuth Flow Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "Configuration for the OAuth Implicit flow",
                                                                            "html": "Configuration for the OAuth Implicit flow"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "oauthFlowsPassword",
                                                                    "values": [
                                                                        {
                                                                            "text": "password",
                                                                            "html": "<a name=\"oauthFlowsPassword\"></a>password"
                                                                        },
                                                                        {
                                                                            "text": "OAuth Flow Object",
                                                                            "html": "<a href=\"#oauthFlowObject\">OAuth Flow Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "Configuration for the OAuth Resource Owner Password flow",
                                                                            "html": "Configuration for the OAuth Resource Owner Password flow"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "oauthFlowsClientCredentials",
                                                                    "values": [
                                                                        {
                                                                            "text": "clientCredentials",
                                                                            "html": "<a name=\"oauthFlowsClientCredentials\"></a>clientCredentials"
                                                                        },
                                                                        {
                                                                            "text": "OAuth Flow Object",
                                                                            "html": "<a href=\"#oauthFlowObject\">OAuth Flow Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "Configuration for the OAuth Client Credentials flow.  Previously called application in OpenAPI 2.0.",
                                                                            "html": "Configuration for the OAuth Client Credentials flow.  Previously called <code>application</code> in OpenAPI 2.0."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "oauthFlowsAuthorizationCode",
                                                                    "values": [
                                                                        {
                                                                            "text": "authorizationCode",
                                                                            "html": "<a name=\"oauthFlowsAuthorizationCode\"></a>authorizationCode"
                                                                        },
                                                                        {
                                                                            "text": "OAuth Flow Object",
                                                                            "html": "<a href=\"#oauthFlowObject\">OAuth Flow Object</a>"
                                                                        },
                                                                        {
                                                                            "text": "Configuration for the OAuth Authorization Code flow.  Previously called accessCode in OpenAPI 2.0.",
                                                                            "html": "Configuration for the OAuth Authorization Code flow.  Previously called <code>accessCode</code> in OpenAPI 2.0."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_24",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "oauth-flows-object",
                                            "anchor": "oauthFlowsObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "OAuth Flow Object",
                                        "html": "<h4 id=\"oauth-flow-object\"><a name=\"oauthFlowObject\"></a>OAuth Flow Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "Configuration details for a supported OAuth Flow",
                                                "html": "<p>Configuration details for a supported OAuth Flow</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Fixed Fields",
                                                "html": "<h5 id=\"fixed-fields_25\">Fixed Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Name\nType\nApplies To\nDescription\n\n\n\n\nauthorizationUrl\nstring\noauth2 (\"implicit\", \"authorizationCode\")\nREQUIRED. The authorization URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.\n\n\ntokenUrl\nstring\noauth2 (\"password\", \"clientCredentials\", \"authorizationCode\")\nREQUIRED. The token URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.\n\n\nrefreshUrl\nstring\noauth2\nThe URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.\n\n\nscopes\nMap[string, string]\noauth2\nREQUIRED. The available scopes for the OAuth2 security scheme. A map between the scope name and a short description for it. The map MAY be empty.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Applies To</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"oauthFlowAuthorizationUrl\"></a>authorizationUrl</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><code>oauth2</code> (<code>\"implicit\"</code>, <code>\"authorizationCode\"</code>)</td>\n<td><strong>REQUIRED</strong>. The authorization URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.</td>\n</tr>\n<tr>\n<td><a name=\"oauthFlowTokenUrl\"></a>tokenUrl</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><code>oauth2</code> (<code>\"password\"</code>, <code>\"clientCredentials\"</code>, <code>\"authorizationCode\"</code>)</td>\n<td><strong>REQUIRED</strong>. The token URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.</td>\n</tr>\n<tr>\n<td><a name=\"oauthFlowRefreshUrl\"></a>refreshUrl</td>\n<td style=\"text-align: center;\"><code>string</code></td>\n<td><code>oauth2</code></td>\n<td>The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.</td>\n</tr>\n<tr>\n<td><a name=\"oauthFlowScopes\"></a>scopes</td>\n<td style=\"text-align: center;\">Map[<code>string</code>, <code>string</code>]</td>\n<td><code>oauth2</code></td>\n<td><strong>REQUIRED</strong>. The available scopes for the OAuth2 security scheme. A map between the scope name and a short description for it. The map MAY be empty.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Name",
                                                                    "html": "Field Name"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Applies To",
                                                                    "html": "Applies To"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "oauthFlowAuthorizationUrl",
                                                                    "values": [
                                                                        {
                                                                            "text": "authorizationUrl",
                                                                            "html": "<a name=\"oauthFlowAuthorizationUrl\"></a>authorizationUrl"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "oauth2 (\"implicit\", \"authorizationCode\")",
                                                                            "html": "<code>oauth2</code> (<code>\"implicit\"</code>, <code>\"authorizationCode\"</code>)"
                                                                        },
                                                                        {
                                                                            "text": "REQUIRED. The authorization URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.",
                                                                            "html": "<strong>REQUIRED</strong>. The authorization URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "oauthFlowTokenUrl",
                                                                    "values": [
                                                                        {
                                                                            "text": "tokenUrl",
                                                                            "html": "<a name=\"oauthFlowTokenUrl\"></a>tokenUrl"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "oauth2 (\"password\", \"clientCredentials\", \"authorizationCode\")",
                                                                            "html": "<code>oauth2</code> (<code>\"password\"</code>, <code>\"clientCredentials\"</code>, <code>\"authorizationCode\"</code>)"
                                                                        },
                                                                        {
                                                                            "text": "REQUIRED. The token URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.",
                                                                            "html": "<strong>REQUIRED</strong>. The token URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "oauthFlowRefreshUrl",
                                                                    "values": [
                                                                        {
                                                                            "text": "refreshUrl",
                                                                            "html": "<a name=\"oauthFlowRefreshUrl\"></a>refreshUrl"
                                                                        },
                                                                        {
                                                                            "text": "string",
                                                                            "html": "<code>string</code>"
                                                                        },
                                                                        {
                                                                            "text": "oauth2",
                                                                            "html": "<code>oauth2</code>"
                                                                        },
                                                                        {
                                                                            "text": "The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.",
                                                                            "html": "The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS."
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "anchor": "oauthFlowScopes",
                                                                    "values": [
                                                                        {
                                                                            "text": "scopes",
                                                                            "html": "<a name=\"oauthFlowScopes\"></a>scopes"
                                                                        },
                                                                        {
                                                                            "text": "Map[string, string]",
                                                                            "html": "Map[<code>string</code>, <code>string</code>]"
                                                                        },
                                                                        {
                                                                            "text": "oauth2",
                                                                            "html": "<code>oauth2</code>"
                                                                        },
                                                                        {
                                                                            "text": "REQUIRED. The available scopes for the OAuth2 security scheme. A map between the scope name and a short description for it. The map MAY be empty.",
                                                                            "html": "<strong>REQUIRED</strong>. The available scopes for the OAuth2 security scheme. A map between the scope name and a short description for it. The map MAY be empty."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "text",
                                                        "level": null,
                                                        "text": "This object MAY be extended with Specification Extensions.",
                                                        "html": "<p>This object MAY be extended with <a href=\"#specificationExtensions\">Specification Extensions</a>.</p>",
                                                        "children": []
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "fixed-fields_25",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "OAuth Flow Object Examples",
                                                "html": "<h5 id=\"oauth-flow-object-examples\">OAuth Flow Object Examples</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    },\n    \"authorizationCode\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"tokenUrl\": \"https://example.com/api/oauth/token\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\n",
                                                        "html": "<pre><code class=\"language-JSON\">{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    },\n    \"authorizationCode\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"tokenUrl\": \"https://example.com/api/oauth/token\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "JSON",
                                                            "text": "{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    },\n    \"authorizationCode\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"tokenUrl\": \"https://example.com/api/oauth/token\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\n"
                                                        }
                                                    },
                                                    {
                                                        "type": "content",
                                                        "subType": "code",
                                                        "level": null,
                                                        "text": "type: oauth2\nflows: \n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n  authorizationCode:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    tokenUrl: https://example.com/api/oauth/token\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets \n",
                                                        "html": "<pre><code class=\"language-yaml\">type: oauth2\nflows: \n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n  authorizationCode:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    tokenUrl: https://example.com/api/oauth/token\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets \n</code></pre>",
                                                        "children": [],
                                                        "code": {
                                                            "language": "yaml",
                                                            "text": "type: oauth2\nflows: \n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n  authorizationCode:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    tokenUrl: https://example.com/api/oauth/token\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets \n"
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "oauth-flow-object-examples",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "oauth-flow-object",
                                            "anchor": "oauthFlowObject"
                                        }
                                    },
                                    {
                                        "type": "header",
                                        "subType": null,
                                        "level": 4,
                                        "text": "Security Requirement Object",
                                        "html": "<h4 id=\"security-requirement-object\"><a name=\"securityRequirementObject\"></a>Security Requirement Object</h4>",
                                        "children": [
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "Lists the required security schemes to execute this operation.\nThe name used for each property MUST correspond to a security scheme declared in the Security Schemes under the Components Object.",
                                                "html": "<p>Lists the required security schemes to execute this operation.\nThe name used for each property MUST correspond to a security scheme declared in the <a href=\"#componentsSecuritySchemes\">Security Schemes</a> under the <a href=\"#componentsObject\">Components Object</a>.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "Security Requirement Objects that contain multiple schemes require that all schemes MUST be satisfied for a request to be authorized.\nThis enables support for scenarios where multiple query parameters or HTTP headers are required to convey security information.",
                                                "html": "<p>Security Requirement Objects that contain multiple schemes require that all schemes MUST be satisfied for a request to be authorized.\nThis enables support for scenarios where multiple query parameters or HTTP headers are required to convey security information.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "content",
                                                "subType": "text",
                                                "level": null,
                                                "text": "When a list of Security Requirement Objects is defined on the OpenAPI Object or Operation Object, only one of the Security Requirement Objects in the list needs to be satisfied to authorize the request.",
                                                "html": "<p>When a list of Security Requirement Objects is defined on the <a href=\"#oasObject\">OpenAPI Object</a> or <a href=\"#operationObject\">Operation Object</a>, only one of the Security Requirement Objects in the list needs to be satisfied to authorize the request.</p>",
                                                "children": []
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Patterned Fields",
                                                "html": "<h5 id=\"patterned-fields_3\">Patterned Fields</h5>",
                                                "children": [
                                                    {
                                                        "type": "content",
                                                        "subType": "table",
                                                        "level": null,
                                                        "text": "\n\n\nField Pattern\nType\nDescription\n\n\n\n\n{name}\n[string]\nEach name MUST correspond to a security scheme which is declared in the Security Schemes under the Components Object. If the security scheme is of type \"oauth2\" or \"openIdConnect\", then the value is a list of scope names required for the execution, and the list MAY be empty if authorization does not require a specified scope. For other security scheme types, the array MAY contain a list of role names which are required for the execution, but are not otherwise defined or exchanged in-band.\n\n\n",
                                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Pattern</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"securityRequirementsName\"></a>{name}</td>\n<td style=\"text-align: center;\">[<code>string</code>]</td>\n<td>Each name MUST correspond to a security scheme which is declared in the <a href=\"#componentsSecuritySchemes\">Security Schemes</a> under the <a href=\"#componentsObject\">Components Object</a>. If the security scheme is of type <code>\"oauth2\"</code> or <code>\"openIdConnect\"</code>, then the value is a list of scope names required for the execution, and the list MAY be empty if authorization does not require a specified scope. For other security scheme types, the array MAY contain a list of role names which are required for the execution, but are not otherwise defined or exchanged in-band.</td>\n</tr>\n</tbody>\n</table>",
                                                        "children": [],
                                                        "table": {
                                                            "headers": [
                                                                {
                                                                    "text": "Field Pattern",
                                                                    "html": "Field Pattern"
                                                                },
                                                                {
                                                                    "text": "Type",
                                                                    "html": "Type"
                                                                },
                                                                {
                                                                    "text": "Description",
                                                                    "html": "Description"
                                                                }
                                                            ],
                                                            "lines": [
                                                                {
                                                                    "anchor": "securityRequirementsName",
                                                                    "values": [
                                                                        {
                                                                            "text": "{name}",
                                                                            "html": "<a name=\"securityRequirementsName\"></a>{name}"
                                                                        },
                                                                        {
                                                                            "text": "[string]",
                                                                            "html": "[<code>string</code>]"
                                                                        },
                                                                        {
                                                                            "text": "Each name MUST correspond to a security scheme which is declared in the Security Schemes under the Components Object. If the security scheme is of type \"oauth2\" or \"openIdConnect\", then the value is a list of scope names required for the execution, and the list MAY be empty if authorization does not require a specified scope. For other security scheme types, the array MAY contain a list of role names which are required for the execution, but are not otherwise defined or exchanged in-band.",
                                                                            "html": "Each name MUST correspond to a security scheme which is declared in the <a href=\"#componentsSecuritySchemes\">Security Schemes</a> under the <a href=\"#componentsObject\">Components Object</a>. If the security scheme is of type <code>\"oauth2\"</code> or <code>\"openIdConnect\"</code>, then the value is a list of scope names required for the execution, and the list MAY be empty if authorization does not require a specified scope. For other security scheme types, the array MAY contain a list of role names which are required for the execution, but are not otherwise defined or exchanged in-band."
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "patterned-fields_3",
                                                    "anchor": null
                                                }
                                            },
                                            {
                                                "type": "header",
                                                "subType": null,
                                                "level": 5,
                                                "text": "Security Requirement Object Examples",
                                                "html": "<h5 id=\"security-requirement-object-examples\">Security Requirement Object Examples</h5>",
                                                "children": [
                                                    {
                                                        "type": "header",
                                                        "subType": null,
                                                        "level": 6,
                                                        "text": "Non-OAuth2 Security Requirement",
                                                        "html": "<h6 id=\"non-oauth2-security-requirement\">Non-OAuth2 Security Requirement</h6>",
                                                        "children": [
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "{\n  \"api_key\": []\n}\n",
                                                                "html": "<pre><code class=\"language-json\">{\n  \"api_key\": []\n}\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "json",
                                                                    "text": "{\n  \"api_key\": []\n}\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "api_key: []\n",
                                                                "html": "<pre><code class=\"language-yaml\">api_key: []\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "yaml",
                                                                    "text": "api_key: []\n"
                                                                }
                                                            }
                                                        ],
                                                        "header": {
                                                            "level": 6,
                                                            "id": "non-oauth2-security-requirement",
                                                            "anchor": null
                                                        }
                                                    },
                                                    {
                                                        "type": "header",
                                                        "subType": null,
                                                        "level": 6,
                                                        "text": "OAuth2 Security Requirement",
                                                        "html": "<h6 id=\"oauth2-security-requirement\">OAuth2 Security Requirement</h6>",
                                                        "children": [
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "{\n  \"petstore_auth\": [\n    \"write:pets\",\n    \"read:pets\"\n  ]\n}\n",
                                                                "html": "<pre><code class=\"language-json\">{\n  \"petstore_auth\": [\n    \"write:pets\",\n    \"read:pets\"\n  ]\n}\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "json",
                                                                    "text": "{\n  \"petstore_auth\": [\n    \"write:pets\",\n    \"read:pets\"\n  ]\n}\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "petstore_auth:\n- write:pets\n- read:pets\n",
                                                                "html": "<pre><code class=\"language-yaml\">petstore_auth:\n- write:pets\n- read:pets\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "yaml",
                                                                    "text": "petstore_auth:\n- write:pets\n- read:pets\n"
                                                                }
                                                            }
                                                        ],
                                                        "header": {
                                                            "level": 6,
                                                            "id": "oauth2-security-requirement",
                                                            "anchor": null
                                                        }
                                                    },
                                                    {
                                                        "type": "header",
                                                        "subType": null,
                                                        "level": 6,
                                                        "text": "Optional OAuth2 Security",
                                                        "html": "<h6 id=\"optional-oauth2-security\">Optional OAuth2 Security</h6>",
                                                        "children": [
                                                            {
                                                                "type": "content",
                                                                "subType": "text",
                                                                "level": null,
                                                                "text": "Optional OAuth2 security as would be defined in an OpenAPI Object or an Operation Object:",
                                                                "html": "<p>Optional OAuth2 security as would be defined in an <a href=\"#openapi-object\">OpenAPI Object</a> or an <a href=\"#operation-object\">Operation Object</a>:</p>",
                                                                "children": []
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "{\n  \"security\": [\n    {},\n    {\n      \"petstore_auth\": [\n        \"write:pets\",\n        \"read:pets\"\n      ]\n    }\n  ]\n}\n",
                                                                "html": "<pre><code class=\"language-json\">{\n  \"security\": [\n    {},\n    {\n      \"petstore_auth\": [\n        \"write:pets\",\n        \"read:pets\"\n      ]\n    }\n  ]\n}\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "json",
                                                                    "text": "{\n  \"security\": [\n    {},\n    {\n      \"petstore_auth\": [\n        \"write:pets\",\n        \"read:pets\"\n      ]\n    }\n  ]\n}\n"
                                                                }
                                                            },
                                                            {
                                                                "type": "content",
                                                                "subType": "code",
                                                                "level": null,
                                                                "text": "security:\n  - {}\n  - petstore_auth:\n    - write:pets\n    - read:pets\n",
                                                                "html": "<pre><code class=\"language-yaml\">security:\n  - {}\n  - petstore_auth:\n    - write:pets\n    - read:pets\n</code></pre>",
                                                                "children": [],
                                                                "code": {
                                                                    "language": "yaml",
                                                                    "text": "security:\n  - {}\n  - petstore_auth:\n    - write:pets\n    - read:pets\n"
                                                                }
                                                            }
                                                        ],
                                                        "header": {
                                                            "level": 6,
                                                            "id": "optional-oauth2-security",
                                                            "anchor": null
                                                        }
                                                    }
                                                ],
                                                "header": {
                                                    "level": 5,
                                                    "id": "security-requirement-object-examples",
                                                    "anchor": null
                                                }
                                            }
                                        ],
                                        "header": {
                                            "level": 4,
                                            "id": "security-requirement-object",
                                            "anchor": "securityRequirementObject"
                                        }
                                    }
                                ],
                                "header": {
                                    "level": 3,
                                    "id": "schema",
                                    "anchor": null
                                }
                            },
                            {
                                "type": "header",
                                "subType": null,
                                "level": 3,
                                "text": "Specification Extensions",
                                "html": "<h3 id=\"specification-extensions\"><a name=\"specificationExtensions\"></a>Specification Extensions</h3>",
                                "children": [
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "While the OpenAPI Specification tries to accommodate most use cases, additional data can be added to extend the specification at certain points.",
                                        "html": "<p>While the OpenAPI Specification tries to accommodate most use cases, additional data can be added to extend the specification at certain points.</p>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "The extensions properties are implemented as patterned fields that are always prefixed by \"x-\".",
                                        "html": "<p>The extensions properties are implemented as patterned fields that are always prefixed by <code>\"x-\"</code>.</p>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "table",
                                        "level": null,
                                        "text": "\n\n\nField Pattern\nType\nDescription\n\n\n\n\n^x-\nAny\nAllows extensions to the OpenAPI Schema. The field name MUST begin with x-, for example, x-internal-id. Field names beginning x-oai- and x-oas- are reserved for uses defined by the OpenAPI Initiative. The value can be null, a primitive, an array or an object.\n\n\n",
                                        "html": "<table>\n<thead>\n<tr>\n<th>Field Pattern</th>\n<th style=\"text-align: center;\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a name=\"infoExtensions\"></a>^x-</td>\n<td style=\"text-align: center;\">Any</td>\n<td>Allows extensions to the OpenAPI Schema. The field name MUST begin with <code>x-</code>, for example, <code>x-internal-id</code>. Field names beginning <code>x-oai-</code> and <code>x-oas-</code> are reserved for uses defined by the <a href=\"https://www.openapis.org/\">OpenAPI Initiative</a>. The value can be <code>null</code>, a primitive, an array or an object.</td>\n</tr>\n</tbody>\n</table>",
                                        "children": [],
                                        "table": {
                                            "headers": [
                                                {
                                                    "text": "Field Pattern",
                                                    "html": "Field Pattern"
                                                },
                                                {
                                                    "text": "Type",
                                                    "html": "Type"
                                                },
                                                {
                                                    "text": "Description",
                                                    "html": "Description"
                                                }
                                            ],
                                            "lines": [
                                                {
                                                    "anchor": "infoExtensions",
                                                    "values": [
                                                        {
                                                            "text": "^x-",
                                                            "html": "<a name=\"infoExtensions\"></a>^x-"
                                                        },
                                                        {
                                                            "text": "Any",
                                                            "html": "Any"
                                                        },
                                                        {
                                                            "text": "Allows extensions to the OpenAPI Schema. The field name MUST begin with x-, for example, x-internal-id. Field names beginning x-oai- and x-oas- are reserved for uses defined by the OpenAPI Initiative. The value can be null, a primitive, an array or an object.",
                                                            "html": "Allows extensions to the OpenAPI Schema. The field name MUST begin with <code>x-</code>, for example, <code>x-internal-id</code>. Field names beginning <code>x-oai-</code> and <code>x-oas-</code> are reserved for uses defined by the <a href=\"https://www.openapis.org/\">OpenAPI Initiative</a>. The value can be <code>null</code>, a primitive, an array or an object."
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "The extensions may or may not be supported by the available tooling, but those may be extended as well to add requested support (if tools are internal or open-sourced).",
                                        "html": "<p>The extensions may or may not be supported by the available tooling, but those may be extended as well to add requested support (if tools are internal or open-sourced).</p>",
                                        "children": []
                                    }
                                ],
                                "header": {
                                    "level": 3,
                                    "id": "specification-extensions",
                                    "anchor": "specificationExtensions"
                                }
                            },
                            {
                                "type": "header",
                                "subType": null,
                                "level": 3,
                                "text": "Security Filtering",
                                "html": "<h3 id=\"security-filtering\"><a name=\"securityFiltering\"></a>Security Filtering</h3>",
                                "children": [
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "Some objects in the OpenAPI Specification MAY be declared and remain empty, or be completely removed, even though they are inherently the core of the API documentation. ",
                                        "html": "<p>Some objects in the OpenAPI Specification MAY be declared and remain empty, or be completely removed, even though they are inherently the core of the API documentation. </p>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "The reasoning is to allow an additional layer of access control over the documentation.\nWhile not part of the specification itself, certain libraries MAY choose to allow access to parts of the documentation based on some form of authentication/authorization.",
                                        "html": "<p>The reasoning is to allow an additional layer of access control over the documentation.\nWhile not part of the specification itself, certain libraries MAY choose to allow access to parts of the documentation based on some form of authentication/authorization.</p>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "Two examples of this:",
                                        "html": "<p>Two examples of this:</p>",
                                        "children": []
                                    },
                                    {
                                        "type": "content",
                                        "subType": "text",
                                        "level": null,
                                        "text": "\nThe Paths Object MAY be present but empty. It may be counterintuitive, but this may tell the viewer that they got to the right place, but can't access any documentation. They would still have access to at least the Info Object which may contain additional information regarding authentication.\nThe Path Item Object MAY be empty. In this case, the viewer will be aware that the path exists, but will not be able to see any of its operations or parameters. This is different from hiding the path itself from the Paths Object, because the user will be aware of its existence. This allows the documentation provider to finely control what the viewer can see.\n",
                                        "html": "<ol>\n<li>The <a href=\"#pathsObject\">Paths Object</a> MAY be present but empty. It may be counterintuitive, but this may tell the viewer that they got to the right place, but can't access any documentation. They would still have access to at least the <a href=\"#infoObject\">Info Object</a> which may contain additional information regarding authentication.</li>\n<li>The <a href=\"#pathItemObject\">Path Item Object</a> MAY be empty. In this case, the viewer will be aware that the path exists, but will not be able to see any of its operations or parameters. This is different from hiding the path itself from the <a href=\"#pathsObject\">Paths Object</a>, because the user will be aware of its existence. This allows the documentation provider to finely control what the viewer can see.</li>\n</ol>",
                                        "children": []
                                    }
                                ],
                                "header": {
                                    "level": 3,
                                    "id": "security-filtering",
                                    "anchor": "securityFiltering"
                                }
                            }
                        ],
                        "header": {
                            "level": 2,
                            "id": "specification",
                            "anchor": null
                        }
                    },
                    {
                        "type": "header",
                        "subType": null,
                        "level": 2,
                        "text": "Appendix A: Revision History",
                        "html": "<h2 id=\"appendix-a-revision-history\"><a name=\"revisionHistory\"></a>Appendix A: Revision History</h2>",
                        "children": [
                            {
                                "type": "content",
                                "subType": "table",
                                "level": null,
                                "text": "\n\n\nVersion\nDate\nNotes\n\n\n\n\n3.1.0\n2021-02-15\nRelease of the OpenAPI Specification 3.1.0\n\n\n3.1.0-rc1\n2020-10-08\nrc1 of the 3.1 specification\n\n\n3.1.0-rc0\n2020-06-18\nrc0 of the 3.1 specification\n\n\n3.0.3\n2020-02-20\nPatch release of the OpenAPI Specification 3.0.3\n\n\n3.0.2\n2018-10-08\nPatch release of the OpenAPI Specification 3.0.2\n\n\n3.0.1\n2017-12-06\nPatch release of the OpenAPI Specification 3.0.1\n\n\n3.0.0\n2017-07-26\nRelease of the OpenAPI Specification 3.0.0\n\n\n3.0.0-rc2\n2017-06-16\nrc2 of the 3.0 specification\n\n\n3.0.0-rc1\n2017-04-27\nrc1 of the 3.0 specification\n\n\n3.0.0-rc0\n2017-02-28\nImplementer's Draft of the 3.0 specification\n\n\n2.0\n2015-12-31\nDonation of Swagger 2.0 to the OpenAPI Initiative\n\n\n2.0\n2014-09-08\nRelease of Swagger 2.0\n\n\n1.2\n2014-03-14\nInitial release of the formal document.\n\n\n1.1\n2012-08-22\nRelease of Swagger 1.1\n\n\n1.0\n2011-08-10\nFirst release of the Swagger Specification\n\n\n",
                                "html": "<table>\n<thead>\n<tr>\n<th>Version</th>\n<th>Date</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3.1.0</td>\n<td>2021-02-15</td>\n<td>Release of the OpenAPI Specification 3.1.0</td>\n</tr>\n<tr>\n<td>3.1.0-rc1</td>\n<td>2020-10-08</td>\n<td>rc1 of the 3.1 specification</td>\n</tr>\n<tr>\n<td>3.1.0-rc0</td>\n<td>2020-06-18</td>\n<td>rc0 of the 3.1 specification</td>\n</tr>\n<tr>\n<td>3.0.3</td>\n<td>2020-02-20</td>\n<td>Patch release of the OpenAPI Specification 3.0.3</td>\n</tr>\n<tr>\n<td>3.0.2</td>\n<td>2018-10-08</td>\n<td>Patch release of the OpenAPI Specification 3.0.2</td>\n</tr>\n<tr>\n<td>3.0.1</td>\n<td>2017-12-06</td>\n<td>Patch release of the OpenAPI Specification 3.0.1</td>\n</tr>\n<tr>\n<td>3.0.0</td>\n<td>2017-07-26</td>\n<td>Release of the OpenAPI Specification 3.0.0</td>\n</tr>\n<tr>\n<td>3.0.0-rc2</td>\n<td>2017-06-16</td>\n<td>rc2 of the 3.0 specification</td>\n</tr>\n<tr>\n<td>3.0.0-rc1</td>\n<td>2017-04-27</td>\n<td>rc1 of the 3.0 specification</td>\n</tr>\n<tr>\n<td>3.0.0-rc0</td>\n<td>2017-02-28</td>\n<td>Implementer's Draft of the 3.0 specification</td>\n</tr>\n<tr>\n<td>2.0</td>\n<td>2015-12-31</td>\n<td>Donation of Swagger 2.0 to the OpenAPI Initiative</td>\n</tr>\n<tr>\n<td>2.0</td>\n<td>2014-09-08</td>\n<td>Release of Swagger 2.0</td>\n</tr>\n<tr>\n<td>1.2</td>\n<td>2014-03-14</td>\n<td>Initial release of the formal document.</td>\n</tr>\n<tr>\n<td>1.1</td>\n<td>2012-08-22</td>\n<td>Release of Swagger 1.1</td>\n</tr>\n<tr>\n<td>1.0</td>\n<td>2011-08-10</td>\n<td>First release of the Swagger Specification</td>\n</tr>\n</tbody>\n</table>",
                                "children": [],
                                "table": {
                                    "headers": [
                                        {
                                            "text": "Version",
                                            "html": "Version"
                                        },
                                        {
                                            "text": "Date",
                                            "html": "Date"
                                        },
                                        {
                                            "text": "Notes",
                                            "html": "Notes"
                                        }
                                    ],
                                    "lines": [
                                        {
                                            "anchor": null,
                                            "values": [
                                                {
                                                    "text": "3.1.0",
                                                    "html": "3.1.0"
                                                },
                                                {
                                                    "text": "2021-02-15",
                                                    "html": "2021-02-15"
                                                },
                                                {
                                                    "text": "Release of the OpenAPI Specification 3.1.0",
                                                    "html": "Release of the OpenAPI Specification 3.1.0"
                                                }
                                            ]
                                        },
                                        {
                                            "anchor": null,
                                            "values": [
                                                {
                                                    "text": "3.1.0-rc1",
                                                    "html": "3.1.0-rc1"
                                                },
                                                {
                                                    "text": "2020-10-08",
                                                    "html": "2020-10-08"
                                                },
                                                {
                                                    "text": "rc1 of the 3.1 specification",
                                                    "html": "rc1 of the 3.1 specification"
                                                }
                                            ]
                                        },
                                        {
                                            "anchor": null,
                                            "values": [
                                                {
                                                    "text": "3.1.0-rc0",
                                                    "html": "3.1.0-rc0"
                                                },
                                                {
                                                    "text": "2020-06-18",
                                                    "html": "2020-06-18"
                                                },
                                                {
                                                    "text": "rc0 of the 3.1 specification",
                                                    "html": "rc0 of the 3.1 specification"
                                                }
                                            ]
                                        },
                                        {
                                            "anchor": null,
                                            "values": [
                                                {
                                                    "text": "3.0.3",
                                                    "html": "3.0.3"
                                                },
                                                {
                                                    "text": "2020-02-20",
                                                    "html": "2020-02-20"
                                                },
                                                {
                                                    "text": "Patch release of the OpenAPI Specification 3.0.3",
                                                    "html": "Patch release of the OpenAPI Specification 3.0.3"
                                                }
                                            ]
                                        },
                                        {
                                            "anchor": null,
                                            "values": [
                                                {
                                                    "text": "3.0.2",
                                                    "html": "3.0.2"
                                                },
                                                {
                                                    "text": "2018-10-08",
                                                    "html": "2018-10-08"
                                                },
                                                {
                                                    "text": "Patch release of the OpenAPI Specification 3.0.2",
                                                    "html": "Patch release of the OpenAPI Specification 3.0.2"
                                                }
                                            ]
                                        },
                                        {
                                            "anchor": null,
                                            "values": [
                                                {
                                                    "text": "3.0.1",
                                                    "html": "3.0.1"
                                                },
                                                {
                                                    "text": "2017-12-06",
                                                    "html": "2017-12-06"
                                                },
                                                {
                                                    "text": "Patch release of the OpenAPI Specification 3.0.1",
                                                    "html": "Patch release of the OpenAPI Specification 3.0.1"
                                                }
                                            ]
                                        },
                                        {
                                            "anchor": null,
                                            "values": [
                                                {
                                                    "text": "3.0.0",
                                                    "html": "3.0.0"
                                                },
                                                {
                                                    "text": "2017-07-26",
                                                    "html": "2017-07-26"
                                                },
                                                {
                                                    "text": "Release of the OpenAPI Specification 3.0.0",
                                                    "html": "Release of the OpenAPI Specification 3.0.0"
                                                }
                                            ]
                                        },
                                        {
                                            "anchor": null,
                                            "values": [
                                                {
                                                    "text": "3.0.0-rc2",
                                                    "html": "3.0.0-rc2"
                                                },
                                                {
                                                    "text": "2017-06-16",
                                                    "html": "2017-06-16"
                                                },
                                                {
                                                    "text": "rc2 of the 3.0 specification",
                                                    "html": "rc2 of the 3.0 specification"
                                                }
                                            ]
                                        },
                                        {
                                            "anchor": null,
                                            "values": [
                                                {
                                                    "text": "3.0.0-rc1",
                                                    "html": "3.0.0-rc1"
                                                },
                                                {
                                                    "text": "2017-04-27",
                                                    "html": "2017-04-27"
                                                },
                                                {
                                                    "text": "rc1 of the 3.0 specification",
                                                    "html": "rc1 of the 3.0 specification"
                                                }
                                            ]
                                        },
                                        {
                                            "anchor": null,
                                            "values": [
                                                {
                                                    "text": "3.0.0-rc0",
                                                    "html": "3.0.0-rc0"
                                                },
                                                {
                                                    "text": "2017-02-28",
                                                    "html": "2017-02-28"
                                                },
                                                {
                                                    "text": "Implementer's Draft of the 3.0 specification",
                                                    "html": "Implementer's Draft of the 3.0 specification"
                                                }
                                            ]
                                        },
                                        {
                                            "anchor": null,
                                            "values": [
                                                {
                                                    "text": "2.0",
                                                    "html": "2.0"
                                                },
                                                {
                                                    "text": "2015-12-31",
                                                    "html": "2015-12-31"
                                                },
                                                {
                                                    "text": "Donation of Swagger 2.0 to the OpenAPI Initiative",
                                                    "html": "Donation of Swagger 2.0 to the OpenAPI Initiative"
                                                }
                                            ]
                                        },
                                        {
                                            "anchor": null,
                                            "values": [
                                                {
                                                    "text": "2.0",
                                                    "html": "2.0"
                                                },
                                                {
                                                    "text": "2014-09-08",
                                                    "html": "2014-09-08"
                                                },
                                                {
                                                    "text": "Release of Swagger 2.0",
                                                    "html": "Release of Swagger 2.0"
                                                }
                                            ]
                                        },
                                        {
                                            "anchor": null,
                                            "values": [
                                                {
                                                    "text": "1.2",
                                                    "html": "1.2"
                                                },
                                                {
                                                    "text": "2014-03-14",
                                                    "html": "2014-03-14"
                                                },
                                                {
                                                    "text": "Initial release of the formal document.",
                                                    "html": "Initial release of the formal document."
                                                }
                                            ]
                                        },
                                        {
                                            "anchor": null,
                                            "values": [
                                                {
                                                    "text": "1.1",
                                                    "html": "1.1"
                                                },
                                                {
                                                    "text": "2012-08-22",
                                                    "html": "2012-08-22"
                                                },
                                                {
                                                    "text": "Release of Swagger 1.1",
                                                    "html": "Release of Swagger 1.1"
                                                }
                                            ]
                                        },
                                        {
                                            "anchor": null,
                                            "values": [
                                                {
                                                    "text": "1.0",
                                                    "html": "1.0"
                                                },
                                                {
                                                    "text": "2011-08-10",
                                                    "html": "2011-08-10"
                                                },
                                                {
                                                    "text": "First release of the Swagger Specification",
                                                    "html": "First release of the Swagger Specification"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            }
                        ],
                        "header": {
                            "level": 2,
                            "id": "appendix-a-revision-history",
                            "anchor": "revisionHistory"
                        }
                    }
                ],
                "header": {
                    "level": 1,
                    "id": "openapi-specification",
                    "anchor": null
                }
            }
        ]
    }
}
