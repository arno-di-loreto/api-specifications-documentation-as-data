classDiagram
  class Swagger:::Swagger {
    string swagger
    Info info
    string host
    string basePath
    array~string~ schemes
    array~string~ consumes
    array~string~ produces
    Paths paths
    Definitions definitions
    ParametersDefinitions parameters
    ResponsesDefinitions responses
    SecurityDefinitions securityDefinitions
    array~SecurityRequirement~ security
    array~Tag~ tags
    ExternalDocumentation externalDocs
    Any ^x-
  }
  Swagger *-- Info : Swagger.info
  Swagger *-- Paths : Swagger.paths
  Swagger *-- Definitions : Swagger.definitions
  Swagger *-- ParametersDefinitions : Swagger.parameters
  Swagger *-- ResponsesDefinitions : Swagger.responses
  Swagger *-- SecurityDefinitions : Swagger.securityDefinitions
  Swagger *-- SecurityRequirement : Swagger.security
  Swagger *-- Tag : Swagger.tags
  Swagger *-- ExternalDocumentation : Swagger.externalDocs

  class Info:::Info {
    string title
    string description
    string termsOfService
    Contact contact
    License license
    string version
    Any ^x-
  }
  Info *-- Contact : Info.contact
  Info *-- License : Info.license

  class Contact:::Contact {
    string name
    string url
    string email
    Any ^x-
  }

  class License:::License {
    string name
    string url
    Any ^x-
  }

  class Paths:::Paths {
    PathItem /path
    Any ^x-
  }
  Paths *-- PathItem : Paths./path

  class PathItem:::PathItem {
    string $ref
    Operation get
    Operation put
    Operation post
    Operation delete
    Operation options
    Operation head
    Operation patch
    array~ParameterðŸ”—~ parameters
    Any ^x-
  }
  PathItem *-- Operation : PathItem.get
  PathItem *-- Operation : PathItem.put
  PathItem *-- Operation : PathItem.post
  PathItem *-- Operation : PathItem.delete
  PathItem *-- Operation : PathItem.options
  PathItem *-- Operation : PathItem.head
  PathItem *-- Operation : PathItem.patch
  PathItem *-- Parameter : PathItem.parameters

  class Operation:::Operation {
    array~string~ tags
    string summary
    string description
    ExternalDocumentation externalDocs
    string operationId
    array~string~ consumes
    array~string~ produces
    array~ParameterðŸ”—~ parameters
    Responses responses
    array~string~ schemes
    boolean deprecated
    array~SecurityRequirement~ security
    Any ^x-
  }
  Operation *-- ExternalDocumentation : Operation.externalDocs
  Operation *-- Parameter : Operation.parameters
  Operation *-- Responses : Operation.responses
  Operation *-- SecurityRequirement : Operation.security

  class ExternalDocumentation:::ExternalDocumentation {
    string description
    string url
    Any ^x-
  }

  class Parameter:::Parameter {
    string name
    string in
    string description
    boolean required
    Schema schema
    string type
    string format
    boolean allowEmptyValue
    Items items
    string collectionFormat
    Any default
    number maximum
    boolean exclusiveMaximum
    number minimum
    boolean exclusiveMinimum
    integer maxLength
    integer minLength
    string pattern
    integer maxItems
    integer minItems
    boolean uniqueItems
    array~Any~ enum
    number multipleOf
    Any ^x-
  }
  Parameter *-- Schema : Parameter.schema
  Parameter *-- Items : Parameter.items

  class Items:::Items {
    string type
    string format
    Items items
    string collectionFormat
    Any default
    number maximum
    boolean exclusiveMaximum
    number minimum
    boolean exclusiveMinimum
    integer maxLength
    integer minLength
    string pattern
    integer maxItems
    integer minItems
    boolean uniqueItems
    array~Any~ enum
    number multipleOf
    Any ^x-
  }
  Items *-- Items : Items.items

  class Responses:::Responses {
    ResponseðŸ”— default
    ResponseðŸ”— HTTP Status Code
    Any ^x-
  }
  Responses *-- Response : Responses.default
  Responses *-- Response : Responses.HTTP Status Code

  class Response:::Response {
    string description
    Schema schema
    Headers headers
    Example examples
    Any ^x-
  }
  Response *-- Schema : Response.schema
  Response *-- Headers : Response.headers
  Response *-- Example : Response.examples

  class Headers:::Headers {
    Header name
  }
  Headers *-- Header : Headers.name

  class Example:::Example {
    Any mime type
  }

  class Header:::Header {
    Any ^x-
  }

  class Tag:::Tag {
    string name
    string description
    ExternalDocumentation externalDocs
    Any ^x-
  }
  Tag *-- ExternalDocumentation : Tag.externalDocs

  class Reference:::Reference {
    string $ref
  }

  class Schema:::Schema {
    string discriminator
    boolean readOnly
    XML xml
    ExternalDocumentation externalDocs
    Any example
    Any ^x-
  }
  Schema *-- XML : Schema.xml
  Schema *-- ExternalDocumentation : Schema.externalDocs

  class XML:::XML {
    string name
    string namespace
    string prefix
    boolean attribute
    boolean wrapped
    Any ^x-
  }

  class Definitions:::Definitions {
    Schema name
  }
  Definitions *-- Schema : Definitions.name

  class ParametersDefinitions:::ParametersDefinitions {
    Parameter name
  }
  ParametersDefinitions *-- Parameter : ParametersDefinitions.name

  class ResponsesDefinitions:::ResponsesDefinitions {
    Response name
  }
  ResponsesDefinitions *-- Response : ResponsesDefinitions.name

  class SecurityDefinitions:::SecurityDefinitions {
    SecurityScheme name
  }
  SecurityDefinitions *-- SecurityScheme : SecurityDefinitions.name

  class SecurityScheme:::SecurityScheme {
    string type
    string description
    string name
    string in
    string flow
    string authorizationUrl
    string tokenUrl
    Scopes scopes
    Any ^x-
  }
  SecurityScheme *-- Scopes : SecurityScheme.scopes

  class Scopes:::Scopes {
    string name
  }

  class SecurityRequirement:::SecurityRequirement {
    array~string~ name
  }

