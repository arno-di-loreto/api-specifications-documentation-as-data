@startuml
class "Swagger" #line:Aquamarine;line.bold {
  swagger : string
  info : Info
  host : string
  basePath : string
  schemes : array of string
  consumes : array of string
  produces : array of string
  paths : Paths
  definitions : Definitions
  parameters : Parameters Definitions
  responses : Responses Definitions
  securityDefinitions : Security Definitions
  security : array of Security Requirement
  tags : array of Tag
  externalDocs : External Documentation
  ^x- : Any
}
"Swagger::info"*-->"Info" #Blue
"Swagger::paths"*-->"Paths" #CornflowerBlue
"Swagger::definitions"*-->"Definitions" #Fuchsia
"Swagger::parameters"*-->"Parameters Definitions" #Gold
"Swagger::responses"*-->"Responses Definitions" #GreenYellow
"Swagger::securityDefinitions"*-->"Security Definitions" #HotPink
"Swagger::security"*-->"Security Requirement" #LightCoral
"Swagger::tags"*-->"Tag" #DeepPink
"Swagger::externalDocs"*-->"External Documentation" #DarkMagenta

class "Info" #line:Blue;line.bold {
  title : string
  description : string
  termsOfService : string
  contact : Contact
  license : License
  version : string
  ^x- : Any
}
"Info::contact"*-->"Contact" #CadetBlue
"Info::license"*-->"License" #Coral

class "Contact" #line:CadetBlue;line.bold {
  name : string
  url : string
  email : string
  ^x- : Any
}

class "License" #line:Coral;line.bold {
  name : string
  url : string
  ^x- : Any
}

class "Paths" #line:CornflowerBlue;line.bold {
  /path : Path Item
  ^x- : Any
}
"Paths::/path"*-->"Path Item" #DarkCyan

class "Path Item" #line:DarkCyan;line.bold {
  $ref : string
  get : Operation
  put : Operation
  post : Operation
  delete : Operation
  options : Operation
  head : Operation
  patch : Operation
  parameters : array of Parameter or $ref
  ^x- : Any
}
"Path Item::get"*-->"Operation" #DarkGreen
"Path Item::put"*-->"Operation" #DarkGreen
"Path Item::post"*-->"Operation" #DarkGreen
"Path Item::delete"*-->"Operation" #DarkGreen
"Path Item::options"*-->"Operation" #DarkGreen
"Path Item::head"*-->"Operation" #DarkGreen
"Path Item::patch"*-->"Operation" #DarkGreen
"Path Item::parameters"*-->"Parameter" #DarkOrange

class "Operation" #line:DarkGreen;line.bold {
  tags : array of string
  summary : string
  description : string
  externalDocs : External Documentation
  operationId : string
  consumes : array of string
  produces : array of string
  parameters : array of Parameter or $ref
  responses : Responses
  schemes : array of string
  deprecated : boolean
  security : array of Security Requirement
  ^x- : Any
}
"Operation::externalDocs"*-->"External Documentation" #DarkMagenta
"Operation::parameters"*-->"Parameter" #DarkOrange
"Operation::responses"*-->"Responses" #DarkSalmon
"Operation::security"*-->"Security Requirement" #LightCoral

class "External Documentation" #line:DarkMagenta;line.bold {
  description : string
  url : string
  ^x- : Any
}

class "Parameter" #line:DarkOrange;line.bold {
  name : string
  in : string
  description : string
  required : boolean
  schema : Schema
  type : string
  format : string
  allowEmptyValue : boolean
  items : Items
  collectionFormat : string
  default : Any
  maximum : number
  exclusiveMaximum : boolean
  minimum : number
  exclusiveMinimum : boolean
  maxLength : integer
  minLength : integer
  pattern : string
  maxItems : integer
  minItems : integer
  uniqueItems : boolean
  enum : array of Any
  multipleOf : number
  ^x- : Any
}
"Parameter::schema"*-->"Schema" #FireBrick
"Parameter::items"*-->"Items" #DarkRed

class "Items" #line:DarkRed;line.bold {
  type : string
  format : string
  items : Items
  collectionFormat : string
  default : Any
  maximum : number
  exclusiveMaximum : boolean
  minimum : number
  exclusiveMinimum : boolean
  maxLength : integer
  minLength : integer
  pattern : string
  maxItems : integer
  minItems : integer
  uniqueItems : boolean
  enum : array of Any
  multipleOf : number
  ^x- : Any
}
"Items::items"*-->"Items" #DarkRed

class "Responses" #line:DarkSalmon;line.bold {
  default : Response or $ref
  HTTP Status Code : Response or $ref
  ^x- : Any
}
"Responses::default"*-->"Response" #DarkSeaGreen
"Responses::HTTP Status Code"*-->"Response" #DarkSeaGreen

class "Response" #line:DarkSeaGreen;line.bold {
  description : string
  schema : Schema
  headers : Headers
  examples : Example
  ^x- : Any
}
"Response::schema"*-->"Schema" #FireBrick
"Response::headers"*-->"Headers" #DarkSlateBlue
"Response::examples"*-->"Example" #DarkTurquoise

class "Headers" #line:DarkSlateBlue;line.bold {
  name : Header
}
"Headers::name"*-->"Header" #DarkViolet

class "Example" #line:DarkTurquoise;line.bold {
  mime type : Any
}

class "Header" #line:DarkViolet;line.bold {
  description : string
  type : string
  format : string
  items : Items
  collectionFormat : string
  default : Any
  maximum : number
  exclusiveMaximum : boolean
  minimum : number
  exclusiveMinimum : boolean
  maxLength : integer
  minLength : integer
  pattern : string
  maxItems : integer
  minItems : integer
  uniqueItems : boolean
  enum : array of Any
  multipleOf : number
  ^x- : Any
}
"Header::items"*-->"Items" #DarkRed

class "Tag" #line:DeepPink;line.bold {
  name : string
  description : string
  externalDocs : External Documentation
  ^x- : Any
}
"Tag::externalDocs"*-->"External Documentation" #DarkMagenta

class "Reference" #line:DeepSkyBlue;line.bold {
  $ref : string
}

class "Schema" #line:FireBrick;line.bold {
  discriminator : string
  readOnly : boolean
  xml : XML
  externalDocs : External Documentation
  example : Any
  ^x- : Any
}
"Schema::xml"*-->"XML" #ForestGreen
"Schema::externalDocs"*-->"External Documentation" #DarkMagenta

class "XML" #line:ForestGreen;line.bold {
  name : string
  namespace : string
  prefix : string
  attribute : boolean
  wrapped : boolean
  ^x- : Any
}

class "Definitions" #line:Fuchsia;line.bold {
  name : Schema
}
"Definitions::name"*-->"Schema" #FireBrick

class "Parameters Definitions" #line:Gold;line.bold {
  name : Parameter
}
"Parameters Definitions::name"*-->"Parameter" #DarkOrange

class "Responses Definitions" #line:GreenYellow;line.bold {
  name : Response
}
"Responses Definitions::name"*-->"Response" #DarkSeaGreen

class "Security Definitions" #line:HotPink;line.bold {
  name : Security Scheme
}
"Security Definitions::name"*-->"Security Scheme" #IndianRed

class "Security Scheme" #line:IndianRed;line.bold {
  type : string
  description : string
  name : string
  in : string
  flow : string
  authorizationUrl : string
  tokenUrl : string
  scopes : Scopes
  ^x- : Any
}
"Security Scheme::scopes"*-->"Scopes" #LightBlue

class "Scopes" #line:LightBlue;line.bold {
  name : string
}

class "Security Requirement" #line:LightCoral;line.bold {
  name : array of string
}

@enduml
